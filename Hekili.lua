
HekiliDB = {
["namespaces"] = {
},
["profileKeys"] = {
["桀桀 - 萨格拉斯"] = "Default",
["那能一样吗 - 国王之谷"] = "Default",
},
["profiles"] = {
["Default"] = {
["displays"] = {
["Interrupts"] = {
["rel"] = "CENTER",
},
["Cooldowns"] = {
["rel"] = "CENTER",
},
["Primary"] = {
["y"] = -327.5569763183594,
["x"] = -1448.941040039063,
["rel"] = "CENTER",
},
["AOE"] = {
["rel"] = "CENTER",
},
["Defensives"] = {
["rel"] = "CENTER",
},
},
["runOnce"] = {
["forceReloadAllDefaultPriorities_20220228"] = true,
["forceEnableAllClassesOnceDueToBug_20220225"] = true,
["removeOldThrottles_20241115"] = true,
["forceReloadClassDefaultOptions_20220306_252"] = true,
["forceReloadClassDefaultOptions_20220306_258"] = true,
["forceReloadClassDefaultOptions_20220306_250"] = true,
["forceReloadClassDefaultOptions_20220306_257"] = true,
["forceReloadClassDefaultOptions_20220306_251"] = true,
["fixHavocPriorityVersion_20240805"] = true,
["resetAberrantPackageDates_20190728_1"] = true,
["forceReloadClassDefaultOptions_20220306_256"] = true,
["forceSpellFlashBrightness_20221030"] = true,
},
["specs"] = {
[252] = {
["settings"] = {
["dnd_while_moving"] = true,
["dps_shell"] = false,
},
},
[256] = {
["settings"] = {
["sw_death_protection"] = 50,
},
},
[257] = {
["settings"] = {
["sw_death_protection"] = 50,
},
},
[250] = {
["settings"] = {
["death_strike_pool_amount"] = 65,
["save_blood_shield"] = true,
["dnd_while_moving"] = true,
["vb_damage"] = 50,
["ibf_damage"] = 40,
["rt_damage"] = 30,
},
["abilities"] = {
["death_strike"] = {
["disabled"] = true,
},
},
},
[251] = {
["settings"] = {
["dnd_while_moving"] = true,
["ams_usage"] = "damage",
},
},
[258] = {
["settings"] = {
["pad_void_bolt"] = true,
["hold_crash"] = 0,
["sw_death_protection"] = 50,
["pad_ascended_blast"] = true,
},
},
},
["toggles"] = {
["interrupts"] = {
["value"] = false,
},
["cooldowns"] = {
["value"] = false,
},
["defensives"] = {
["value"] = false,
},
},
["packs"] = {
["Discipline"] = {
["source"] = "https://github.com/simulationcraft/simc/",
["builtIn"] = true,
["date"] = 20250810,
["author"] = "SimC",
["desc"] = "Healer priorities are DPS-focused only\n\n2025-04-23: Remove PTW\n\n2024-07-30: The War Within",
["lists"] = {
["default"] = {
{
["enabled"] = true,
["action"] = "call_action_list",
["list_name"] = "cooldowns",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "! buff.twilight_equilibrium_holy_amp.up & ! buff.twilight_equilibrium_shadow_amp.up",
["var_name"] = "te_none",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "buff.twilight_equilibrium_shadow_amp.up || variable.te_none",
["var_name"] = "te_shadow",
["description"] = "Twilight Equilibrium is buffing shadow damage",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "buff.twilight_equilibrium_holy_amp.up || variable.te_none",
["var_name"] = "te_holy",
["description"] = "Twilight Equilibrium is buffing holy damage",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "talent.shadow_covenant.enabled",
["var_name"] = "long_scov",
["description"] = "Long Shadow covenant is enabled",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "cooldown.shadowfiend.up || buff.shadow_covenant.up",
["var_name"] = "can_enter_scov",
["description"] = "Ready to start shadow covenant phase",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "0",
["var_name"] = "shadow_spells_duration_max",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["value"] = "2",
["var_name"] = "shadow_spells_duration_max",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["value"] = "action.mind_blast.execute_time",
["var_name"] = "shadow_spells_duration_max",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "shadow_spells_duration_max",
["value"] = "action.mind_blast.execute_time",
["description"] = "penance",
["criteria"] = "talent.dark_indulgence.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["value"] = "action.shadow_word_death.execute_time",
["var_name"] = "shadow_spells_duration_max",
["criteria"] = "talent.shadow_word_death.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["value"] = "action.shadow_word_death.execute_time",
["var_name"] = "shadow_spells_duration_max",
["criteria"] = "talent.shadow_word_death.enabled & talent.death_and_madness.enabled & target.health.pct < 20",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["value"] = "action.mindgames.execute_time",
["var_name"] = "shadow_spells_duration_max",
["criteria"] = "talent.mindgames.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["value"] = "action.divine_star.execute_time",
["var_name"] = "shadow_spells_duration_max",
["criteria"] = "talent.divine_star.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["value"] = "action.halo.execute_time",
["var_name"] = "shadow_spells_duration_max",
["criteria"] = "talent.halo.enabled",
},
{
["enabled"] = true,
["op"] = "floor",
["action"] = "variable",
["value"] = "( buff.shadow_covenant.duration - variable.shadow_spells_duration_max ) / gcd.max",
["var_name"] = "max_te_holy",
["description"] = "(scov duration - shadow spells duration) / GCD time = estimate of holy spells we should need to use during the next scov window  Long scov example: (15 - 12) / 1.5 = 2 GCDs to spend on holy spells  Short scov example: (7 - 12) / 1.5 = -3.3 GCDs to spend on holy spells (none)",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "0",
["var_name"] = "remaining_te_holy",
["description"] = "Counting variable, the number of non-fractional remaining holy casts available",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["value"] = "variable.max_te_holy",
["var_name"] = "remaining_te_holy",
},
{
["enabled"] = true,
["op"] = "setif",
["description"] = "TODO: duration_expected is buggy on penance/dark reprimand, using a static reduction as a stand-in for now",
["value"] = "2",
["var_name"] = "expected_penance_reduction",
["action"] = "variable",
["value_else"] = "0",
["criteria"] = "talent.train_of_thought.enabled",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "0",
["var_name"] = "shadow_spells_duration",
["description"] = "Calculate how much cast time worth of shadow spells we have currently available. We use shadow_spells_duration to determine if we have time to weave in any holy spells to proc twilight equilibrium.",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "shadow_spells_duration",
["value"] = "2",
["description"] = "Schism Penance",
["criteria"] = "cooldown.penance.up || ( ( cooldown.penance.remains - variable.expected_penance_reduction ) < buff.shadow_covenant.remains )",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "shadow_spells_duration",
["value"] = "action.mindgames.execute_time",
["description"] = "Mindgames",
["criteria"] = "cooldown.mindgames.up || ( cooldown.mindgames.remains_expected < buff.shadow_covenant.remains )",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "shadow_spells_duration",
["value"] = "action.shadow_word_death.execute_time",
["description"] = "We always get the first SW:D",
["criteria"] = "cooldown.shadow_word_death.up || ( cooldown.shadow_word_death.remains < buff.shadow_covenant.remains )",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "shadow_spells_duration",
["value"] = "action.shadow_word_death.execute_time",
["description"] = "Second SW:D only when talented and target health in execute range",
["criteria"] = "( cooldown.shadow_word_death.up || ( cooldown.shadow_word_death.remains < buff.shadow_covenant.remains ) ) & ( target.health.pct < 20 || target.time_to_pct_20 < cooldown.shadow_word_death.remains ) & talent.death_and_madness.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "shadow_spells_duration",
["value"] = "action.mind_blast.charges * action.mind_blast.execute_time",
["description"] = "Add any whole charges of mind blast",
["criteria"] = "action.mind_blast.charges >= 1",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "shadow_spells_duration",
["value"] = "action.mind_blast.execute_time",
["description"] = "Add any fractional charges of mindblast that will recharge in time",
["criteria"] = "( ( action.mind_blast.charges_fractional >= 1 & action.mind_blast.charges_fractional < 2 ) & ( ( ( 1 - ( action.mind_blast.charges_fractional - 1 ) ) * action.mind_blast.recharge_time ) < buff.shadow_covenant.remains ) ) || ( ( action.mind_blast.charges_fractional < 1 ) & ( ( ( 1 - action.mind_blast.charges_fractional ) * action.mind_blast.recharge_time ) < buff.shadow_covenant.remains ) )",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "shadow_spells_duration",
["value"] = "action.divine_star.execute_time",
["description"] = "Divine Star",
["criteria"] = "cooldown.divine_star.up || ( cooldown.divine_star.remains < buff.shadow_covenant.remains )",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "shadow_spells_duration",
["value"] = "action.halo.execute_time",
["description"] = "Halo",
["criteria"] = "cooldown.halo.up || ( cooldown.halo.remains < buff.shadow_covenant.remains )",
},
{
["enabled"] = true,
["op"] = "setif",
["description"] = "Determine if we have enough scov time remaining to weave in a twilight equilibrium activation. If we don't have TE talented, always false. Using smite's execution time to represent a worst-case scenario.",
["value"] = "( buff.shadow_covenant.remains - variable.shadow_spells_duration ) > action.smite.execute_time",
["var_name"] = "should_te",
["action"] = "variable",
["value_else"] = "0",
["criteria"] = "talent.twilight_equilibrium.enabled",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "cooldown.shadowfiend.remains + action.shadowfiend.execute_time",
["var_name"] = "next_penance_time",
["description"] = "First casts should always be HD prep->covenant->schism->HD dark reprimand",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_penance_time",
["value"] = "gcd.max",
["description"] = "If we have enough scov duration, add a holy cast to proc twilight equilibrium",
["criteria"] = "variable.remaining_te_holy > 0",
},
{
["enabled"] = true,
["op"] = "sub",
["action"] = "variable",
["value"] = "1",
["var_name"] = "remaining_te_holy",
["description"] = "Reduce our counting variable",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( cooldown.penance.duration - variable.expected_penance_reduction ) < variable.next_penance_time",
["var_name"] = "can_penance",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "variable.next_penance_time + 2",
["var_name"] = "next_swd_time",
["description"] = "Shadow Word: Death  SW:D is better than other spells if we are in execute phase.",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_swd_time",
["value"] = "gcd.max",
["description"] = "If we have enough scov duration, add a holy cast to proc twilight equilibrium",
["criteria"] = "variable.remaining_te_holy > 0",
},
{
["enabled"] = true,
["op"] = "sub",
["action"] = "variable",
["value"] = "1",
["var_name"] = "remaining_te_holy",
["description"] = "Reduce our counting variable",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_swd_time",
["value"] = "action.mindgames.execute_time",
["description"] = "indgame  ette ha W:   ren'  xecut has n  av hattere erception  on' av xpiatio",
["criteria"] = "( ( talent.mindgames.enabled & talent.shattered_perceptions.enabled ) || ( talent.mindgames.enabled & ! talent.expiation.enabled ) ) & target.health.pct >= 20",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_swd_time",
["value"] = "action.mind_blast.execute_time",
["description"] = "Mind blast is better than SW:D if we aren't in execute",
["criteria"] = "target.health.pct >= 20",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_swd_time",
["value"] = "action.mind_blast.execute_time",
["description"] = "Second mindblast when talented",
["criteria"] = "target.health.pct >= 20 & talent.dark_indulgence.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_swd_time",
["value"] = "action.divine_star.execute_time",
["description"] = "Divine Star and halo are better than SW:D if we aren't in execute and don't have expiation",
["criteria"] = "talent.divine_star.enabled & target.health.pct >= 20 & ! talent.expiation.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["value"] = "action.halo.execute_time",
["var_name"] = "next_swd_time",
["criteria"] = "talent.halo.enabled & target.health.pct >= 20 & ! talent.expiation.enabled",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "cooldown.shadow_word_death.duration_expected < variable.next_swd_time",
["var_name"] = "can_swd",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "variable.next_penance_time + 2",
["var_name"] = "next_mind_blast_time",
["description"] = "Mindblast  Mindblast is better than other spells if we aren't in execute phase",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_mind_blast_time",
["value"] = "gcd.max",
["description"] = "If we have enough scov duration, add a holy cast to proc twilight equilibrium",
["criteria"] = "variable.remaining_te_holy > 0",
},
{
["enabled"] = true,
["op"] = "sub",
["action"] = "variable",
["value"] = "1",
["var_name"] = "remaining_te_holy",
["description"] = "Reduce our counting variable",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_mind_blast_time",
["value"] = "action.shadow_word_death.execute_time",
["description"] = "Add SW:D if we're in execute phase",
["criteria"] = "target.health.pct < 20",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_mind_blast_time",
["value"] = "action.shadow_word_death.execute_time",
["description"] = "Add a second SW:D if we have death and madness",
["criteria"] = "talent.death_and_madness.enabled & target.health.pct < 20",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_mind_blast_time",
["value"] = "action.mindgames.execute_time",
["description"] = "Add mindgames if we have it talented and don't have expiation",
["criteria"] = "talent.mindgames.enabled & ! talent.expiation.enabled",
},
{
["enabled"] = true,
["op"] = "setif",
["description"] = "TODO: This is a little bit simplistic, requiring both charges of mindblast to be available at the moment the first charge needs to be used. Slight optimization should be possible.",
["value"] = "( ( action.mind_blast.max_charges - ( action.mind_blast.charges_fractional - 1 ) ) * action.mind_blast.recharge_time ) < variable.next_mind_blast_time",
["var_name"] = "can_mind_blast",
["action"] = "variable",
["value_else"] = "0",
["criteria"] = "action.mind_blast.charges_fractional >= 1",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "variable.next_penance_time + 2",
["var_name"] = "next_mindgames_time",
["description"] = "Mindgames  Mindgames is a better option than other spells if we aren't in execute and don't have expiation",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_mindgames_time",
["value"] = "gcd.max",
["description"] = "If we have enough scov duration, add a holy cast to proc twilight equilibrium",
["criteria"] = "variable.remaining_te_holy > 0",
},
{
["enabled"] = true,
["op"] = "sub",
["action"] = "variable",
["value"] = "1",
["var_name"] = "remaining_te_holy",
["description"] = "Reduce our counting variable",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_mindgames_time",
["value"] = "action.shadow_word_death.execute_time",
["description"] = "SW:D is better than mindgames in execute phase, or outside of execute phase if we don't have shattered perceptions but do have expiation",
["criteria"] = "target.health.pct < 20 || ( talent.expiation.enabled & ! talent.shattered_perceptions.enabled )",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_mindgames_time",
["value"] = "action.shadow_word_death.execute_time",
["description"] = "Add a second SW:D if we have death and madness",
["criteria"] = "target.health.pct < 20 & talent.death_and_madness.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_mindgames_time",
["value"] = "action.mind_blast.execute_time",
["description"] = "Mind blast is better than mindgames if we have expiation",
["criteria"] = "talent.expiation.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_mindgames_time",
["value"] = "action.mind_blast.execute_time",
["description"] = "Second mindblast when talented",
["criteria"] = "talent.expiation.enabled & talent.dark_indulgence.enabled",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "cooldown.mindgames.duration_expected < variable.next_mindgames_time",
["var_name"] = "can_mindgames",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "variable.next_penance_time + 2",
["var_name"] = "next_divine_star_time",
["description"] = "Divine Star",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_divine_star_time",
["value"] = "gcd.max",
["description"] = "If we have enough scov duration, add a holy cast to proc twilight equilibrium",
["criteria"] = "variable.remaining_te_holy > 0",
},
{
["enabled"] = true,
["op"] = "sub",
["action"] = "variable",
["value"] = "1",
["var_name"] = "remaining_te_holy",
["description"] = "Reduce our counting variable",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_divine_star_time",
["value"] = "action.shadow_word_death.execute_time",
["description"] = "SW:D is better unless outside of execute phase when expiation is untalented",
["criteria"] = "target.health.pct < 20 || talent.expiation.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_divine_star_time",
["value"] = "action.shadow_word_death.execute_time",
["description"] = "Add a second SW:D if we have death and madness",
["criteria"] = "target.health.pct < 20 & talent.death_and_madness.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_divine_star_time",
["value"] = "action.mind_blast.execute_time",
["description"] = "Mind blast is always better",
["criteria"] = "talent.expiation.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_divine_star_time",
["value"] = "action.mind_blast.execute_time",
["description"] = "Second mindblast when talented",
["criteria"] = "talent.dark_indulgence.enabled",
},
{
["enabled"] = true,
["op"] = "add",
["action"] = "variable",
["var_name"] = "next_divine_star_time",
["value"] = "action.mindgames.execute_time",
["description"] = "Mindgames is always better",
["criteria"] = "talent.mindgames.enabled",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "cooldown.divine_star.duration < variable.next_divine_star_time",
["var_name"] = "can_divine_star",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["criteria"] = "talent.shadow_covenant.enabled & cooldown.mindbender.up",
["list_name"] = "scov_prep",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["criteria"] = "variable.long_scov & variable.can_enter_scov",
["list_name"] = "long_scov",
},
{
["enabled"] = true,
["criteria"] = "( target.time_to_die > ( 0.3 * dot.shadow_word_pain.duration ) ) & ( ! ticking || ( refreshable & ( ! talent.painful_punishment.enabled || ( talent.painful_punishment.enabled & ( dot.shadow_word_pain.remains < ( cooldown.penance.remains - variable.expected_penance_reduction ) ) ) ) ) )",
["action"] = "shadow_word_pain",
},
{
["enabled"] = true,
["criteria"] = "( ! talent.shadow_covenant.enabled || variable.can_swd ) & target.health.pct < 20",
["action"] = "shadow_word_death",
},
{
["enabled"] = true,
["criteria"] = "talent.dark_indulgence.enabled & buff.power_of_the_dark_side.down & cooldown.penance.remains < gcd.max",
["action"] = "mind_blast",
},
{
["enabled"] = true,
["criteria"] = "( ! talent.shadow_covenant.enabled || variable.can_penance )",
["action"] = "penance",
},
{
["enabled"] = true,
["criteria"] = "! talent.shadow_covenant.enabled || variable.can_mind_blast",
["action"] = "mind_blast",
},
{
["enabled"] = true,
["criteria"] = "( ! talent.shadow_covenant.enabled || variable.can_mindgames ) & talent.shattered_perceptions.enabled",
["action"] = "mindgames",
},
{
["enabled"] = true,
["criteria"] = "( ! talent.shadow_covenant.enabled || variable.can_swd ) & talent.expiation.enabled & ( target.time_to_pct_20 > ( 0.5 * cooldown.shadow_word_death.duration ) )",
["action"] = "shadow_word_death",
},
{
["enabled"] = true,
["criteria"] = "( ! talent.shadow_covenant.enabled || variable.can_mindgames ) & ! talent.shattered_perceptions.enabled",
["action"] = "mindgames",
},
{
["enabled"] = true,
["criteria"] = "! talent.shadow_covenant.enabled",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "( ! talent.shadow_covenant.enabled || variable.can_divine_star )",
["action"] = "divine_star",
},
{
["enabled"] = true,
["criteria"] = "( ! talent.shadow_covenant.enabled || variable.can_swd ) & ( target.time_to_pct_20 > ( 0.5 * cooldown.shadow_word_death.duration ) )",
["action"] = "shadow_word_death",
},
{
["action"] = "smite",
["enabled"] = true,
},
},
["precombat"] = {
{
["action"] = "power_word_fortitude",
["enabled"] = true,
},
},
["cooldowns"] = {
{
["enabled"] = true,
["criteria"] = "! buff.shadow_covenant.up",
["action"] = "shadowfiend",
["description"] = "Don't use pets during shadow covenant windows, wasting GCDs -- is this even possible anymore?",
},
{
["enabled"] = true,
["criteria"] = "! talent.shadow_covenant.enabled || ( talent.shadow_covenant.enabled & ( cooldown.shadowfiend.up || buff.shadow_covenant.up ) )",
["action"] = "power_infusion",
["description"] = "hold PI to use with shadow covenant if we have it",
},
{
["enabled"] = true,
["criteria"] = "buff.power_infusion.up",
["action"] = "potion",
["description"] = "sync potion with PI",
},
{
["enabled"] = true,
["criteria"] = "buff.power_infusion.up || cooldown.power_infusion.remains >= action_cooldown",
["action"] = "use_items",
["description"] = "sync trinkets with PI",
},
},
["scov_prep"] = {
{
["enabled"] = true,
["criteria"] = "cooldown.shadowfiend.remains < cast_time",
["action"] = "power_word_radiance",
["description"] = "Prepare to enter shadow covenant",
},
},
["long_scov"] = {
{
["enabled"] = true,
["description"] = "Long Shadow Covenant",
["action"] = "mindbender",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) ) & spell_targets.halo >= 3",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) ) & spell_targets.divine_star >= 3",
["action"] = "divine_star",
},
{
["enabled"] = true,
["criteria"] = "target.health.pct < 20 & talent.expiation.enabled & ( ! variable.should_te || ( variable.should_te & variable.te_shadow ) )",
["action"] = "shadow_word_death",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) )",
["action"] = "penance",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) ) & spell_targets.halo >= 2",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) ) & spell_targets.divine_star >= 2",
["action"] = "divine_star",
},
{
["enabled"] = true,
["criteria"] = "target.health.pct < 20 & ( ! variable.should_te || ( variable.should_te & variable.te_shadow ) )",
["action"] = "shadow_word_death",
},
{
["enabled"] = true,
["criteria"] = "talent.expiation.enabled & ( ! variable.should_te || ( variable.should_te & variable.te_shadow ) )",
["action"] = "mind_blast",
},
{
["enabled"] = true,
["criteria"] = "talent.shattered_perceptions.enabled & ( ! variable.should_te || ( variable.should_te & variable.te_shadow ) )",
["action"] = "mindgames",
},
{
["enabled"] = true,
["criteria"] = "talent.expiation.enabled & ( ! variable.should_te || ( variable.should_te & variable.te_shadow ) ) & ( target.time_to_pct_20 > buff.shadow_covenant.remains )",
["action"] = "shadow_word_death",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) )",
["action"] = "mindgames",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) )",
["action"] = "mind_blast",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) )",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) )",
["action"] = "divine_star",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_shadow ) ) & ( target.time_to_pct_20 > buff.shadow_covenant.remains )",
["action"] = "shadow_word_death",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.should_te || ( variable.should_te & variable.te_holy ) )",
["action"] = "smite",
},
{
["enabled"] = true,
["description"] = "just in case we run out of shadow spells with the above conditions",
["action"] = "penance",
},
{
["action"] = "mindgames",
["enabled"] = true,
},
{
["action"] = "mind_blast",
["enabled"] = true,
},
{
["action"] = "shadow_word_death",
["enabled"] = true,
},
{
["action"] = "divine_star",
["enabled"] = true,
},
{
["action"] = "halo",
["enabled"] = true,
},
{
["action"] = "smite",
["enabled"] = true,
},
},
},
["version"] = 20250810,
["warnings"] = "The import for 'default' required some automated changes.\nLine 16: Converted operations in '(buff.shadow_covenant.duration-variable.shadow_spells_duration_max)%gcd.max' to '(buff.shadow_covenant.duration-variable.shadow_spells_duration_max)/gcd.max'.\n\nImported 5 action lists.\n",
["profile"] = "actions.precombat+=/power_word_fortitude\n\nactions+=/call_action_list,name=cooldowns\nactions+=/variable,name=te_none,op=set,value=!buff.twilight_equilibrium_holy_amp.up&!buff.twilight_equilibrium_shadow_amp.up\n# Twilight Equilibrium is buffing shadow damage\nactions+=/variable,name=te_shadow,op=set,value=buff.twilight_equilibrium_shadow_amp.up||variable.te_none\n# Twilight Equilibrium is buffing holy damage\nactions+=/variable,name=te_holy,op=set,value=buff.twilight_equilibrium_holy_amp.up||variable.te_none\n# Long Shadow covenant is enabled\nactions+=/variable,name=long_scov,op=set,value=talent.shadow_covenant\n# Ready to start shadow covenant phase\nactions+=/variable,name=can_enter_scov,op=set,value=cooldown.shadowfiend.up||buff.shadow_covenant.up\nactions+=/variable,name=shadow_spells_duration_max,op=set,value=0\n## actions+=/variable,name=shadow_spells_duration_max,op=add,value=action.schism.execute_time,if=talent.schism\nactions+=/variable,name=shadow_spells_duration_max,op=add,value=2\nactions+=/variable,name=shadow_spells_duration_max,op=add,value=action.mind_blast.execute_time\n# penance\nactions+=/variable,name=shadow_spells_duration_max,op=add,value=action.mind_blast.execute_time,if=talent.dark_indulgence\nactions+=/variable,name=shadow_spells_duration_max,op=add,value=action.shadow_word_death.execute_time,if=talent.shadow_word_death\nactions+=/variable,name=shadow_spells_duration_max,op=add,value=action.shadow_word_death.execute_time,if=talent.shadow_word_death&talent.death_and_madness&target.health.pct<20\nactions+=/variable,name=shadow_spells_duration_max,op=add,value=action.mindgames.execute_time,if=talent.mindgames\nactions+=/variable,name=shadow_spells_duration_max,op=add,value=action.divine_star.execute_time,if=talent.divine_star\nactions+=/variable,name=shadow_spells_duration_max,op=add,value=action.halo.execute_time,if=talent.halo\n# (scov duration - shadow spells duration) / GCD time = estimate of holy spells we should need to use during the next scov window  Long scov example: (15 - 12) / 1.5 = 2 GCDs to spend on holy spells  Short scov example: (7 - 12) / 1.5 = -3.3 GCDs to spend on holy spells (none)\nactions+=/variable,name=max_te_holy,op=floor,value=(buff.shadow_covenant.duration-variable.shadow_spells_duration_max)%gcd.max\n# Counting variable, the number of non-fractional remaining holy casts available\nactions+=/variable,name=remaining_te_holy,op=set,value=0\nactions+=/variable,name=remaining_te_holy,op=add,value=variable.max_te_holy\n# TODO: duration_expected is buggy on penance/dark reprimand, using a static reduction as a stand-in for now\nactions+=/variable,name=expected_penance_reduction,op=setif,condition=talent.train_of_thought,value=2,value_else=0\n# Calculate how much cast time worth of shadow spells we have currently available. We use shadow_spells_duration to determine if we have time to weave in any holy spells to proc twilight equilibrium.\nactions+=/variable,name=shadow_spells_duration,op=set,value=0\n# Schism\n## actions+=/variable,name=shadow_spells_duration,op=add,value=action.schism.execute_time,if=cooldown.schism.up||(cooldown.schism.remains<buff.shadow_covenant.remains)\n# Penance\nactions+=/variable,name=shadow_spells_duration,op=add,value=2,if=cooldown.penance.up||((cooldown.penance.remains-variable.expected_penance_reduction)<buff.shadow_covenant.remains)\n# Mindgames\nactions+=/variable,name=shadow_spells_duration,op=add,value=action.mindgames.execute_time,if=cooldown.mindgames.up||(cooldown.mindgames.remains_expected<buff.shadow_covenant.remains)\n# We always get the first SW:D\nactions+=/variable,name=shadow_spells_duration,op=add,value=action.shadow_word_death.execute_time,if=cooldown.shadow_word_death.up||(cooldown.shadow_word_death.remains<buff.shadow_covenant.remains)\n# Second SW:D only when talented and target health in execute range\nactions+=/variable,name=shadow_spells_duration,op=add,value=action.shadow_word_death.execute_time,if=(cooldown.shadow_word_death.up||(cooldown.shadow_word_death.remains<buff.shadow_covenant.remains))&(target.health.pct<20||target.time_to_pct_20<cooldown.shadow_word_death.remains)&talent.death_and_madness\n# Add any whole charges of mind blast\nactions+=/variable,name=shadow_spells_duration,op=add,value=action.mind_blast.charges*action.mind_blast.execute_time,if=action.mind_blast.charges>=1\n# Add any fractional charges of mindblast that will recharge in time\nactions+=/variable,name=shadow_spells_duration,op=add,value=action.mind_blast.execute_time,if=((action.mind_blast.charges_fractional>=1&action.mind_blast.charges_fractional<2)&(((1-(action.mind_blast.charges_fractional-1))*action.mind_blast.recharge_time)<buff.shadow_covenant.remains))||((action.mind_blast.charges_fractional<1)&(((1-action.mind_blast.charges_fractional)*action.mind_blast.recharge_time)<buff.shadow_covenant.remains))\n# Divine Star\nactions+=/variable,name=shadow_spells_duration,op=add,value=action.divine_star.execute_time,if=cooldown.divine_star.up||(cooldown.divine_star.remains<buff.shadow_covenant.remains)\n# Halo\nactions+=/variable,name=shadow_spells_duration,op=add,value=action.halo.execute_time,if=cooldown.halo.up||(cooldown.halo.remains<buff.shadow_covenant.remains)\n# Determine if we have enough scov time remaining to weave in a twilight equilibrium activation. If we don't have TE talented, always false. Using smite's execution time to represent a worst-case scenario.\nactions+=/variable,name=should_te,op=setif,condition=talent.twilight_equilibrium,value=(buff.shadow_covenant.remains-variable.shadow_spells_duration)>action.smite.execute_time,value_else=0\n\n# First casts should always be HD prep->covenant->schism->HD dark reprimand\nactions+=/variable,name=next_penance_time,op=set,value=cooldown.shadowfiend.remains+action.shadowfiend.execute_time\n# If we have enough scov duration, add a holy cast to proc twilight equilibrium\nactions+=/variable,name=next_penance_time,op=add,value=gcd.max,if=variable.remaining_te_holy>0\n# Reduce our counting variable\nactions+=/variable,name=remaining_te_holy,op=sub,value=1\nactions+=/variable,name=can_penance,op=set,value=(cooldown.penance.duration-variable.expected_penance_reduction)<variable.next_penance_time\n# Shadow Word: Death  SW:D is better than other spells if we are in execute phase.\nactions+=/variable,name=next_swd_time,op=set,value=variable.next_penance_time+2\n# If we have enough scov duration, add a holy cast to proc twilight equilibrium\nactions+=/variable,name=next_swd_time,op=add,value=gcd.max,if=variable.remaining_te_holy>0\n# Reduce our counting variable\nactions+=/variable,name=remaining_te_holy,op=sub,value=1\n# indgame  ette ha W:   ren'  xecut has n  av hattere erception  on' av xpiatio\nactions+=/variable,name=next_swd_time,op=add,value=action.mindgames.execute_time,if=((talent.mindgames&talent.shattered_perceptions)||(talent.mindgames&!talent.expiation))&target.health.pct>=20\n# Mind blast is better than SW:D if we aren't in execute\nactions+=/variable,name=next_swd_time,op=add,value=action.mind_blast.execute_time,if=target.health.pct>=20\n# Second mindblast when talented\nactions+=/variable,name=next_swd_time,op=add,value=action.mind_blast.execute_time,if=target.health.pct>=20&talent.dark_indulgence\n# Divine Star and halo are better than SW:D if we aren't in execute and don't have expiation\nactions+=/variable,name=next_swd_time,op=add,value=action.divine_star.execute_time,if=talent.divine_star&target.health.pct>=20&!talent.expiation\nactions+=/variable,name=next_swd_time,op=add,value=action.halo.execute_time,if=talent.halo&target.health.pct>=20&!talent.expiation\nactions+=/variable,name=can_swd,op=set,value=cooldown.shadow_word_death.duration_expected<variable.next_swd_time\n# Mindblast  Mindblast is better than other spells if we aren't in execute phase\nactions+=/variable,name=next_mind_blast_time,op=set,value=variable.next_penance_time+2\n# If we have enough scov duration, add a holy cast to proc twilight equilibrium\nactions+=/variable,name=next_mind_blast_time,op=add,value=gcd.max,if=variable.remaining_te_holy>0\n# Reduce our counting variable\nactions+=/variable,name=remaining_te_holy,op=sub,value=1\n# Add SW:D if we're in execute phase\nactions+=/variable,name=next_mind_blast_time,op=add,value=action.shadow_word_death.execute_time,if=target.health.pct<20\n# Add a second SW:D if we have death and madness\nactions+=/variable,name=next_mind_blast_time,op=add,value=action.shadow_word_death.execute_time,if=talent.death_and_madness&target.health.pct<20\n# Add mindgames if we have it talented and don't have expiation\nactions+=/variable,name=next_mind_blast_time,op=add,value=action.mindgames.execute_time,if=talent.mindgames&!talent.expiation\n# TODO: This is a little bit simplistic, requiring both charges of mindblast to be available at the moment the first charge needs to be used. Slight optimization should be possible.\nactions+=/variable,name=can_mind_blast,op=setif,condition=action.mind_blast.charges_fractional>=1,value=((action.mind_blast.max_charges-(action.mind_blast.charges_fractional-1))*action.mind_blast.recharge_time)<variable.next_mind_blast_time,value_else=0\n# Mindgames  Mindgames is a better option than other spells if we aren't in execute and don't have expiation\nactions+=/variable,name=next_mindgames_time,op=set,value=variable.next_penance_time+2\n# If we have enough scov duration, add a holy cast to proc twilight equilibrium\nactions+=/variable,name=next_mindgames_time,op=add,value=gcd.max,if=variable.remaining_te_holy>0\n# Reduce our counting variable\nactions+=/variable,name=remaining_te_holy,op=sub,value=1\n# SW:D is better than mindgames in execute phase, or outside of execute phase if we don't have shattered perceptions but do have expiation\nactions+=/variable,name=next_mindgames_time,op=add,value=action.shadow_word_death.execute_time,if=target.health.pct<20||(talent.expiation&!talent.shattered_perceptions)\n# Add a second SW:D if we have death and madness\nactions+=/variable,name=next_mindgames_time,op=add,value=action.shadow_word_death.execute_time,if=target.health.pct<20&talent.death_and_madness\n# Mind blast is better than mindgames if we have expiation\nactions+=/variable,name=next_mindgames_time,op=add,value=action.mind_blast.execute_time,if=talent.expiation\n# Second mindblast when talented\nactions+=/variable,name=next_mindgames_time,op=add,value=action.mind_blast.execute_time,if=talent.expiation&talent.dark_indulgence\nactions+=/variable,name=can_mindgames,op=set,value=cooldown.mindgames.duration_expected<variable.next_mindgames_time\n# Divine Star\nactions+=/variable,name=next_divine_star_time,op=set,value=variable.next_penance_time+2\n# If we have enough scov duration, add a holy cast to proc twilight equilibrium\nactions+=/variable,name=next_divine_star_time,op=add,value=gcd.max,if=variable.remaining_te_holy>0\n# Reduce our counting variable\nactions+=/variable,name=remaining_te_holy,op=sub,value=1\n# SW:D is better unless outside of execute phase when expiation is untalented\nactions+=/variable,name=next_divine_star_time,op=add,value=action.shadow_word_death.execute_time,if=target.health.pct<20||talent.expiation\n# Add a second SW:D if we have death and madness\nactions+=/variable,name=next_divine_star_time,op=add,value=action.shadow_word_death.execute_time,if=target.health.pct<20&talent.death_and_madness\n# Mind blast is always better\nactions+=/variable,name=next_divine_star_time,op=add,value=action.mind_blast.execute_time,if=talent.expiation\n# Second mindblast when talented\nactions+=/variable,name=next_divine_star_time,op=add,value=action.mind_blast.execute_time,if=talent.dark_indulgence\n# Mindgames is always better\nactions+=/variable,name=next_divine_star_time,op=add,value=action.mindgames.execute_time,if=talent.mindgames\nactions+=/variable,name=can_divine_star,op=set,value=cooldown.divine_star.duration<variable.next_divine_star_time\nactions+=/run_action_list,name=scov_prep,if=talent.shadow_covenant&cooldown.mindbender.up\n## actions+=/run_action_list,name=short_scov,if=variable.short_scov&variable.can_enter_scov\nactions+=/run_action_list,name=long_scov,if=variable.long_scov&variable.can_enter_scov\nactions+=/shadow_word_pain,if=(target.time_to_die>(0.3*dot.shadow_word_pain.duration))&(!ticking||(refreshable&(!talent.painful_punishment||(talent.painful_punishment&(dot.shadow_word_pain.remains<(cooldown.penance.remains-variable.expected_penance_reduction))))))\n## actions+=/schism,if=!talent.shadow_covenant\nactions+=/shadow_word_death,if=(!talent.shadow_covenant||variable.can_swd)&target.health.pct<20\nactions+=/mind_blast,if=talent.dark_indulgence&buff.power_of_the_dark_side.down&cooldown.penance.remains<gcd.max\nactions+=/penance,if=(!talent.shadow_covenant||variable.can_penance)\n## # For DPS, Lights wrath should always be used outside of scov when you take wrath unleashed to maximize the number of smites it buffs. In a real raid setting, you may want to cast it at the beginning of a scov cycle for additional healing.\n## actions+=/lights_wrath,if=talent.wrath_unleashed\nactions+=/mind_blast,if=!talent.shadow_covenant||variable.can_mind_blast\nactions+=/mindgames,if=(!talent.shadow_covenant||variable.can_mindgames)&talent.shattered_perceptions\nactions+=/shadow_word_death,if=(!talent.shadow_covenant||variable.can_swd)&talent.expiation&(target.time_to_pct_20>(0.5*cooldown.shadow_word_death.duration))\nactions+=/mindgames,if=(!talent.shadow_covenant||variable.can_mindgames)&!talent.shattered_perceptions\nactions+=/halo,if=!talent.shadow_covenant\nactions+=/divine_star,if=(!talent.shadow_covenant||variable.can_divine_star)\n## actions+=/power_word_solace\nactions+=/shadow_word_death,if=(!talent.shadow_covenant||variable.can_swd)&(target.time_to_pct_20>(0.5*cooldown.shadow_word_death.duration))\nactions+=/smite\n\n# Prepare to enter shadow covenant\nactions.scov_prep+=/power_word_radiance,if=cooldown.shadowfiend.remains<cast_time\n\n# Long Shadow Covenant\nactions.long_scov+=/mindbender\n## actions.long_scov+=/schism\nactions.long_scov+=/halo,if=(!variable.should_te||(variable.should_te&variable.te_shadow))&spell_targets.halo>=3\nactions.long_scov+=/divine_star,if=(!variable.should_te||(variable.should_te&variable.te_shadow))&spell_targets.divine_star>=3\nactions.long_scov+=/shadow_word_death,if=target.health.pct<20&talent.expiation&(!variable.should_te||(variable.should_te&variable.te_shadow))\nactions.long_scov+=/penance,if=(!variable.should_te||(variable.should_te&variable.te_shadow))\nactions.long_scov+=/halo,if=(!variable.should_te||(variable.should_te&variable.te_shadow))&spell_targets.halo>=2\nactions.long_scov+=/divine_star,if=(!variable.should_te||(variable.should_te&variable.te_shadow))&spell_targets.divine_star>=2\nactions.long_scov+=/shadow_word_death,if=target.health.pct<20&(!variable.should_te||(variable.should_te&variable.te_shadow))\nactions.long_scov+=/mind_blast,if=talent.expiation&(!variable.should_te||(variable.should_te&variable.te_shadow))\nactions.long_scov+=/mindgames,if=talent.shattered_perceptions&(!variable.should_te||(variable.should_te&variable.te_shadow))\nactions.long_scov+=/shadow_word_death,if=talent.expiation&(!variable.should_te||(variable.should_te&variable.te_shadow))&(target.time_to_pct_20>buff.shadow_covenant.remains)\nactions.long_scov+=/mindgames,if=(!variable.should_te||(variable.should_te&variable.te_shadow))\nactions.long_scov+=/mind_blast,if=(!variable.should_te||(variable.should_te&variable.te_shadow))\nactions.long_scov+=/halo,if=(!variable.should_te||(variable.should_te&variable.te_shadow))\nactions.long_scov+=/divine_star,if=(!variable.should_te||(variable.should_te&variable.te_shadow))\nactions.long_scov+=/shadow_word_death,if=(!variable.should_te||(variable.should_te&variable.te_shadow))&(target.time_to_pct_20>buff.shadow_covenant.remains)\n## actions.long_scov+=/lights_wrath,if=(!variable.should_te||(variable.should_te&variable.te_holy))\nactions.long_scov+=/smite,if=(!variable.should_te||(variable.should_te&variable.te_holy))\n# just in case we run out of shadow spells with the above conditions\nactions.long_scov+=/penance\nactions.long_scov+=/mindgames\nactions.long_scov+=/mind_blast\nactions.long_scov+=/shadow_word_death\nactions.long_scov+=/divine_star\nactions.long_scov+=/halo\nactions.long_scov+=/smite\n\n## Cooldowns\n# Don't use pets during shadow covenant windows, wasting GCDs -- is this even possible anymore?\nactions.cooldowns+=/shadowfiend,if=!buff.shadow_covenant.up\n# hold PI to use with shadow covenant if we have it\nactions.cooldowns+=/power_infusion,if=!talent.shadow_covenant.enabled||(talent.shadow_covenant.enabled&(cooldown.shadowfiend.up||buff.shadow_covenant.up))\n# sync potion with PI\nactions.cooldowns+=/potion,if=buff.power_infusion.up\n# sync trinkets with PI\nactions.cooldowns+=/use_items,if=buff.power_infusion.up||cooldown.power_infusion.remains>=cooldown",
["spec"] = 256,
},
["Shadow"] = {
["source"] = "https://github.com/simulationcraft/simc/blob/thewarwithin/ActionPriorityLists/default/priest_shadow.simc",
["builtIn"] = true,
["date"] = 20250823,
["author"] = "SimC",
["desc"] = "-- The War Within Season 3\n2025-08-23: APL Sync, have fun pressing flash heal\n2025-08-10: Tweak Shadow Crash\n2025-08-08: Fix Void Torrent channels\n2025-08-05: First APL",
["lists"] = {
["aoe_variables"] = {
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "active_enemies >? 12",
["var_name"] = "max_vts",
["default"] = "12",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "0",
["var_name"] = "is_vt_possible",
["default"] = "1",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "1",
["var_name"] = "is_vt_possible",
["criteria"] = "target.time_to_die >= 18",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( active_dot.vampiric_touch + 8 * ( action.shadow_crash.in_flight & action.shadow_crash.enabled ) ) >= variable.max_vts || ! variable.is_vt_possible",
["var_name"] = "dots_up",
["description"] = "TODO: Revamp to fix undesired behavior with unstacked fights",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( variable.max_vts - active_dot.vampiric_touch ) < 4 & raid_event.adds.in > 15 || raid_event.adds.in < 10 & raid_event.adds.count > ( variable.max_vts - active_dot.vampiric_touch )",
["var_name"] = "holding_crash",
["criteria"] = "variable.holding_crash & action.shadow_crash.enabled & raid_event.adds.exists",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( active_dot.vampiric_touch + 8 * ! variable.holding_crash ) >= variable.max_vts || ! variable.is_vt_possible",
["var_name"] = "manual_vts_applied",
},
},
["main"] = {
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "active_dot.vampiric_touch = active_enemies || action.shadow_crash.in_flight",
["var_name"] = "dots_up",
["criteria"] = "active_enemies < 3",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["criteria"] = "boss & fight_remains < 30 || target.time_to_die > 15 & ( ! variable.holding_crash || active_enemies > 2 )",
["list_name"] = "cds",
},
{
["enabled"] = true,
["criteria"] = "( dot.shadow_word_pain.ticking & variable.dots_up || action.shadow_crash.in_flight ) & ( ! cooldown.halo.up || ! talent.power_surge.enabled ) & ( boss & fight_remains < 30 || target.time_to_die > 15 ) & ( ! talent.dark_ascension.enabled || cooldown.dark_ascension.remains < gcd.max || boss & fight_remains < 15 )",
["action"] = "mindbender",
["description"] = "Use Shadowfiend and Mindbender on cooldown as long as Vampiric Touch and Shadow Word: Pain are active and sync with Dark Ascension",
},
{
["enabled"] = true,
["action"] = "shadow_word_death",
["cycle_targets"] = 1,
["description"] = "High Priority Shadow Word: Death when you are forcing the bonus from Devour Matter",
["criteria"] = "priest.force_devour_matter & talent.devour_matter.enabled",
},
{
["enabled"] = true,
["action"] = "void_blast",
["cycle_targets"] = 1,
["description"] = "Blast more burst :wicked:",
["criteria"] = "( dot.devouring_plague.remains >= execute_time || buff.entropic_rift.remains <= gcd.max || action.void_torrent.channeling & talent.void_empowerment.enabled ) & ( insanity.deficit >= 16 || cooldown.mind_blast.full_recharge_time <= gcd.max || buff.entropic_rift.remains <= gcd.max )",
},
{
["enabled"] = true,
["action"] = "devouring_plague",
["cycle_targets"] = 1,
["description"] = "Do not let Voidform Expire if you can avoid it.",
["criteria"] = "buff.voidform.up & talent.perfected_form.enabled & buff.voidform.remains <= gcd.max & talent.void_eruption.enabled",
},
{
["enabled"] = true,
["action"] = "void_bolt",
["cycle_targets"] = 1,
["description"] = "Use Voidbolt on the enemy with the largest time to die. We do no care about dots because Voidbolt is only accessible inside voidform which guarantees maximum effect",
["criteria"] = "insanity.deficit > 16 & cooldown.void_bolt.remains / gcd.max <= 0.1",
},
{
["enabled"] = true,
["action"] = "devouring_plague",
["cycle_targets"] = 1,
["description"] = "Do not overcap on insanity",
["criteria"] = "active_dot.devouring_plague <= 1 & dot.devouring_plague.remains <= gcd.max & ( ! talent.void_eruption.enabled || cooldown.void_eruption.remains >= gcd.max * 3 ) || insanity.deficit <= 35 || buff.mind_devourer.up || buff.entropic_rift.up || buff.power_surge.up & buff.tww3_archon_4pc_helper.stack < 4 & buff.ascension.up",
},
{
["enabled"] = true,
["action"] = "void_torrent",
["cycle_targets"] = 1,
["interrupt_if"] = "talent.entropic_rift.disabled",
["interrupt_immediate"] = "1",
["description"] = "Use Void Torrent if it will get near full Mastery Value",
["criteria"] = "! variable.holding_crash & ( dot.devouring_plague.remains >= 2.5 & ( cooldown.dark_ascension.remains >= 12 || ! talent.dark_ascension.enabled || ! talent.void_blast.enabled ) || cooldown.void_eruption.remains <= 3 & talent.void_eruption.enabled )",
},
{
["enabled"] = true,
["criteria"] = "buff.void_volley.remains <= 5 || buff.entropic_rift.up & action.void_blast.usable_in > buff.entropic_rift.remains || target.time_to_die <= 5",
["action"] = "void_volley",
["description"] = "Use Void Volley if it would expire soon",
},
{
["enabled"] = true,
["action"] = "mind_flay",
["cycle_targets"] = 1,
["description"] = "MFI is a good button",
["criteria"] = "buff.mind_flay_insanity.up",
},
{
["enabled"] = true,
["action"] = "shadow_crash",
["cycle_targets"] = 1,
["description"] = "Use Shadow Crash as long as you are not holding for adds and Vampiric Touch is within pandemic range",
["criteria"] = "! variable.holding_crash & ! action.shadow_crash.in_flight",
},
{
["enabled"] = true,
["action"] = "vampiric_touch",
["cycle_targets"] = 1,
["description"] = "Put out Vampiric Touch on enemies that will live at least 12s and Shadow Crash is not available soon",
["criteria"] = "refreshable & target.time_to_die > 12 & ( dot.vampiric_touch.ticking || ! variable.dots_up ) & ( variable.max_vts > 0 || active_enemies = 1 ) & ( action.shadow_crash.usable_in >= dot.vampiric_touch.remains || variable.holding_crash || ! action.shadow_crash.enabled ) & ( ! action.shadow_crash.in_flight )",
},
{
["enabled"] = true,
["action"] = "mind_blast",
["cycle_targets"] = 1,
["description"] = "Use all charges of Mind Blast if Vampiric Touch and Shadow Word: Pain are active and Mind Devourer is not active or you are prepping Void Eruption",
["criteria"] = "( ! buff.mind_devourer.react || ! talent.mind_devourer.enabled || cooldown.void_eruption.up & talent.void_eruption.enabled )",
},
{
["action"] = "void_volley",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "buff.voidform.up & talent.void_eruption.enabled || buff.power_surge.up || talent.distorted_reality.enabled",
["action"] = "devouring_plague",
},
{
["enabled"] = true,
["criteria"] = "spell_targets > 1",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "! variable.holding_crash & raid_event.adds.in >= 30 & talent.descending_darkness.enabled & raid_event.movement.in >= 30",
["action"] = "shadow_crash",
["description"] = "Healing spell action list for proccing Twist of Fate. Set priest.twist_of_fate_heal_rppm=<rppm> to make this be used. actions.main+=/call_action_list,name=heal_for_tof,if=!buff.twist_of_fate.up&buff.twist_of_fate_can_trigger_on_ally_heal.up&(talent.rhapsody||talent.divine_star||talent.halo)",
},
{
["enabled"] = true,
["criteria"] = "target.health.pct < 20 || talent.deathspeaker.enabled & target.health.pct < 35",
["action"] = "shadow_word_death",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "talent.inescapable_torment.enabled & pet.fiend.active",
["action"] = "shadow_word_death",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["action"] = "mind_flay",
["cycle_targets"] = 1,
["interrupt_if"] = "ticks>=2",
["interrupt_immediate"] = "1",
["chain"] = "1",
["interrupt_global"] = "1",
},
{
["action"] = "divine_star",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "raid_event.adds.in > 20",
["action"] = "shadow_crash",
["description"] = "Use Shadow Crash while moving as a low-priority action when adds will not spawn in 20 seconds.",
},
{
["enabled"] = true,
["action"] = "shadow_word_death",
["cycle_targets"] = 1,
["description"] = "Use Shadow Word: Death while moving as a low-priority action in execute",
["criteria"] = "target.health.pct < 20",
},
{
["enabled"] = true,
["action"] = "shadow_word_death",
["cycle_targets"] = 1,
["description"] = "Use Shadow Word: Death while moving as a low-priority action",
["criteria"] = "dot.devouring_plague.remains",
},
{
["enabled"] = true,
["description"] = "Use Shadow Word: Pain while moving as a low-priority action",
["action"] = "shadow_word_pain",
},
},
["default"] = {
{
["action"] = "silence",
["enabled"] = true,
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "false",
["var_name"] = "holding_crash",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( cooldown.void_eruption.remains <= gcd.max * 3 & talent.void_eruption.enabled || cooldown.dark_ascension.up & talent.dark_ascension.enabled ) || talent.void_torrent.enabled & talent.psychic_link.enabled & cooldown.void_torrent.remains <= 4 & ! variable.holding_crash & ! buff.voidform.up",
["var_name"] = "pool_for_cds",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "active_enemies > 2",
["list_name"] = "aoe",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["list_name"] = "main",
},
},
["precombat"] = {
{
["action"] = "power_word_fortitude",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "! buff.shadowform.up",
["action"] = "shadowform",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( trinket.t1.has_use_buff || trinket.t1.has_use_buff || trinket.t1.has_use_buff || trinket.t1.has_use_buff || trinket.t1.has_use_buff || trinket.t1.is.signet_of_the_priory ) & ( trinket.t1.cooldown.duration >= 20 )",
["var_name"] = "trinket_1_buffs",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( trinket.t2.has_use_buff || trinket.t2.has_use_buff || trinket.t2.has_use_buff || trinket.t2.has_use_buff || trinket.t2.has_use_buff || trinket.t2.is.signet_of_the_priory ) & ( trinket.t2.cooldown.duration >= 20 )",
["var_name"] = "trinket_2_buffs",
},
{
["enabled"] = true,
["op"] = "reset",
["action"] = "variable",
["var_name"] = "dr_force_prio",
["default"] = "1",
},
{
["enabled"] = true,
["op"] = "reset",
["action"] = "variable",
["var_name"] = "me_force_prio",
["default"] = "1",
},
{
["enabled"] = true,
["op"] = "reset",
["action"] = "variable",
["var_name"] = "max_vts",
["default"] = "12",
},
{
["enabled"] = true,
["op"] = "reset",
["action"] = "variable",
["var_name"] = "is_vt_possible",
["default"] = "0",
},
{
["enabled"] = true,
["op"] = "reset",
["action"] = "variable",
["var_name"] = "pooling_mindblasts",
["default"] = "0",
},
{
["action"] = "arcane_torrent",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "active_enemies <= 4 & ( fight_remains >= 120 || active_enemies <= 2 ) & ! talent.power_surge.enabled",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "active_enemies <= 12",
["action"] = "shadow_crash",
["line_cd"] = "5",
},
{
["enabled"] = true,
["criteria"] = "! talent.shadow_crash.enabled || active_enemies > 8",
["action"] = "vampiric_touch",
},
},
["aoe"] = {
{
["enabled"] = true,
["action"] = "call_action_list",
["list_name"] = "aoe_variables",
},
{
["enabled"] = true,
["action"] = "vampiric_touch",
["cycle_targets"] = 1,
["description"] = "High Priority action to put out Vampiric Touch on enemies that will live at least 18 seconds, up to 12 targets manually while prepping AoE",
["criteria"] = "( variable.max_vts > 0 & ! variable.manual_vts_applied & ! action.shadow_crash.in_flight ) & ! buff.entropic_rift.up",
},
{
["enabled"] = true,
["criteria"] = "! variable.holding_crash",
["action"] = "shadow_crash",
["description"] = "Use Shadow Crash to apply Vampiric Touch to as many adds as possible while being efficient with Vampiric Touch refresh windows",
},
},
["trinkets"] = {
{
["enabled"] = true,
["name"] = "hyperthread_wristwraps",
["use_off_gcd"] = 1,
["criteria"] = "talent.void_blast.enabled & hyperthread_wristwraps.void_blast >= 2 & ! cooldown.mind_blast.up || ! talent.void_blast.enabled & ( ( hyperthread_wristwraps.void_bolt >= 1 || ! talent.void_eruption.enabled ) & hyperthread_wristwraps.void_torrent >= 1 )",
["action"] = "hyperthread_wristwraps",
},
{
["enabled"] = true,
["name"] = "aberrant_spellforge",
["use_off_gcd"] = 1,
["criteria"] = "gcd.remains > 0 & buff.aberrant_spellforge.stack <= 4",
["action"] = "aberrant_spellforge",
},
{
["enabled"] = true,
["name"] = "neural_synapse_enhancer",
["use_off_gcd"] = 1,
["criteria"] = "( buff.power_surge.up || buff.entropic_rift.up || variable.trinket_1_buffs || variable.trinket_2_buffs ) & ( buff.voidform.up || cooldown.void_eruption.remains >= 40 || buff.dark_ascension.up )",
["action"] = "neural_synapse_enhancer",
},
{
["enabled"] = true,
["name"] = "flarendos_pilot_light",
["use_off_gcd"] = 1,
["criteria"] = "gcd.remains > 0 & ( buff.voidform.up || buff.power_infusion.remains >= 10 || buff.dark_ascension.up ) || boss & fight_remains < 20",
["action"] = "flarendos_pilot_light",
},
{
["enabled"] = true,
["name"] = "geargrinders_spare_keys",
["use_off_gcd"] = 1,
["criteria"] = "gcd.remains > 0",
["action"] = "geargrinders_spare_keys",
},
{
["enabled"] = true,
["name"] = "spymasters_web",
["action"] = "spymasters_web",
["criteria"] = "( buff.power_infusion.remains >= 10 & buff.spymasters_report.stack >= 36 & fight_remains > 240 ) & ( buff.voidform.up || buff.dark_ascension.up || ! talent.dark_ascension.enabled & ! talent.void_eruption.enabled ) || ( ( buff.power_infusion.remains >= 10 & buff.bloodlust.up & buff.spymasters_report.stack >= 10 ) || buff.power_infusion.remains >= 10 & ( boss & fight_remains < 120 ) ) & ( buff.voidform.up || buff.dark_ascension.up || ! talent.dark_ascension.enabled & ! talent.void_eruption.enabled ) || ( boss & fight_remains <= 20 || buff.dark_ascension.up & boss & fight_remains <= 60 || buff.entropic_rift.up & talent.entropic_rift.enabled & boss & fight_remains <= 30 ) & ! buff.spymasters_web.up",
},
{
["enabled"] = true,
["name"] = "prized_gladiators_badge_of_ferocity",
["action"] = "prized_gladiators_badge_of_ferocity",
["criteria"] = "( buff.voidform.up || buff.power_infusion.remains >= 10 || buff.dark_ascension.up || ( talent.void_eruption.enabled & cooldown.void_eruption.remains > 10 ) || equipped.neural_synapse_enhancer & buff.entropic_rift.up ) || boss & fight_remains < 20",
},
{
["enabled"] = true,
["criteria"] = "( buff.voidform.up || buff.power_infusion.remains >= 10 || buff.dark_ascension.up || equipped.neural_synapse_enhancer & buff.entropic_rift.up ) || boss & fight_remains < 20",
["action"] = "use_items",
},
},
["cds"] = {
{
["enabled"] = true,
["criteria"] = "( buff.voidform.up & buff.power_infusion.up || buff.dark_ascension.up ) & ( fight_remains >= 320 || buff.bloodlust.up ) || boss & fight_remains <= 30",
["action"] = "potion",
},
{
["enabled"] = true,
["criteria"] = "buff.power_infusion.up & ( buff.voidform.up || buff.dark_ascension.up ) || boss & fight_remains <= 8",
["action"] = "fireblood",
},
{
["enabled"] = true,
["criteria"] = "buff.power_infusion.up & ( buff.voidform.up || buff.dark_ascension.up ) || boss & fight_remains <= 12",
["action"] = "berserking",
},
{
["enabled"] = true,
["criteria"] = "buff.power_infusion.up & ( buff.voidform.up || buff.dark_ascension.up ) || boss & fight_remains <= 15",
["action"] = "blood_fury",
},
{
["enabled"] = true,
["criteria"] = "buff.power_infusion.up & ( buff.voidform.up || buff.dark_ascension.up ) || boss & fight_remains <= 15",
["action"] = "ancestral_call",
},
{
["enabled"] = true,
["criteria"] = "equipped.nexuskings_command & buff.oathbound.up & ( ! buff.boon_of_the_oathsworn.up || buff.boon_of_the_oathsworn.remains < 3 ) & ( ( talent.void_eruption.enabled & ( buff.voidform.up || cooldown.void_eruption.up ) ) || ( talent.dark_ascension.enabled & cooldown.dark_ascension.up ) || ( talent.power_surge.enabled & cooldown.halo.up ) || ( talent.entropic_rift.enabled & cooldown.void_torrent.up ) )",
["action"] = "flash_heal",
["description"] = "Use <a href='https://www.wowhead.com/spell=10060/power-infusion'>Power Infusion</a> while <a href='https://www.wowhead.com/spell=194249/voidform'>Voidform</a> or <a href='https://www.wowhead.com/spell=391109/dark-ascension'>Dark Ascension</a> is active. Chain directly after your own <a href='https://www.wowhead.com/spell=10060/power-infusion'>Power Infusion</a>. Use Flash Heal to proc Nexus-King's Command trinket",
},
{
["enabled"] = true,
["criteria"] = "( buff.voidform.up || buff.dark_ascension.up & ( fight_remains <= 80 || fight_remains >= 140 ) ) & ( ! buff.power_infusion.up || set_bonus.tww2_4pc & buff.power_infusion.remains <= 15 )",
["action"] = "power_infusion",
["description"] = "Sync Power Infusion with Voidform or Dark Ascension",
},
{
["enabled"] = true,
["criteria"] = "talent.power_surge.enabled & ( pet.fiend.active & cooldown.fiend.remains >= 4 & talent.mindbender.enabled || ! talent.mindbender.enabled & ! cooldown.fiend.up || active_enemies > 2 & ! talent.inescapable_torment.enabled || ! talent.dark_ascension.enabled ) & ( cooldown.mind_blast.charges = 0 || ! cooldown.void_torrent.up || ! talent.void_eruption.enabled || cooldown.void_eruption.remains >= gcd.max * 4 || buff.mind_devourer.up & talent.mind_devourer.enabled )",
["action"] = "halo",
["description"] = "Make sure Mindbender is active before popping Dark Ascension unless you have insignificant talent points or too many targets",
},
{
["enabled"] = true,
["criteria"] = "( pet.fiend.active & cooldown.fiend.remains >= 4 || ! talent.mindbender.enabled & ! cooldown.fiend.up || active_enemies > 2 & ! talent.inescapable_torment.enabled ) & ( cooldown.mind_blast.charges = 0 || time > 15 || buff.mind_devourer.up & talent.mind_devourer.enabled || buff.power_surge.up )",
["action"] = "void_eruption",
["description"] = "Make sure Mindbender is active before popping Void Eruption and dump charges of Mind Blast if Mind Devourer is not active and you are not Archon",
},
{
["enabled"] = true,
["criteria"] = "( pet.fiend.active & cooldown.fiend.remains >= 4 || ! talent.mindbender.enabled & ! cooldown.fiend.up || active_enemies > 2 & ! talent.inescapable_torment.enabled ) & ( active_dot.devouring_plague >= 1 || insanity >= ( 20 - ( 5 * talent.minds_eye.enabled ) + ( 5 * talent.distorted_reality.enabled ) - ( pet.fiend.active * 2 ) ) )",
["action"] = "dark_ascension",
["description"] = "Use Dark Ascension when you have enough Insanity to cast Devouring Plague.",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["list_name"] = "trinkets",
},
{
["enabled"] = true,
["criteria"] = "health.pct <= 75",
["action"] = "desperate_prayer",
["description"] = "Use Desperate Prayer to heal up should Shadow Word: Death or other damage bring you below 75%",
},
},
["heal_for_tof"] = {
{
["enabled"] = true,
["description"] = "Use Halo to acquire Twist of Fate if an ally can be healed for it and it is not currently up.",
["action"] = "halo",
},
{
["enabled"] = true,
["description"] = "Use Divine Star to acquire Twist of Fate if an ally can be healed for it and it is not currently up.",
["action"] = "divine_star",
},
{
["enabled"] = true,
["criteria"] = "buff.rhapsody.stack = 20 & talent.rhapsody.enabled",
["action"] = "holy_nova",
["description"] = "Use Holy Nova when Rhapsody is fully stacked to acquire Twist of Fate if an ally can be healed for it and it is not currently up.",
},
},
},
["version"] = 20250823,
["warnings"] = "The import for 'trinkets' required some automated changes.\nLine 1: Converted 'hyperthread_wristwraps.void_blast.count' to 'hyperthread_wristwraps.void_blast' (1x).\nLine 1: Converted 'hyperthread_wristwraps.void_bolt.count' to 'hyperthread_wristwraps.void_bolt' (1x).\nLine 1: Converted 'hyperthread_wristwraps.void_torrent.count' to 'hyperthread_wristwraps.void_torrent' (1x).\n\nThe import for 'main' required some automated changes.\nLine 7: Converted operations in 'insanity.deficit>16&cooldown.void_bolt.remains%gcd.max<=0.1' to 'insanity.deficit>16&cooldown.void_bolt.remains/gcd.max<=0.1'.\nThe following auras were used in the action list but were not found in the addon database:\n - twist_of_fate_can_trigger_on_ally_heal\n\nThe import for 'precombat' required some automated changes.\nLine 3: Converted 'trinket.1.has_buff.intellect' to 'trinket.t1.has_buff.intellect' (1x).\nLine 3: Converted 'trinket.1.has_buff.intellect' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.has_buff.mastery' to 'trinket.t1.has_buff.mastery' (1x).\nLine 3: Converted 'trinket.1.has_buff.mastery' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.has_buff.versatility' to 'trinket.t1.has_buff.versatility' (1x).\nLine 3: Converted 'trinket.1.has_buff.versatility' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.has_buff.haste' to 'trinket.t1.has_buff.haste' (1x).\nLine 3: Converted 'trinket.1.has_buff.haste' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.has_buff.crit' to 'trinket.t1.has_buff.crit' (1x).\nLine 3: Converted 'trinket.1.has_buff.crit' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.is.signet_of_the_priory' to 'trinket.t1.is.signet_of_the_priory' (1x).\nLine 3: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration' (1x).\nLine 3: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration'.\nLine 4: Converted 'trinket.2.has_buff.intellect' to 'trinket.t2.has_buff.intellect' (1x).\nLine 4: Converted 'trinket.2.has_buff.intellect' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_buff.mastery' to 'trinket.t2.has_buff.mastery' (1x).\nLine 4: Converted 'trinket.2.has_buff.mastery' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_buff.versatility' to 'trinket.t2.has_buff.versatility' (1x).\nLine 4: Converted 'trinket.2.has_buff.versatility' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_buff.haste' to 'trinket.t2.has_buff.haste' (1x).\nLine 4: Converted 'trinket.2.has_buff.haste' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_buff.crit' to 'trinket.t2.has_buff.crit' (1x).\nLine 4: Converted 'trinket.2.has_buff.crit' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.is.signet_of_the_priory' to 'trinket.t2.is.signet_of_the_priory' (1x).\nLine 4: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration' (1x).\nLine 4: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration'.\nThe following auras were used in the action list but were not found in the addon database:\n - crit\n\nImported 8 action lists.\n",
["spec"] = 258,
["profile"] = "## https://github.com/simulationcraft/simc/blob/thewarwithin/ActionPriorityLists/default/priest_shadow.simc\n## SimulationCraft Commit Sync: bd9a80c\n## Date: 2025-08-10\n\nactions.precombat+=/power_word_fortitude\nactions.precombat+=/shadowform,if=!buff.shadowform.up\nactions.precombat+=/variable,name=trinket_1_buffs,value=(trinket.1.has_buff.intellect||trinket.1.has_buff.mastery||trinket.1.has_buff.versatility||trinket.1.has_buff.haste||trinket.1.has_buff.crit||trinket.1.is.signet_of_the_priory)&(trinket.1.cooldown.duration>=20)\nactions.precombat+=/variable,name=trinket_2_buffs,value=(trinket.2.has_buff.intellect||trinket.2.has_buff.mastery||trinket.2.has_buff.versatility||trinket.2.has_buff.haste||trinket.2.has_buff.crit||trinket.2.is.signet_of_the_priory)&(trinket.2.cooldown.duration>=20)\nactions.precombat+=/variable,name=dr_force_prio,default=1,op=reset\nactions.precombat+=/variable,name=me_force_prio,default=1,op=reset\nactions.precombat+=/variable,name=max_vts,default=12,op=reset\nactions.precombat+=/variable,name=is_vt_possible,default=0,op=reset\nactions.precombat+=/variable,name=pooling_mindblasts,default=0,op=reset\n## actions.precombat+=/use_item,name=ingenious_mana_battery\nactions.precombat+=/arcane_torrent\n## actions.precombat+=/use_item,name=aberrant_spellforge\nactions.precombat+=/halo,if=active_enemies<=4&(fight_remains>=120||active_enemies<=2)&!talent.power_surge\n## [Syrif] - Even with startsCombat = true, this spell doesnt like to start combat. time_since prevents double-cast\nactions.precombat+=/shadow_crash,line_cd=5,if=active_enemies<=12\nactions.precombat+=/vampiric_touch,if=!talent.shadow_crash.enabled||active_enemies>8\n\nactions+=/silence\nactions+=/variable,name=holding_crash,op=set,value=false\nactions+=/variable,name=pool_for_cds,op=set,value=(cooldown.void_eruption.remains<=gcd.max*3&talent.void_eruption||cooldown.dark_ascension.up&talent.dark_ascension)||talent.void_torrent&talent.psychic_link&cooldown.void_torrent.remains<=4&!variable.holding_crash&!buff.voidform.up\nactions+=/call_action_list,name=aoe,strict=1,if=active_enemies>2\nactions+=/run_action_list,name=main\n\nactions.aoe+=/call_action_list,name=aoe_variables\n# High Priority action to put out Vampiric Touch on enemies that will live at least 18 seconds, up to 12 targets manually while prepping AoE\nactions.aoe+=/vampiric_touch,cycle_targets=1,if=(variable.max_vts>0&!variable.manual_vts_applied&!action.shadow_crash.in_flight)&!buff.entropic_rift.up\n# Use Shadow Crash to apply Vampiric Touch to as many adds as possible while being efficient with Vampiric Touch refresh windows\nactions.aoe+=/shadow_crash,if=!variable.holding_crash\n\nactions.aoe_variables+=/variable,name=max_vts,op=set,default=12,value=active_enemies>?12\nactions.aoe_variables+=/variable,name=is_vt_possible,op=set,value=0,default=1\nactions.aoe_variables+=/variable,name=is_vt_possible,op=set,value=1,if=target.time_to_die>=18\n# TODO: Revamp to fix undesired behavior with unstacked fights\nactions.aoe_variables+=/variable,name=dots_up,op=set,value=(active_dot.vampiric_touch+8*(action.shadow_crash.in_flight&action.shadow_crash.enabled))>=variable.max_vts||!variable.is_vt_possible\nactions.aoe_variables+=/variable,name=holding_crash,op=set,value=(variable.max_vts-active_dot.vampiric_touch)<4&raid_event.adds.in>15||raid_event.adds.in<10&raid_event.adds.count>(variable.max_vts-active_dot.vampiric_touch),if=variable.holding_crash&action.shadow_crash.enabled&raid_event.adds.exists\nactions.aoe_variables+=/variable,name=manual_vts_applied,op=set,value=(active_dot.vampiric_touch+8*!variable.holding_crash)>=variable.max_vts||!variable.is_vt_possible\n\n## TODO: Add holding condition for weird fight times to potion with execute\nactions.cds+=/potion,if=(buff.voidform.up&buff.power_infusion.up||buff.dark_ascension.up)&(fight_remains>=320||buff.bloodlust.up)||boss&fight_remains<=30\nactions.cds+=/fireblood,if=buff.power_infusion.up&(buff.voidform.up||buff.dark_ascension.up)||boss&fight_remains<=8\nactions.cds+=/berserking,if=buff.power_infusion.up&(buff.voidform.up||buff.dark_ascension.up)||boss&fight_remains<=12\nactions.cds+=/blood_fury,if=buff.power_infusion.up&(buff.voidform.up||buff.dark_ascension.up)||boss&fight_remains<=15\nactions.cds+=/ancestral_call,if=buff.power_infusion.up&(buff.voidform.up||buff.dark_ascension.up)||boss&fight_remains<=15\n# Use <a href='https://www.wowhead.com/spell=10060/power-infusion'>Power Infusion</a> while <a href='https://www.wowhead.com/spell=194249/voidform'>Voidform</a> or <a href='https://www.wowhead.com/spell=391109/dark-ascension'>Dark Ascension</a> is active. Chain directly after your own <a href='https://www.wowhead.com/spell=10060/power-infusion'>Power Infusion</a>.\n## [Hekili] Nobody gonna do this.\n## actions.cds+=/cancel_buff,name=power_infusion,if=cooldown.power_infusion.up&cooldown.power_infusion.duration>0&set_bonus.tww2_4pc&buff.power_infusion.remains<=2\n## ## actions.cds+=/invoke_external_buff,name=power_infusion,if=(buff.voidform.up||buff.dark_ascension.up||set_bonus.tww2_4pc)&!buff.power_infusion.up\n## actions.cds+=/invoke_external_buff,name=bloodlust,if=buff.power_infusion.up&boss&fight_remains<120||boss&fight_remains<=40\n# Use Flash Heal to proc Nexus-King's Command trinket\nactions.cds+=/flash_heal,if=equipped.nexuskings_command&buff.oathbound.up&(!buff.boon_of_the_oathsworn.up||buff.boon_of_the_oathsworn.remains<3)&((talent.void_eruption&(buff.voidform.up||cooldown.void_eruption.up))||(talent.dark_ascension&cooldown.dark_ascension.up)||(talent.power_surge&cooldown.halo.up)||(talent.entropic_rift&cooldown.void_torrent.up))\n# Sync Power Infusion with Voidform or Dark Ascension\nactions.cds+=/power_infusion,if=(buff.voidform.up||buff.dark_ascension.up&(fight_remains<=80||fight_remains>=140))&(!buff.power_infusion.up||set_bonus.tww2_4pc&buff.power_infusion.remains<=15)\n# Make sure Mindbender is active before popping Dark Ascension unless you have insignificant talent points or too many targets\nactions.cds+=/halo,if=talent.power_surge&(pet.fiend.active&cooldown.fiend.remains>=4&talent.mindbender||!talent.mindbender&!cooldown.fiend.up||active_enemies>2&!talent.inescapable_torment||!talent.dark_ascension)&(cooldown.mind_blast.charges=0||!cooldown.void_torrent.up||!talent.void_eruption||cooldown.void_eruption.remains>=gcd.max*4||buff.mind_devourer.up&talent.mind_devourer)\n# Make sure Mindbender is active before popping Void Eruption and dump charges of Mind Blast if Mind Devourer is not active and you are not Archon\nactions.cds+=/void_eruption,if=(pet.fiend.active&cooldown.fiend.remains>=4||!talent.mindbender&!cooldown.fiend.up||active_enemies>2&!talent.inescapable_torment)&(cooldown.mind_blast.charges=0||time>15||buff.mind_devourer.up&talent.mind_devourer||buff.power_surge.up)\n# Use Dark Ascension when you have enough Insanity to cast Devouring Plague.\nactions.cds+=/dark_ascension,if=(pet.fiend.active&cooldown.fiend.remains>=4||!talent.mindbender&!cooldown.fiend.up||active_enemies>2&!talent.inescapable_torment)&(active_dot.devouring_plague>=1||insanity>=(20-(5*talent.minds_eye)+(5*talent.distorted_reality)-(pet.fiend.active*2)))\nactions.cds+=/call_action_list,name=trinkets\n# Use Desperate Prayer to heal up should Shadow Word: Death or other damage bring you below 75%\nactions.cds+=/desperate_prayer,if=health.pct<=75\n\n# Use Halo to acquire Twist of Fate if an ally can be healed for it and it is not currently up.\nactions.heal_for_tof+=/halo\n# Use Divine Star to acquire Twist of Fate if an ally can be healed for it and it is not currently up.\nactions.heal_for_tof+=/divine_star\n# Use Holy Nova when Rhapsody is fully stacked to acquire Twist of Fate if an ally can be healed for it and it is not currently up.\nactions.heal_for_tof+=/holy_nova,if=buff.rhapsody.stack=20&talent.rhapsody\n\nactions.main+=/variable,name=dots_up,op=set,value=active_dot.vampiric_touch=active_enemies||action.shadow_crash.in_flight,if=active_enemies<3\nactions.main+=/call_action_list,name=cds,if=boss&fight_remains<30||target.time_to_die>15&(!variable.holding_crash||active_enemies>2)\n# Use Shadowfiend and Mindbender on cooldown as long as Vampiric Touch and Shadow Word: Pain are active and sync with Dark Ascension\nactions.main+=/mindbender,if=(dot.shadow_word_pain.ticking&variable.dots_up||action.shadow_crash.in_flight)&(!cooldown.halo.up||!talent.power_surge.enabled)&(boss&fight_remains<30||target.time_to_die>15)&(!talent.dark_ascension||cooldown.dark_ascension.remains<gcd.max||boss&fight_remains<15)\n# High Priority Shadow Word: Death when you are forcing the bonus from Devour Matter\nactions.main+=/shadow_word_death,cycle_targets=1,if=priest.force_devour_matter&talent.devour_matter\n# Blast more burst :wicked:\nactions.main+=/void_blast,cycle_targets=1,if=(dot.devouring_plague.remains>=execute_time||buff.entropic_rift.remains<=gcd.max||action.void_torrent.channeling&talent.void_empowerment)&(insanity.deficit>=16||cooldown.mind_blast.full_recharge_time<=gcd.max||buff.entropic_rift.remains<=gcd.max)\n# Do not let Voidform Expire if you can avoid it.\nactions.main+=/devouring_plague,cycle_targets=1,if=buff.voidform.up&talent.perfected_form&buff.voidform.remains<=gcd.max&talent.void_eruption\n# Use Voidbolt on the enemy with the largest time to die. We do no care about dots because Voidbolt is only accessible inside voidform which guarantees maximum effect\nactions.main+=/void_bolt,cycle_targets=1,if=insanity.deficit>16&cooldown.void_bolt.remains%gcd.max<=0.1\n# Do not overcap on insanity\nactions.main+=/devouring_plague,cycle_targets=1,if=active_dot.devouring_plague<=1&dot.devouring_plague.remains<=gcd.max&(!talent.void_eruption||cooldown.void_eruption.remains>=gcd.max*3)||insanity.deficit<=35||buff.mind_devourer.up||buff.entropic_rift.up||buff.power_surge.up&buff.tww3_archon_4pc_helper.stack<4&buff.ascension.up\n# Use Void Torrent if it will get near full Mastery Value\nactions.main+=/void_torrent,cycle_targets=1,if=!variable.holding_crash&(dot.devouring_plague.remains>=2.5&(cooldown.dark_ascension.remains>=12||!talent.dark_ascension||!talent.void_blast)||cooldown.void_eruption.remains<=3&talent.void_eruption),interrupt_if=talent.entropic_rift.disabled,interrupt_immediate=1\n# Use Void Volley if it would expire soon\nactions.main+=/void_volley,if=buff.void_volley.remains<=5||buff.entropic_rift.up&action.void_blast.usable_in>buff.entropic_rift.remains||target.time_to_die<=5\n# MFI is a good button\nactions.main+=/mind_flay,cycle_targets=1,if=buff.mind_flay_insanity.up\n# Use Shadow Crash as long as you are not holding for adds and Vampiric Touch is within pandemic range\nactions.main+=/shadow_crash,cycle_targets=1,if=!variable.holding_crash&!action.shadow_crash.in_flight\n# Put out Vampiric Touch on enemies that will live at least 12s and Shadow Crash is not available soon\nactions.main+=/vampiric_touch,cycle_targets=1,if=refreshable&target.time_to_die>12&(dot.vampiric_touch.ticking||!variable.dots_up)&(variable.max_vts>0||active_enemies=1)&(action.shadow_crash.usable_in>=dot.vampiric_touch.remains||variable.holding_crash||!action.shadow_crash.enabled)&(!action.shadow_crash.in_flight)\n# Use all charges of Mind Blast if Vampiric Touch and Shadow Word: Pain are active and Mind Devourer is not active or you are prepping Void Eruption\nactions.main+=/mind_blast,cycle_targets=1,if=(!buff.mind_devourer.react||!talent.mind_devourer||cooldown.void_eruption.up&talent.void_eruption)\nactions.main+=/void_volley\nactions.main+=/devouring_plague,if=buff.voidform.up&talent.void_eruption||buff.power_surge.up||talent.distorted_reality\nactions.main+=/halo,if=spell_targets>1\n# Healing spell action list for proccing Twist of Fate. Set priest.twist_of_fate_heal_rppm=<rppm> to make this be used.\n# actions.main+=/call_action_list,name=heal_for_tof,if=!buff.twist_of_fate.up&buff.twist_of_fate_can_trigger_on_ally_heal.up&(talent.rhapsody||talent.divine_star||talent.halo)\nactions.main+=/shadow_crash,if=!variable.holding_crash&raid_event.adds.in>=30&talent.descending_darkness&raid_event.movement.in>=30\nactions.main+=/shadow_word_death,cycle_targets=1,if=target.health.pct<20||talent.deathspeaker&target.health.pct<35\nactions.main+=/shadow_word_death,cycle_targets=1,if=talent.inescapable_torment&pet.fiend.active\nactions.main+=/mind_flay,cycle_targets=1,chain=1,interrupt_immediate=1,interrupt_if=ticks>=2,interrupt_global=1\nactions.main+=/divine_star\n# Use Shadow Crash while moving as a low-priority action when adds will not spawn in 20 seconds.\nactions.main+=/shadow_crash,if=raid_event.adds.in>20\n# Use Shadow Word: Death while moving as a low-priority action in execute\nactions.main+=/shadow_word_death,cycle_targets=1,if=target.health.pct<20\n# Use Shadow Word: Death while moving as a low-priority action\nactions.main+=/shadow_word_death,cycle_targets=1,if=dot.devouring_plague.remains\n# Use Shadow Word: Pain while moving as a low-priority action\nactions.main+=/shadow_word_pain\n\nactions.trinkets+=/use_item,use_off_gcd=1,name=hyperthread_wristwraps,if=talent.void_blast&hyperthread_wristwraps.void_blast.count>=2&!cooldown.mind_blast.up||!talent.void_blast&((hyperthread_wristwraps.void_bolt.count>=1||!talent.void_eruption)&hyperthread_wristwraps.void_torrent.count>=1)\nactions.trinkets+=/use_item,use_off_gcd=1,name=aberrant_spellforge,if=gcd.remains>0&buff.aberrant_spellforge.stack<=4\nactions.trinkets+=/use_item,use_off_gcd=1,name=neural_synapse_enhancer,if=(buff.power_surge.up||buff.entropic_rift.up||variable.trinket_1_buffs||variable.trinket_2_buffs)&(buff.voidform.up||cooldown.void_eruption.remains>=40||buff.dark_ascension.up)\nactions.trinkets+=/use_item,use_off_gcd=1,name=flarendos_pilot_light,if=gcd.remains>0&(buff.voidform.up||buff.power_infusion.remains>=10||buff.dark_ascension.up)||boss&fight_remains<20\nactions.trinkets+=/use_item,use_off_gcd=1,name=geargrinders_spare_keys,if=gcd.remains>0\nactions.trinkets+=/use_item,name=spymasters_web,if=(buff.power_infusion.remains>=10&buff.spymasters_report.stack>=36&fight_remains>240)&(buff.voidform.up||buff.dark_ascension.up||!talent.dark_ascension&!talent.void_eruption)||((buff.power_infusion.remains>=10&buff.bloodlust.up&buff.spymasters_report.stack>=10)||buff.power_infusion.remains>=10&(boss&fight_remains<120))&(buff.voidform.up||buff.dark_ascension.up||!talent.dark_ascension&!talent.void_eruption)||(boss&fight_remains<=20||buff.dark_ascension.up&boss&fight_remains<=60||buff.entropic_rift.up&talent.entropic_rift&boss&fight_remains<=30)&!buff.spymasters_web.up\nactions.trinkets+=/use_item,name=prized_gladiators_badge_of_ferocity,if=(buff.voidform.up||buff.power_infusion.remains>=10||buff.dark_ascension.up||(talent.void_eruption&cooldown.void_eruption.remains>10)||equipped.neural_synapse_enhancer&buff.entropic_rift.up)||boss&fight_remains<20\nactions.trinkets+=/use_items,if=(buff.voidform.up||buff.power_infusion.remains>=10||buff.dark_ascension.up||equipped.neural_synapse_enhancer&buff.entropic_rift.up)||boss&fight_remains<20",
},
["Unholy"] = {
["source"] = "https://github.com/simulationcraft/simc/blob/thewarwithin/ActionPriorityLists/default/deathknight_unholy.simc",
["builtIn"] = true,
["date"] = 20250826,
["spec"] = 252,
["desc"] = "The War Within Season 3\n2025-08-26: APL Sync - 05c05de\n2025-08-16: Remove external PI call\n2025-08-14: APL Sync c50e3bc + 1febfbb\n2025-08-06: Initial APL",
["lists"] = {
["aoe_setup"] = {
{
["enabled"] = true,
["criteria"] = "buff.festering_scythe.up",
["action"] = "festering_strike",
},
{
["enabled"] = true,
["criteria"] = "! death_and_decay.ticking & ( full_recharge_time < 2 * gcd.max || death_knight.fwounded_targets >= cycle_enemies & ( rune > 3 || runic_power < 30 ) || talent.desecrate.enabled & ( talent.festering_scythe.enabled & death_knight.fwounded_targets = 0 & buff.festering_scythe_stacks.stack < 10 & ! buff.festering_scythe.up || ! talent.festering_scythe.enabled ) )",
["action"] = "any_dnd",
},
{
["enabled"] = true,
["criteria"] = "death_knight.fwounded_targets = 0 & cooldown.apocalypse.remains < gcd.max & ( cooldown.dark_transformation.remains & cooldown.unholy_assault.remains || cooldown.unholy_assault.remains || ! talent.unholy_assault.enabled )",
["action"] = "festering_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "debuff.chains_of_ice_trollbane_slow.up",
["action"] = "wound_spender",
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & active_enemies < variable.epidemic_targets & rune < 4",
["action"] = "death_coil",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & variable.epidemic_targets <= active_enemies & rune < 4",
["action"] = "epidemic",
},
{
["enabled"] = true,
["criteria"] = "! buff.death_and_decay.up & ( ! talent.bursting_sores.enabled || death_knight.fwounded_targets = active_enemies || death_knight.fwounded_targets >= 8 || raid_event.adds.exists & raid_event.adds.remains <= 11 & raid_event.adds.remains > 5 || ! buff.death_and_decay.up & talent.defile.enabled )",
["action"] = "any_dnd",
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & active_enemies < variable.epidemic_targets & ( buff.sudden_doom.up || death_knight.fwounded_targets = active_enemies || death_knight.fwounded_targets >= 8 )",
["action"] = "death_coil",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & variable.epidemic_targets <= active_enemies & ( buff.sudden_doom.up || death_knight.fwounded_targets = active_enemies || death_knight.fwounded_targets >= 8 )",
["action"] = "epidemic",
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & active_enemies < variable.epidemic_targets",
["action"] = "death_coil",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power",
["action"] = "epidemic",
},
{
["enabled"] = true,
["criteria"] = "death_knight.fwounded_targets < 8 & ! death_knight.fwounded_targets = active_enemies",
["action"] = "festering_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "buff.vampiric_strike.up",
["action"] = "wound_spender",
["cycle_targets"] = 1,
},
},
["cds_aoe"] = {
{
["enabled"] = true,
["action"] = "unholy_assault",
["cycle_targets"] = 1,
["description"] = "Non-Sanlayn CDs AoE",
["criteria"] = "variable.adds_remain",
},
{
["enabled"] = true,
["criteria"] = "variable.adds_remain & ( death_and_decay.ticking || cooldown.death_and_decay.remains < 3 )",
["action"] = "dark_transformation",
},
{
["enabled"] = true,
["criteria"] = "variable.adds_remain & ( death_and_decay.ticking || cooldown.death_and_decay.remains < 3 || rune < 3 || set_bonus.tww3_rider_of_the_apocalypse_2pc )",
["action"] = "apocalypse",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "dot.virulent_plague.ticks_remain < 5 & dot.virulent_plague.refreshable & ( ! talent.unholy_blight.enabled || talent.unholy_blight.enabled & dark_transformation_cooldown ) & ( ! talent.raise_abomination.enabled || talent.raise_abomination.enabled & cooldown.raise_abomination.remains )",
["action"] = "outbreak",
},
},
["cleave"] = {
{
["enabled"] = true,
["action"] = "any_dnd",
["description"] = "Cleave",
["criteria"] = "! death_and_decay.ticking & variable.adds_remain || talent.gift_of_the_sanlayn.enabled",
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & talent.improved_death_coil.enabled",
["action"] = "death_coil",
},
{
["enabled"] = true,
["criteria"] = "buff.vampiric_strike.up",
["action"] = "wound_spender",
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & ! talent.improved_death_coil.enabled",
["action"] = "death_coil",
},
{
["enabled"] = true,
["criteria"] = "buff.vampiric_strike.down & ! variable.pop_wounds & debuff.festering_wound.stack < 4 || buff.festering_scythe.up",
["action"] = "festering_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "buff.vampiric_strike.down & cooldown.apocalypse.remains < variable.apoc_timing & debuff.festering_wound.stack < 4",
["action"] = "festering_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "variable.pop_wounds",
["action"] = "wound_spender",
},
},
["cds_shared"] = {
{
["enabled"] = true,
["action"] = "potion",
["description"] = "Shared CDs",
["criteria"] = "( variable.st_planning || variable.adds_remain ) & ( ! talent.summon_gargoyle.enabled || cooldown.summon_gargoyle.remains > 60 ) & ( buff.dark_transformation.up & 30 >= buff.dark_transformation.remains || ! talent.vampiric_strike.enabled & pet.army_ghoul.active & pet.army_ghoul.remains <= 30 || ! talent.vampiric_strike.enabled & pet.apoc_ghoul.active & pet.apoc_ghoul.remains <= 30 || ! talent.vampiric_strike.enabled & pet.abomination.active & pet.abomination.remains <= 30 ) || fight_remains <= 30",
},
{
["enabled"] = true,
["criteria"] = "( variable.st_planning || variable.adds_remain ) & ( talent.commander_of_the_dead.enabled & cooldown.dark_transformation.remains < 5 || ! talent.commander_of_the_dead.enabled & active_enemies >= 1 ) || fight_remains < 35",
["action"] = "army_of_the_dead",
},
{
["enabled"] = true,
["criteria"] = "( variable.st_planning || variable.adds_remain ) & ( ! talent.vampiric_strike.enabled || ( pet.apoc_ghoul.active || ! talent.apocalypse.enabled ) ) || fight_remains < 30",
["action"] = "raise_abomination",
},
{
["enabled"] = true,
["criteria"] = "( variable.st_planning || variable.adds_remain ) & ( death_knight.fwounded_targets < active_enemies || ( cooldown.apocalypse.remains < 3 || cooldown.dark_transformation.remains < 3 ) )",
["action"] = "legion_of_souls",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "summon_gargoyle",
["criteria"] = "( variable.st_planning || variable.adds_remain ) & ( buff.commander_of_the_dead.up || ! talent.commander_of_the_dead.enabled & active_enemies >= 1 ) || fight_remains < 25",
},
{
["enabled"] = true,
["criteria"] = "death_knight.ams_absorb_percent > 0 & runic_power < 30 & rune < 2",
["action"] = "antimagic_shell",
},
{
["enabled"] = true,
["criteria"] = "active_enemies >= 2 & ( ( ! raid_event.adds.exists & fight_remains < 6 || raid_event.adds.exists & raid_event.adds.remains < 6 ) || ( ! talent.festering_scythe.enabled || buff.festering_scythe_stacks.stack < active_enemies & ! buff.festering_scythe.up ) & ( active_enemies > 1 & death_knight.fwounded_targets < active_enemies || death_knight.fwounded_targets = active_enemies || death_knight.fwounded_targets = 0 & talent.festering_scythe.enabled & ! buff.festering_scythe.up & buff.festering_scythe_stacks.stack < 10 ) )",
["action"] = "desecrate",
},
},
["cds_cleave_san"] = {
{
["enabled"] = true,
["description"] = "Sanlayn CDs Cleave",
["action"] = "dark_transformation",
},
{
["enabled"] = true,
["action"] = "apocalypse",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "buff.dark_transformation.up & buff.dark_transformation.remains < 12 || boss & fight_remains < 20 || raid_event.adds.exists & raid_event.adds.remains < 20",
["action"] = "unholy_assault",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "( dot.virulent_plague.refreshable || talent.morbidity.enabled & buff.infliction_of_sorrow.up & talent.superstrain.enabled & dot.frost_fever.refreshable & dot.blood_plague.refreshable ) & ( ! talent.unholy_blight.enabled || talent.unholy_blight.enabled & cooldown.dark_transformation.remains > 6 ) & ( ! talent.raise_abomination.enabled || talent.raise_abomination.enabled & cooldown.raise_abomination.remains > 6 ) || buff.visceral_strength_unholy.up",
["action"] = "outbreak",
["cycle_targets"] = 1,
},
},
["aoe"] = {
{
["enabled"] = true,
["criteria"] = "buff.festering_scythe.up",
["action"] = "festering_strike",
},
{
["enabled"] = true,
["criteria"] = "rune < 4 & active_enemies < variable.epidemic_targets & buff.gift_of_the_sanlayn.up & gcd.max <= 1.0 & fight_remains > buff.dark_transformation.remains * 2",
["action"] = "death_coil",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "rune < 4 & active_enemies > variable.epidemic_targets & buff.gift_of_the_sanlayn.up & gcd.max <= 1.0 & fight_remains > buff.dark_transformation.remains * 2",
["action"] = "epidemic",
},
{
["enabled"] = true,
["criteria"] = "debuff.festering_wound.up & buff.death_and_decay.up & talent.bursting_sores.enabled & cooldown.apocalypse.remains > variable.apoc_timing",
["action"] = "wound_spender",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & active_enemies < variable.epidemic_targets",
["action"] = "death_coil",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power",
["action"] = "epidemic",
},
{
["enabled"] = true,
["criteria"] = "debuff.chains_of_ice_trollbane_slow.up",
["action"] = "wound_spender",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "cooldown.apocalypse.remains < variable.apoc_timing || buff.festering_scythe.up",
["action"] = "festering_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "debuff.festering_wound.stack < 2",
["action"] = "festering_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "debuff.festering_wound.up & cooldown.apocalypse.remains > gcd.max || buff.vampiric_strike.up & dot.virulent_plague.ticking",
["action"] = "wound_spender",
["cycle_targets"] = 1,
},
},
["trinkets"] = {
{
["enabled"] = true,
["name"] = "treacherous_transmitter",
["action"] = "treacherous_transmitter",
["criteria"] = "( variable.adds_remain || variable.st_planning ) & cooldown.dark_transformation.remains < 10",
["description"] = "Non-San'layn Trinkets",
},
{
["enabled"] = true,
["criteria"] = "( buff.latent_energy.stack >= 8 || ! trinket.t1.is.unyielding_netherprism ) & variable.trinket_1_buffs & ( variable.trinket_priority = 1 || ! trinket.t2.has_cooldown || trinket.t2.cooldown.remains > 20 ) & ( ! talent.apocalypse.enabled & buff.dark_transformation.up || pet.apoc_ghoul.active & pet.apoc_ghoul.remains <= variable.trinket_1_duration & pet.apoc_ghoul.remains > 5 ) & ( talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled & pet.army_ghoul.active & pet.army_ghoul.remains > 10 || talent.raise_abomination.enabled & pet.abomination.active & pet.abomination.remains > 10 || talent.legion_of_souls.enabled || ! talent.raise_abomination.enabled & ! talent.apocalypse.enabled & buff.dark_transformation.up || variable.trinket_2_buffs & trinket.t2.cooldown.remains ) || fight_remains <= variable.trinket_1_duration",
["action"] = "trinket1",
["slot"] = "trinket1",
},
{
["enabled"] = true,
["criteria"] = "( buff.latent_energy.stack >= 8 || ! trinket.t2.is.unyielding_netherprism ) & variable.trinket_2_buffs & ( variable.trinket_priority = 2 || ! trinket.t1.has_cooldown || trinket.t1.cooldown.remains > 20 ) & ( ! talent.apocalypse.enabled & buff.dark_transformation.up || pet.apoc_ghoul.active & pet.apoc_ghoul.remains <= variable.trinket_2_duration & pet.apoc_ghoul.remains > 5 ) & ( talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled & pet.army_ghoul.active & pet.army_ghoul.remains > 10 || talent.raise_abomination.enabled & pet.abomination.active & pet.abomination.remains > 10 || talent.legion_of_souls.enabled || ! talent.raise_abomination.enabled & ! talent.apocalypse.enabled & buff.dark_transformation.up || variable.trinket_1_buffs & trinket.t1.cooldown.remains ) || fight_remains <= variable.trinket_2_duration",
["action"] = "trinket2",
["slot"] = "trinket2",
},
{
["enabled"] = true,
["criteria"] = "! variable.trinket_1_buffs & ( variable.damage_trinket_priority = 1 || trinket.t2.cooldown.remains || ! trinket.t2.has_cooldown || ! talent.summon_gargoyle.enabled & ! talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled || ! talent.summon_gargoyle.enabled & talent.army_of_the_dead.enabled & ( ! talent.raise_abomination.enabled & cooldown.army_of_the_dead.remains > 20 || talent.raise_abomination.enabled & cooldown.raise_abomination.remains > 20 ) || ! talent.summon_gargoyle.enabled & ! talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled & cooldown.dark_transformation.remains > 20 || talent.summon_gargoyle.enabled & cooldown.summon_gargoyle.remains > 20 & ! pet.gargoyle.active ) || fight_remains < 15",
["action"] = "trinket1",
["slot"] = "trinket1",
},
{
["enabled"] = true,
["criteria"] = "! variable.trinket_2_buffs & ( variable.damage_trinket_priority = 2 || trinket.t1.cooldown.remains || ! trinket.t1.has_cooldown || ! talent.summon_gargoyle.enabled & ! talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled || ! talent.summon_gargoyle.enabled & talent.army_of_the_dead.enabled & ( ! talent.raise_abomination.enabled & cooldown.army_of_the_dead.remains > 20 || talent.raise_abomination.enabled & cooldown.raise_abomination.remains > 20 ) || ! talent.summon_gargoyle.enabled & ! talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled & cooldown.dark_transformation.remains > 20 || talent.summon_gargoyle.enabled & cooldown.summon_gargoyle.remains > 20 & ! pet.gargoyle.active ) || fight_remains < 15",
["action"] = "trinket2",
["slot"] = "trinket2",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.trinket_1_buffs & ! variable.trinket_2_buffs || trinket.t1.cooldown.remains & ! variable.trinket_2_buffs || trinket.t2.cooldown.remains & ! variable.trinket_1_buffs || trinket.t1.cooldown.remains & trinket.t2.cooldown.remains ) & ( pet.apoc_ghoul.active & pet.apoc_ghoul.remains <= 18 || ! talent.apocalypse.enabled & buff.dark_transformation.up ) & ( ( trinket.t1.cooldown.duration = 90 || trinket.t2.cooldown.duration = 90 ) || ! talent.raise_abomination.enabled & ! talent.army_of_the_dead.enabled || ! talent.raise_abomination.enabled & talent.army_of_the_dead.enabled & pet.army_ghoul.active || talent.raise_abomination.enabled & pet.abomination.active )",
["action"] = "main_hand",
["slot"] = "main_hand",
},
},
["san_fishing"] = {
{
["enabled"] = true,
["criteria"] = "death_knight.ams_absorb_percent > 0 & runic_power < 40",
["action"] = "antimagic_shell",
},
{
["enabled"] = true,
["criteria"] = "buff.infliction_of_sorrow.up",
["action"] = "wound_spender",
},
{
["enabled"] = true,
["criteria"] = "! buff.death_and_decay.up & ! buff.vampiric_strike.up",
["action"] = "any_dnd",
},
{
["enabled"] = true,
["criteria"] = "buff.sudden_doom.up & talent.doomed_bidding.enabled || set_bonus.tww2_4pc & buff.essence_of_the_blood_queen.at_max_stacks & talent.frenzied_bloodthirst.enabled & ! buff.vampiric_strike.up",
["action"] = "death_coil",
},
{
["enabled"] = true,
["criteria"] = "target.health.pct <= 35 & fight_remains > 5",
["action"] = "soul_reaper",
},
{
["enabled"] = true,
["criteria"] = "! buff.vampiric_strike.up",
["action"] = "death_coil",
},
{
["enabled"] = true,
["criteria"] = "( debuff.festering_wound.stack >= 3 - pet.abomination.active & cooldown.apocalypse.remains > variable.apoc_timing ) || buff.vampiric_strike.up",
["action"] = "wound_spender",
},
{
["enabled"] = true,
["criteria"] = "debuff.festering_wound.stack < 3 - pet.abomination.active",
["action"] = "festering_strike",
},
},
["cds_aoe_san"] = {
{
["enabled"] = true,
["action"] = "dark_transformation",
["description"] = "Sanlayn CDs AoE",
["criteria"] = "variable.adds_remain & ( buff.death_and_decay.up || active_enemies <= 3 )",
},
{
["enabled"] = true,
["criteria"] = "variable.adds_remain & buff.dark_transformation.up & buff.dark_transformation.remains < 12",
["action"] = "unholy_assault",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "variable.adds_remain & ( buff.death_and_decay.up || active_enemies <= 3 || rune < 3 )",
["action"] = "apocalypse",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "( dot.virulent_plague.ticks_remain < 5 || set_bonus.tww2_4pc & talent.superstrain.enabled & dot.frost_fever.ticks_remain < 5 & ! pet.abomination.active ) & ( talent.unholy_blight.enabled & ! cooldown.dark_transformation.ready || ! talent.unholy_blight.enabled ) & ( dot.virulent_plague.refreshable || talent.morbidity.enabled & ! buff.gift_of_the_sanlayn.up & talent.superstrain.enabled & dot.frost_fever.refreshable & dot.blood_plague.refreshable ) & ( ! dot.virulent_plague.ticking & variable.epidemic_targets < active_enemies || ( ! talent.unholy_blight.enabled || talent.unholy_blight.enabled & cooldown.dark_transformation.remains > 5 ) & ( ! talent.raise_abomination.enabled || talent.raise_abomination.enabled & cooldown.raise_abomination.remains > 5 ) ) || buff.visceral_strength_unholy.up",
["action"] = "outbreak",
},
},
["aoe_burst"] = {
{
["enabled"] = true,
["criteria"] = "buff.festering_scythe.up",
["action"] = "festering_strike",
},
{
["enabled"] = true,
["criteria"] = "death_knight.fwounded_targets = active_enemies & talent.desecrate.enabled & ( talent.festering_scythe.enabled & death_knight.fwounded_targets = 0 & buff.festering_scythe_stacks.stack < 10 & ! buff.festering_scythe.up || ! talent.festering_scythe.enabled ) & ( raid_event.adds.exists & raid_event.adds.remains > 6 & ( raid_event.adds.remains < 10 || ! buff.death_and_decay.up ) || ! raid_event.adds.exists || fight_remains > 6 & fight_remains < 10 )",
["action"] = "death_and_decay",
},
{
["enabled"] = true,
["criteria"] = "! buff.vampiric_strike.up & active_enemies < variable.epidemic_targets & ( ! talent.bursting_sores.enabled || talent.bursting_sores.enabled & death_knight.fwounded_targets < active_enemies & death_knight.fwounded_targets < active_enemies * 0.4 & buff.sudden_doom.up || buff.sudden_doom.up & ( talent.doomed_bidding.enabled & talent.menacing_magus.enabled || talent.rotten_touch.enabled || debuff.death_rot.remains < gcd.max ) || rune < 2 ) || ( rune < 4 || active_enemies < 4 || boss ) & active_enemies < variable.epidemic_targets & buff.gift_of_the_sanlayn.up & gcd.max <= 1.0 & ( fight_remains > buff.dark_transformation.remains * 2 )",
["action"] = "death_coil",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "! buff.vampiric_strike.up & ( ! talent.bursting_sores.enabled || talent.bursting_sores.enabled & death_knight.fwounded_targets < active_enemies & death_knight.fwounded_targets < active_enemies * 0.4 & buff.sudden_doom.up || buff.sudden_doom.up & ( buff.a_feast_of_souls.up || debuff.death_rot.remains < gcd.max || debuff.death_rot.stack < 10 ) || rune < 2 ) || ( rune < 4 || boss ) & active_enemies > variable.epidemic_targets & buff.gift_of_the_sanlayn.up & gcd.max <= 1.0 & fight_remains > buff.dark_transformation.remains * 2",
["action"] = "epidemic",
},
{
["enabled"] = true,
["criteria"] = "debuff.chains_of_ice_trollbane_slow.up",
["action"] = "wound_spender",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "debuff.festering_wound.up || buff.vampiric_strike.up || buff.death_and_decay.up",
["action"] = "wound_spender",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "active_enemies < variable.epidemic_targets",
["action"] = "death_coil",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "variable.epidemic_targets < active_enemies",
["action"] = "epidemic",
},
{
["enabled"] = true,
["criteria"] = "debuff.festering_wound.stack <= 2",
["action"] = "festering_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["action"] = "wound_spender",
["cycle_targets"] = 1,
},
},
["san_trinkets"] = {
{
["enabled"] = true,
["name"] = "treacherous_transmitter",
["action"] = "treacherous_transmitter",
["criteria"] = "( variable.adds_remain || variable.st_planning ) & cooldown.dark_transformation.remains < 10",
["description"] = "San'layn Trinkets",
},
{
["enabled"] = true,
["action"] = "cursed_stone_idol",
["criteria"] = "pet.apoc_ghoul.active || ! talent.apocalypse.enabled & buff.dark_transformation.up || cooldown.apocalypse.ready",
["name"] = "cursed_stone_idol",
},
{
["enabled"] = true,
["criteria"] = "( buff.latent_energy.stack >= 8 || ! trinket.t1.is.unyielding_netherprism ) & variable.trinket_1_buffs & ( buff.dark_transformation.up & buff.dark_transformation.remains < variable.trinket_1_duration * 0.73 & ( variable.trinket_priority = 1 || trinket.t2.cooldown.remains || ! trinket.t2.has_cooldown ) ) || variable.trinket_1_duration >= fight_remains",
["action"] = "trinket1",
["slot"] = "trinket1",
},
{
["enabled"] = true,
["criteria"] = "( buff.latent_energy.stack >= 8 || ! trinket.t2.is.unyielding_netherprism ) & variable.trinket_2_buffs & ( buff.dark_transformation.up & buff.dark_transformation.remains < variable.trinket_2_duration * 0.73 & ( variable.trinket_priority = 2 || trinket.t1.cooldown.remains || ! trinket.t1.has_cooldown ) ) || variable.trinket_2_duration >= fight_remains",
["action"] = "trinket2",
["slot"] = "trinket2",
},
{
["enabled"] = true,
["criteria"] = "! variable.trinket_1_buffs & ( trinket.t1.cast_time > 0 & ! buff.gift_of_the_sanlayn.up || ! trinket.t1.cast_time > 0 ) & ( variable.damage_trinket_priority = 1 || trinket.t2.cooldown.remains || ! trinket.t2.has_cooldown || ! talent.summon_gargoyle.enabled & ! talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled || ! talent.summon_gargoyle.enabled & talent.army_of_the_dead.enabled & ( ! talent.raise_abomination.enabled & cooldown.army_of_the_dead.remains > 20 || talent.raise_abomination.enabled & cooldown.raise_abomination.remains > 20 ) || ! talent.summon_gargoyle.enabled & ! talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled & cooldown.dark_transformation.remains > 20 || talent.summon_gargoyle.enabled & cooldown.summon_gargoyle.remains > 20 & ! pet.gargoyle.active ) || fight_remains < 15",
["action"] = "trinket1",
["slot"] = "trinket1",
},
{
["enabled"] = true,
["criteria"] = "! variable.trinket_2_buffs & ( trinket.t2.cast_time > 0 & ! buff.gift_of_the_sanlayn.up || ! trinket.t2.cast_time > 0 ) & ( variable.damage_trinket_priority = 2 || trinket.t1.cooldown.remains || ! trinket.t1.has_cooldown || ! talent.summon_gargoyle.enabled & ! talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled || ! talent.summon_gargoyle.enabled & talent.army_of_the_dead.enabled & ( ! talent.raise_abomination.enabled & cooldown.army_of_the_dead.remains > 20 || talent.raise_abomination.enabled & cooldown.raise_abomination.remains > 20 ) || ! talent.summon_gargoyle.enabled & ! talent.army_of_the_dead.enabled & ! talent.raise_abomination.enabled & cooldown.dark_transformation.remains > 20 || talent.summon_gargoyle.enabled & cooldown.summon_gargoyle.remains > 20 & ! pet.gargoyle.active ) || fight_remains < 15",
["action"] = "trinket2",
["slot"] = "trinket2",
},
{
["enabled"] = true,
["criteria"] = "( ! variable.trinket_1_buffs & ! variable.trinket_2_buffs || trinket.t1.cooldown.remains > 20 & ! variable.trinket_2_buffs || trinket.t2.cooldown.remains > 20 & ! variable.trinket_1_buffs || trinket.t1.cooldown.remains > 20 & trinket.t2.cooldown.remains > 20 ) & ( buff.dark_transformation.up & buff.dark_transformation.remains > 10 ) & ( ! talent.raise_abomination.enabled & ! talent.army_of_the_dead.enabled || ! talent.raise_abomination.enabled & talent.army_of_the_dead.enabled & pet.army_ghoul.active || talent.raise_abomination.enabled & pet.abomination.active || ( variable.trinket_1_buffs || variable.trinket_2_buffs || fight_remains < 15 ) )",
["action"] = "main_hand",
["slot"] = "main_hand",
},
},
["default"] = {
{
["action"] = "mind_freeze",
["enabled"] = true,
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "active_enemies = 1",
["var_name"] = "st_planning",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "active_enemies > 1 & fight_remains > 6",
["var_name"] = "adds_remain",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["var_name"] = "apoc_timing",
["value"] = "5",
["value_else"] = "2",
["criteria"] = "cooldown.apocalypse.remains < 5 & debuff.festering_wound.down & cooldown.unholy_assault.remains > 5",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( cooldown.apocalypse.remains > variable.apoc_timing || ! talent.apocalypse.enabled ) & ( debuff.festering_wound.up & cooldown.unholy_assault.remains < 20 & talent.unholy_assault.enabled & active_enemies = 1 || debuff.rotten_touch.up & debuff.festering_wound.up || debuff.festering_wound.stack >= 4 - pet.abomination.active ) || fight_remains < 5 & debuff.festering_wound.up",
["var_name"] = "pop_wounds",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "cooldown.summon_gargoyle.remains > 5 & runic_power < 40",
["var_name"] = "pooling_runic_power",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["value"] = "( ! talent.rotten_touch.enabled || talent.rotten_touch.enabled & ! debuff.rotten_touch.up || runic_power.deficit < 20 ) & ( ( talent.improved_death_coil.enabled & ( active_enemies = 2 || talent.coil_of_devastation.enabled ) || rune < 3 || pet.gargoyle.active || buff.sudden_doom.up || ! variable.pop_wounds & debuff.festering_wound.stack >= 4 ) )",
["var_name"] = "spend_rp",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "san_coil_mult",
["value"] = "2",
["value_else"] = "1",
["criteria"] = "buff.essence_of_the_blood_queen.stack >= 4",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "3 + talent.improved_death_coil.enabled + ( talent.frenzied_bloodthirst.enabled * variable.san_coil_mult ) + ( talent.hungering_thirst.enabled & talent.harbinger_of_doom.enabled & buff.sudden_doom.up )",
["var_name"] = "epidemic_targets",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "talent.vampiric_strike.enabled",
["list_name"] = "san_trinkets",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "! talent.vampiric_strike.enabled",
["list_name"] = "trinkets",
},
{
["enabled"] = true,
["criteria"] = "runic_power < 20 & rune < 2",
["action"] = "arcane_torrent",
},
{
["enabled"] = true,
["criteria"] = "( buff.blood_fury.duration + 3 >= pet.gargoyle.remains & pet.gargoyle.active ) || ( ! talent.summon_gargoyle.enabled || cooldown.summon_gargoyle.remains > 60 ) & ( pet.army_ghoul.active & pet.army_ghoul.remains <= buff.blood_fury.duration + 3 || pet.apoc_ghoul.active & pet.apoc_ghoul.remains <= buff.blood_fury.duration + 3 || active_enemies >= 2 & death_and_decay.ticking ) || boss & fight_remains <= buff.blood_fury.duration + 3",
["action"] = "blood_fury",
},
{
["enabled"] = true,
["criteria"] = "( buff.berserking.duration + 3 >= pet.gargoyle.remains & pet.gargoyle.active ) || ( ! talent.summon_gargoyle.enabled || cooldown.summon_gargoyle.remains > 60 ) & ( pet.army_ghoul.active & pet.army_ghoul.remains <= buff.berserking.duration + 3 || pet.apoc_ghoul.active & pet.apoc_ghoul.remains <= buff.berserking.duration + 3 || active_enemies >= 2 & death_and_decay.ticking ) || boss & fight_remains <= buff.berserking.duration + 3",
["action"] = "berserking",
},
{
["enabled"] = true,
["criteria"] = "buff.unholy_strength.up & ( ! talent.festermight.enabled || buff.festermight.remains < target.time_to_die || buff.unholy_strength.remains < target.time_to_die )",
["action"] = "lights_judgment",
},
{
["enabled"] = true,
["criteria"] = "( 18 >= pet.gargoyle.remains & pet.gargoyle.active ) || ( ! talent.summon_gargoyle.enabled || cooldown.summon_gargoyle.remains > 60 ) & ( pet.army_ghoul.active & pet.army_ghoul.remains <= 18 || pet.apoc_ghoul.active & pet.apoc_ghoul.remains <= 18 || active_enemies >= 2 & death_and_decay.ticking ) || boss & fight_remains <= 18",
["action"] = "ancestral_call",
},
{
["enabled"] = true,
["criteria"] = "active_enemies >= 2 || ( rune.deficit >= 5 & runic_power.deficit >= 60 )",
["action"] = "arcane_pulse",
},
{
["enabled"] = true,
["criteria"] = "( buff.fireblood.duration + 3 >= pet.gargoyle.remains & pet.gargoyle.active ) || ( ! talent.summon_gargoyle.enabled || cooldown.summon_gargoyle.remains > 60 ) & ( pet.army_ghoul.active & pet.army_ghoul.remains <= buff.fireblood.duration + 3 || pet.apoc_ghoul.active & pet.apoc_ghoul.remains <= buff.fireblood.duration + 3 || active_enemies >= 2 & death_and_decay.ticking ) || boss & fight_remains <= buff.fireblood.duration + 3",
["action"] = "fireblood",
},
{
["enabled"] = true,
["criteria"] = "active_enemies = 1 & ( buff.unholy_strength.up || boss & fight_remains < 5 )",
["action"] = "bag_of_tricks",
},
{
["enabled"] = true,
["action"] = "potion",
["description"] = "Shared Cooldowns",
["criteria"] = "active_enemies >= 1 & ( ! talent.summon_gargoyle.enabled || cooldown.summon_gargoyle.remains > 60 ) & ( buff.dark_transformation.up & 30 >= buff.dark_transformation.remains || pet.army_ghoul.active & pet.army_ghoul.remains <= 30 || pet.apoc_ghoul.active & pet.apoc_ghoul.remains <= 30 || pet.abomination.active & pet.abomination.remains <= 30 ) || boss & fight_remains <= 30",
},
{
["enabled"] = true,
["criteria"] = "( talent.commander_of_the_dead.enabled & cooldown.dark_transformation.remains < 5 || ! talent.commander_of_the_dead.enabled & active_enemies >= 1 ) || boss & fight_remains < 35",
["action"] = "army_of_the_dead",
},
{
["enabled"] = true,
["criteria"] = "( variable.st_planning || variable.adds_remain ) & ( ! talent.vampiric_strike.enabled || ( pet.apoc_ghoul.active || ! talent.apocalypse.enabled ) ) || boss & fight_remains < 30",
["action"] = "raise_abomination",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "summon_gargoyle",
["criteria"] = "( variable.st_planning || variable.adds_remain ) & ( buff.commander_of_the_dead.up || ! talent.commander_of_the_dead.enabled & active_enemies >= 1 ) || boss & fight_remains < 25",
},
{
["enabled"] = true,
["criteria"] = "death_knight.ams_absorb_percent > 0 & runic_power < 30 & rune < 2",
["action"] = "antimagic_shell",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["list_name"] = "cds_shared",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "talent.vampiric_strike.enabled & active_enemies >= 3",
["list_name"] = "cds_aoe_san",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "! talent.vampiric_strike.enabled & active_enemies >= 2",
["list_name"] = "cds_aoe",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "talent.vampiric_strike.enabled & active_enemies = 2",
["list_name"] = "cds_cleave_san",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "talent.vampiric_strike.enabled & active_enemies = 1",
["list_name"] = "cds_san",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "! talent.vampiric_strike.enabled & active_enemies = 1",
["list_name"] = "cds",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "active_enemies = 2",
["list_name"] = "cleave",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["criteria"] = "active_enemies >= 3 & cooldown.any_dnd.remains < 10 & ! death_and_decay.ticking",
["strict_if"] = "active_enemies >= 3",
["list_name"] = "aoe_setup",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["criteria"] = "active_enemies >= 3 & ( death_and_decay.ticking || buff.death_and_decay.up & ( death_knight.fwounded_targets >= ( cycle_enemies * 0.5 ) || talent.vampiric_strike.enabled & active_enemies < 16 ) )",
["strict_if"] = "active_enemies >= 3",
["list_name"] = "aoe_burst",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["criteria"] = "active_enemies >= 3 & ! buff.death_and_decay.up",
["strict_if"] = "active_enemies >= 3",
["list_name"] = "aoe",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["criteria"] = "active_enemies = 1 & talent.gift_of_the_sanlayn.enabled & ! cooldown.dark_transformation.ready & ! buff.gift_of_the_sanlayn.up & buff.essence_of_the_blood_queen.remains < cooldown.dark_transformation.remains + 3",
["strict_if"] = "active_enemies = 1 & talent.gift_of_the_sanlayn.enabled",
["list_name"] = "san_fishing",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "active_enemies = 1 & talent.vampiric_strike.enabled",
["list_name"] = "san_st",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "active_enemies = 1 & ! talent.vampiric_strike.enabled",
["list_name"] = "st",
},
},
["precombat"] = {
{
["action"] = "raise_dead",
["enabled"] = true,
},
{
["enabled"] = true,
["action"] = "army_of_the_dead",
["precombat_time"] = "2",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "trinket.t1.has_use_buff || trinket.t1.is.treacherous_transmitter || trinket.t1.is.unyielding_netherprism",
["var_name"] = "trinket_1_buffs",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "trinket.t2.has_use_buff || trinket.t2.is.treacherous_transmitter || trinket.t2.is.unyielding_netherprism",
["var_name"] = "trinket_2_buffs",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_1_duration",
["value"] = "trinket.t1.is.treacherous_transmitter * 15 + trinket.t1.is.funhouse_lens * 15 + trinket.t1.is.signet_of_the_priory * 20 + trinket.t1.is.unyielding_netherprism * 20 + trinket.t1.is.cursed_stone_idol * 16",
["value_else"] = "trinket.t1.buff_duration",
["criteria"] = "trinket.t1.is.treacherous_transmitter || trinket.t1.is.funhouse_lens || trinket.t1.is.signet_of_the_priory || trinket.t1.is.unyielding_netherprism || trinket.t1.is.cursed_stone_idol",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_2_duration",
["value"] = "trinket.t2.is.treacherous_transmitter * 15 + trinket.t2.is.funhouse_lens * 15 + trinket.t2.is.signet_of_the_priory * 20 + trinket.t2.is.unyielding_netherprism * 20 + trinket.t2.is.cursed_stone_idol * 16",
["value_else"] = "trinket.t2.buff_duration",
["criteria"] = "trinket.t2.is.treacherous_transmitter || trinket.t2.is.funhouse_lens || trinket.t2.is.signet_of_the_priory || trinket.t2.is.unyielding_netherprism || trinket.t2.is.cursed_stone_idol",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_1_high_value",
["value"] = "2",
["value_else"] = "1",
["criteria"] = "trinket.t1.is.treacherous_transmitter",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_2_high_value",
["value"] = "2",
["value_else"] = "1",
["criteria"] = "trinket.t2.is.treacherous_transmitter",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_1_sync",
["value"] = "1",
["value_else"] = "0.5",
["criteria"] = "variable.trinket_1_buffs & ( talent.apocalypse.enabled & trinket.t1.cooldown.duration % cooldown.apocalypse.duration = 0 || talent.dark_transformation.enabled & trinket.t1.cooldown.duration % cooldown.dark_transformation.duration = 0 ) || trinket.t1.is.treacherous_transmitter",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_2_sync",
["value"] = "1",
["value_else"] = "0.5",
["criteria"] = "variable.trinket_2_buffs & ( talent.apocalypse.enabled & trinket.t2.cooldown.duration % cooldown.apocalypse.duration = 0 || talent.dark_transformation.enabled & trinket.t2.cooldown.duration % cooldown.dark_transformation.duration = 0 ) || trinket.t2.is.treacherous_transmitter",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_priority",
["value"] = "2",
["value_else"] = "1",
["criteria"] = "! variable.trinket_1_buffs & variable.trinket_2_buffs & ( trinket.t2.has_cooldown || ! trinket.t1.has_cooldown ) || variable.trinket_2_buffs & ( ( trinket.t2.cooldown.duration / variable.trinket_2_duration ) * ( 1.5 + trinket.t2.has_use_buff ) * ( variable.trinket_2_sync ) * ( variable.trinket_2_high_value ) * ( 1 + ( ( trinket.t2.ilvl - trinket.t1.ilvl ) / 100 ) ) ) > ( ( trinket.t1.cooldown.duration / variable.trinket_1_duration ) * ( 1.5 + trinket.t1.has_use_buff ) * ( variable.trinket_1_sync ) * ( variable.trinket_1_high_value ) * ( 1 + ( ( trinket.t1.ilvl - trinket.t2.ilvl ) / 100 ) ) )",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "damage_trinket_priority",
["value"] = "2",
["value_else"] = "1",
["criteria"] = "! variable.trinket_1_buffs & ! variable.trinket_2_buffs & trinket.t2.ilvl >= trinket.t1.ilvl",
},
},
["cds_san"] = {
{
["enabled"] = true,
["action"] = "dark_transformation",
["description"] = "Sanlayn CDs ST",
["criteria"] = "variable.st_planning || fight_remains < 20",
},
{
["enabled"] = true,
["criteria"] = "variable.st_planning || fight_remains < 20",
["action"] = "apocalypse",
},
{
["enabled"] = true,
["criteria"] = "variable.st_planning & ( buff.dark_transformation.up & buff.dark_transformation.remains < 12 ) || fight_remains < 20",
["action"] = "unholy_assault",
},
{
["enabled"] = true,
["criteria"] = "( dot.virulent_plague.refreshable || talent.morbidity.enabled & buff.infliction_of_sorrow.up & talent.superstrain.enabled & dot.frost_fever.refreshable & dot.blood_plague.refreshable ) & ( ! talent.unholy_blight.enabled || talent.unholy_blight.enabled & cooldown.dark_transformation.remains > 6 ) & ( ! talent.raise_abomination.enabled || talent.raise_abomination.enabled & cooldown.raise_abomination.remains > 6 ) || buff.visceral_strength_unholy.up",
["action"] = "outbreak",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "talent.superstrain.enabled & set_bonus.tww2_4pc & dot.frost_fever.refreshable & ( ! talent.unholy_blight.enabled || talent.unholy_blight.enabled & cooldown.dark_transformation.remains > 6 ) & ( ! talent.raise_abomination.enabled || talent.raise_abomination.enabled & cooldown.raise_abomination.remains > 6 )",
["action"] = "outbreak",
["cycle_targets"] = 1,
},
},
["cds"] = {
{
["enabled"] = true,
["action"] = "dark_transformation",
["description"] = "Non-Sanlayn CDs",
["criteria"] = "variable.st_planning || boss & fight_remains < 20",
},
{
["enabled"] = true,
["criteria"] = "variable.st_planning & ( cooldown.apocalypse.remains < gcd.max * 1.5 || ! talent.apocalypse.enabled || active_enemies >= 2 & buff.dark_transformation.up ) || boss & fight_remains < 20",
["action"] = "unholy_assault",
},
{
["enabled"] = true,
["criteria"] = "variable.st_planning || boss & fight_remains < 20",
["action"] = "apocalypse",
},
{
["enabled"] = true,
["criteria"] = "( dot.virulent_plague.refreshable || talent.superstrain.enabled & ( dot.frost_fever.refreshable || dot.blood_plague.refreshable ) ) & ( ! talent.unholy_blight.enabled || talent.plaguebringer.enabled ) & ( ! talent.raise_abomination.enabled || ! pet.abomination.active & talent.raise_abomination.enabled & cooldown.raise_abomination.remains > dot.virulent_plague.ticks_remain * 3 )",
["action"] = "outbreak",
},
},
["san_st"] = {
{
["enabled"] = true,
["action"] = "wound_spender",
["description"] = "San'layn Single Target",
["criteria"] = "buff.infliction_of_sorrow.up",
},
{
["enabled"] = true,
["criteria"] = "buff.festering_scythe.up & ( ! raid_event.adds.exists || ! raid_event.adds.in || raid_event.adds.in > 11 || raid_event.pull.has_boss & raid_event.adds.in > 11 )",
["action"] = "festering_strike",
},
{
["enabled"] = true,
["criteria"] = "buff.sudden_doom.up & buff.gift_of_the_sanlayn.remains & ( talent.doomed_bidding.enabled || talent.rotten_touch.enabled ) || rune < 3 & ! buff.runic_corruption.up || set_bonus.tww2_4pc & runic_power > 80 || buff.gift_of_the_sanlayn.up & buff.essence_of_the_blood_queen.at_max_stacks & talent.frenzied_bloodthirst.enabled & set_bonus.tww2_4pc & buff.winning_streak_unholy.at_max_stacks & rune <= 3 & buff.essence_of_the_blood_queen.remains > 3",
["action"] = "death_coil",
},
{
["enabled"] = true,
["criteria"] = "buff.vampiric_strike.up & debuff.festering_wound.stack >= 1 || buff.gift_of_the_sanlayn.up || talent.gift_of_the_sanlayn.enabled & buff.dark_transformation.up & buff.dark_transformation.remains < gcd.max",
["action"] = "wound_spender",
},
{
["enabled"] = true,
["criteria"] = "target.health.pct <= 35 & ! buff.gift_of_the_sanlayn.up & fight_remains > 5",
["action"] = "soul_reaper",
},
{
["enabled"] = true,
["criteria"] = "( debuff.festering_wound.stack = 0 & cooldown.apocalypse.remains < variable.apoc_timing ) || ! buff.dark_transformation.up & cooldown.dark_transformation.remains < 10 & debuff.festering_wound.stack <= 3 & ( rune > 4 || runic_power < 80 ) || ( talent.gift_of_the_sanlayn.enabled & ! buff.gift_of_the_sanlayn.up || ! talent.gift_of_the_sanlayn.enabled ) & debuff.festering_wound.stack <= 1",
["action"] = "festering_strike",
},
{
["enabled"] = true,
["criteria"] = "( ! talent.apocalypse.enabled || cooldown.apocalypse.remains > variable.apoc_timing ) & ( cooldown.dark_transformation.remains > 5 & debuff.festering_wound.stack >= 3 - pet.abomination.active || buff.vampiric_strike.up )",
["action"] = "wound_spender",
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & debuff.death_rot.remains < gcd.max || ( buff.sudden_doom.up & debuff.festering_wound.stack >= 1 || rune < 2 )",
["action"] = "death_coil",
},
{
["enabled"] = true,
["criteria"] = "debuff.festering_wound.stack > 4",
["action"] = "wound_spender",
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power",
["action"] = "death_coil",
},
{
["enabled"] = true,
["criteria"] = "( ! talent.apocalypse.enabled || cooldown.apocalypse.remains > variable.apoc_timing ) & rune >= 4",
["action"] = "wound_spender",
},
},
["st"] = {
{
["enabled"] = true,
["criteria"] = "target.health.pct <= 35 & target.time_to_die > 5",
["action"] = "soul_reaper",
},
{
["enabled"] = true,
["criteria"] = "debuff.chains_of_ice_trollbane_slow.up",
["action"] = "wound_spender",
},
{
["enabled"] = true,
["criteria"] = "talent.unholy_ground.enabled & ! buff.death_and_decay.up & ( pet.apoc_ghoul.active || pet.abomination.active || pet.gargoyle.active )",
["action"] = "any_dnd",
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power & variable.spend_rp || fight_remains < 10",
["action"] = "death_coil",
},
{
["enabled"] = true,
["criteria"] = "debuff.festering_wound.stack < 4 & ( ! variable.pop_wounds || buff.festering_scythe.up )",
["action"] = "festering_strike",
},
{
["enabled"] = true,
["criteria"] = "variable.pop_wounds",
["action"] = "wound_spender",
},
{
["enabled"] = true,
["criteria"] = "! variable.pooling_runic_power",
["action"] = "death_coil",
},
{
["enabled"] = true,
["criteria"] = "! variable.pop_wounds & debuff.festering_wound.stack >= 4",
["action"] = "wound_spender",
},
},
},
["version"] = 20250826,
["warnings"] = "The import for 'trinkets' required some automated changes.\nLine 2: Converted 'trinket.1.is.unyielding_netherprism' to 'trinket.t1.is.unyielding_netherprism' (1x).\nLine 2: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 2: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 2: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 2: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 2: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 3: Converted 'trinket.2.is.unyielding_netherprism' to 'trinket.t2.is.unyielding_netherprism' (1x).\nLine 3: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 3: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 3: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 3: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 3: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 4: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 4: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 4: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 5: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 5: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 5: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 6: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 6: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 6: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 6: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 6: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 6: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 6: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 6: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 6: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration' (1x).\nLine 6: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration'.\nLine 6: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration' (1x).\nLine 6: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration'.\n\nThe import for 'san_trinkets' required some automated changes.\nLine 3: Converted 'trinket.1.is.unyielding_netherprism' to 'trinket.t1.is.unyielding_netherprism' (1x).\nLine 3: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 3: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 3: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 4: Converted 'trinket.2.is.unyielding_netherprism' to 'trinket.t2.is.unyielding_netherprism' (1x).\nLine 4: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 4: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 4: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 5: Converted 'trinket.1.cast_time' to 'trinket.t1.cast_time' (1x).\nLine 5: Converted 'trinket.1.cast_time' to 'trinket.t1.cast_time' (1x).\nLine 5: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 5: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 5: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 6: Converted 'trinket.2.cast_time' to 'trinket.t2.cast_time' (1x).\nLine 6: Converted 'trinket.2.cast_time' to 'trinket.t2.cast_time' (1x).\nLine 6: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 6: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 6: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 7: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 7: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 7: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 7: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 7: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 7: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 7: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 7: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\n\nThe import for 'precombat' required some automated changes.\nLine 3: Converted 'trinket.1.has_use_buff' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.is.treacherous_transmitter' to 'trinket.t1.is.treacherous_transmitter' (1x).\nLine 3: Converted 'trinket.1.is.unyielding_netherprism' to 'trinket.t1.is.unyielding_netherprism' (1x).\nLine 4: Converted 'trinket.2.has_use_buff' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.is.treacherous_transmitter' to 'trinket.t2.is.treacherous_transmitter' (1x).\nLine 4: Converted 'trinket.2.is.unyielding_netherprism' to 'trinket.t2.is.unyielding_netherprism' (1x).\nLine 5: Converted 'trinket.1.is.treacherous_transmitter' to 'trinket.t1.is.treacherous_transmitter' (1x).\nLine 5: Converted 'trinket.1.is.funhouse_lens' to 'trinket.t1.is.funhouse_lens' (1x).\nLine 5: Converted 'trinket.1.is.signet_of_the_priory' to 'trinket.t1.is.signet_of_the_priory' (1x).\nLine 5: Converted 'trinket.1.is.unyielding_netherprism' to 'trinket.t1.is.unyielding_netherprism' (1x).\nLine 5: Converted 'trinket.1.is.cursed_stone_idol' to 'trinket.t1.is.cursed_stone_idol' (1x).\nLine 5: Converted 'trinket.1.proc.any_dps.duration' to 'trinket.t1.proc.any_dps.duration' (1x).\nLine 5: Converted 'trinket.1.proc.any_dps.duration' to 'trinket.t1.buff_duration' (1x).\nLine 5: Converted 'trinket.1.is.treacherous_transmitter' to 'trinket.t1.is.treacherous_transmitter' (1x).\nLine 5: Converted 'trinket.1.is.funhouse_lens' to 'trinket.t1.is.funhouse_lens' (1x).\nLine 5: Converted 'trinket.1.is.signet_of_the_priory' to 'trinket.t1.is.signet_of_the_priory' (1x).\nLine 5: Converted 'trinket.1.is.unyielding_netherprism' to 'trinket.t1.is.unyielding_netherprism' (1x).\nLine 5: Converted 'trinket.1.is.cursed_stone_idol' to 'trinket.t1.is.cursed_stone_idol' (1x).\nLine 6: Converted 'trinket.2.is.treacherous_transmitter' to 'trinket.t2.is.treacherous_transmitter' (1x).\nLine 6: Converted 'trinket.2.is.funhouse_lens' to 'trinket.t2.is.funhouse_lens' (1x).\nLine 6: Converted 'trinket.2.is.signet_of_the_priory' to 'trinket.t2.is.signet_of_the_priory' (1x).\nLine 6: Converted 'trinket.2.is.unyielding_netherprism' to 'trinket.t2.is.unyielding_netherprism' (1x).\nLine 6: Converted 'trinket.2.is.cursed_stone_idol' to 'trinket.t2.is.cursed_stone_idol' (1x).\nLine 6: Converted 'trinket.2.proc.any_dps.duration' to 'trinket.t2.proc.any_dps.duration' (1x).\nLine 6: Converted 'trinket.2.proc.any_dps.duration' to 'trinket.t2.buff_duration' (1x).\nLine 6: Converted 'trinket.2.is.treacherous_transmitter' to 'trinket.t2.is.treacherous_transmitter' (1x).\nLine 6: Converted 'trinket.2.is.funhouse_lens' to 'trinket.t2.is.funhouse_lens' (1x).\nLine 6: Converted 'trinket.2.is.signet_of_the_priory' to 'trinket.t2.is.signet_of_the_priory' (1x).\nLine 6: Converted 'trinket.2.is.unyielding_netherprism' to 'trinket.t2.is.unyielding_netherprism' (1x).\nLine 6: Converted 'trinket.2.is.cursed_stone_idol' to 'trinket.t2.is.cursed_stone_idol' (1x).\nLine 7: Converted 'trinket.1.is.treacherous_transmitter' to 'trinket.t1.is.treacherous_transmitter' (1x).\nLine 8: Converted 'trinket.2.is.treacherous_transmitter' to 'trinket.t2.is.treacherous_transmitter' (1x).\nLine 9: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration' (1x).\nLine 9: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration'.\nLine 9: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration' (1x).\nLine 9: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration'.\nLine 9: Converted 'trinket.1.is.treacherous_transmitter' to 'trinket.t1.is.treacherous_transmitter' (1x).\nLine 9: Converted operations in 'variable.trinket_1_buffs&(talent.apocalypse.enabled&trinket.t1.cooldown.duration%%cooldown.apocalypse.duration=0||talent.dark_transformation.enabled&trinket.t1.cooldown.duration%%cooldown.dark_transformation.duration=0)||trinket.t1.is.treacherous_transmitter' to 'variable.trinket_1_buffs&(talent.apocalypse.enabled&trinket.t1.cooldown.duration%cooldown.apocalypse.duration=0||talent.dark_transformation.enabled&trinket.t1.cooldown.duration%cooldown.dark_transformation.duration=0)||trinket.t1.is.treacherous_transmitter'.\nLine 10: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration' (1x).\nLine 10: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration'.\nLine 10: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration' (1x).\nLine 10: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration'.\nLine 10: Converted 'trinket.2.is.treacherous_transmitter' to 'trinket.t2.is.treacherous_transmitter' (1x).\nLine 10: Converted operations in 'variable.trinket_2_buffs&(talent.apocalypse.enabled&trinket.t2.cooldown.duration%%cooldown.apocalypse.duration=0||talent.dark_transformation.enabled&trinket.t2.cooldown.duration%%cooldown.dark_transformation.duration=0)||trinket.t2.is.treacherous_transmitter' to 'variable.trinket_2_buffs&(talent.apocalypse.enabled&trinket.t2.cooldown.duration%cooldown.apocalypse.duration=0||talent.dark_transformation.enabled&trinket.t2.cooldown.duration%cooldown.dark_transformation.duration=0)||trinket.t2.is.treacherous_transmitter'.\nLine 11: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 11: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 11: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration' (1x).\nLine 11: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration'.\nLine 11: Converted 'trinket.2.has_buff.strength' to 'trinket.t2.has_buff.strength' (1x).\nLine 11: Converted 'trinket.2.has_buff.strength' to 'trinket.t2.has_use_buff' (1x).\nLine 11: Converted 'trinket.2.ilvl' to 'trinket.t2.ilvl' (1x).\nLine 11: Converted 'trinket.1.ilvl' to 'trinket.t1.ilvl' (1x).\nLine 11: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration' (1x).\nLine 11: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration'.\nLine 11: Converted 'trinket.1.has_buff.strength' to 'trinket.t1.has_buff.strength' (1x).\nLine 11: Converted 'trinket.1.has_buff.strength' to 'trinket.t1.has_use_buff' (1x).\nLine 11: Converted 'trinket.1.ilvl' to 'trinket.t1.ilvl' (1x).\nLine 11: Converted 'trinket.2.ilvl' to 'trinket.t2.ilvl' (1x).\nLine 11: Converted operations in '!variable.trinket_1_buffs&variable.trinket_2_buffs&(trinket.t2.has_cooldown||!trinket.t1.has_cooldown)||variable.trinket_2_buffs&((trinket.t2.cooldown.duration%variable.trinket_2_duration)*(1.5+trinket.t2.has_use_buff)*(variable.trinket_2_sync)*(variable.trinket_2_high_value)*(1+((trinket.t2.ilvl-trinket.t1.ilvl)%100)))>((trinket.t1.cooldown.duration%variable.trinket_1_duration)*(1.5+trinket.t1.has_use_buff)*(variable.trinket_1_sync)*(variable.trinket_1_high_value)*(1+((trinket.t1.ilvl-trinket.t2.ilvl)%100)))' to '!variable.trinket_1_buffs&variable.trinket_2_buffs&(trinket.t2.has_cooldown||!trinket.t1.has_cooldown)||variable.trinket_2_buffs&((trinket.t2.cooldown.duration/variable.trinket_2_duration)*(1.5+trinket.t2.has_use_buff)*(variable.trinket_2_sync)*(variable.trinket_2_high_value)*(1+((trinket.t2.ilvl-trinket.t1.ilvl)/100)))>((trinket.t1.cooldown.duration/variable.trinket_1_duration)*(1.5+trinket.t1.has_use_buff)*(variable.trinket_1_sync)*(variable.trinket_1_high_value)*(1+((trinket.t1.ilvl-trinket.t2.ilvl)/100)))'.\nLine 12: Converted 'trinket.2.ilvl' to 'trinket.t2.ilvl' (1x).\nLine 12: Converted 'trinket.1.ilvl' to 'trinket.t1.ilvl' (1x).\n\nImported 17 action lists.\n",
["author"] = "SimulationCraft",
["profile"] = "## https://github.com/simulationcraft/simc/blob/thewarwithin/ActionPriorityLists/default/deathknight_unholy.simc\n## SimulationCraft Commit Sync: 05c05de\n## Date: 2025-08-26\n\n## [Hekili] There are a fair number of nested variables in this priority which can cause logic/timing issues.\n\nactions.precombat+=/raise_dead\nactions.precombat+=/army_of_the_dead,precombat_time=2\nactions.precombat+=/variable,name=trinket_1_buffs,value=trinket.1.has_use_buff||trinket.1.is.treacherous_transmitter||trinket.1.is.unyielding_netherprism\nactions.precombat+=/variable,name=trinket_2_buffs,value=trinket.2.has_use_buff||trinket.2.is.treacherous_transmitter||trinket.2.is.unyielding_netherprism\nactions.precombat+=/variable,name=trinket_1_duration,op=setif,value=trinket.1.is.treacherous_transmitter*15+trinket.1.is.funhouse_lens*15+trinket.1.is.signet_of_the_priory*20+trinket.1.is.unyielding_netherprism*20+trinket.1.is.cursed_stone_idol*16,value_else=trinket.1.proc.any_dps.duration,condition=trinket.1.is.treacherous_transmitter||trinket.1.is.funhouse_lens||trinket.1.is.signet_of_the_priory||trinket.1.is.unyielding_netherprism||trinket.1.is.cursed_stone_idol\nactions.precombat+=/variable,name=trinket_2_duration,op=setif,value=trinket.2.is.treacherous_transmitter*15+trinket.2.is.funhouse_lens*15+trinket.2.is.signet_of_the_priory*20+trinket.2.is.unyielding_netherprism*20+trinket.2.is.cursed_stone_idol*16,value_else=trinket.2.proc.any_dps.duration,condition=trinket.2.is.treacherous_transmitter||trinket.2.is.funhouse_lens||trinket.2.is.signet_of_the_priory||trinket.2.is.unyielding_netherprism||trinket.2.is.cursed_stone_idol\nactions.precombat+=/variable,name=trinket_1_high_value,op=setif,value=2,value_else=1,condition=trinket.1.is.treacherous_transmitter\nactions.precombat+=/variable,name=trinket_2_high_value,op=setif,value=2,value_else=1,condition=trinket.2.is.treacherous_transmitter\nactions.precombat+=/variable,name=trinket_1_sync,op=setif,value=1,value_else=0.5,condition=variable.trinket_1_buffs&(talent.apocalypse&trinket.1.cooldown.duration%%cooldown.apocalypse.duration=0||talent.dark_transformation&trinket.1.cooldown.duration%%cooldown.dark_transformation.duration=0)||trinket.1.is.treacherous_transmitter\nactions.precombat+=/variable,name=trinket_2_sync,op=setif,value=1,value_else=0.5,condition=variable.trinket_2_buffs&(talent.apocalypse&trinket.2.cooldown.duration%%cooldown.apocalypse.duration=0||talent.dark_transformation&trinket.2.cooldown.duration%%cooldown.dark_transformation.duration=0)||trinket.2.is.treacherous_transmitter\nactions.precombat+=/variable,name=trinket_priority,op=setif,value=2,value_else=1,condition=!variable.trinket_1_buffs&variable.trinket_2_buffs&(trinket.2.has_cooldown||!trinket.1.has_cooldown)||variable.trinket_2_buffs&((trinket.2.cooldown.duration%variable.trinket_2_duration)*(1.5+trinket.2.has_buff.strength)*(variable.trinket_2_sync)*(variable.trinket_2_high_value)*(1+((trinket.2.ilvl-trinket.1.ilvl)%100)))>((trinket.1.cooldown.duration%variable.trinket_1_duration)*(1.5+trinket.1.has_buff.strength)*(variable.trinket_1_sync)*(variable.trinket_1_high_value)*(1+((trinket.1.ilvl-trinket.2.ilvl)%100)))\nactions.precombat+=/variable,name=damage_trinket_priority,op=setif,value=2,value_else=1,condition=!variable.trinket_1_buffs&!variable.trinket_2_buffs&trinket.2.ilvl>=trinket.1.ilvl\n\nactions+=/mind_freeze\nactions+=/variable,name=st_planning,op=set,value=active_enemies=1\n## [Hekili] This could be shifted to 'raid_event.adds.remains>6' because it does return remaining time on secondary targets (excluding current target).\nactions+=/variable,name=adds_remain,op=set,value=active_enemies>1&fight_remains>6\nactions+=/variable,name=apoc_timing,op=set,value=5,value_else=2,condition=cooldown.apocalypse.remains<5&debuff.festering_wound.down&cooldown.unholy_assault.remains>5\nactions+=/variable,name=pop_wounds,op=set,value=(cooldown.apocalypse.remains>variable.apoc_timing||!talent.apocalypse)&(debuff.festering_wound.up&cooldown.unholy_assault.remains<20&talent.unholy_assault&active_enemies=1||debuff.rotten_touch.up&debuff.festering_wound.up||debuff.festering_wound.stack>=4-pet.abomination.active)||fight_remains<5&debuff.festering_wound.up\nactions+=/variable,name=pooling_runic_power,op=set,value=cooldown.summon_gargoyle.remains>5&runic_power<40\nactions+=/variable,name=spend_rp,op=setif,value=(!talent.rotten_touch||talent.rotten_touch&!debuff.rotten_touch.up||runic_power.deficit<20)&((talent.improved_death_coil&(active_enemies=2||talent.coil_of_devastation)||rune<3||pet.gargoyle.active||buff.sudden_doom.up||!variable.pop_wounds&debuff.festering_wound.stack>=4))\nactions+=/variable,name=san_coil_mult,op=setif,value=2,value_else=1,condition=buff.essence_of_the_blood_queen.stack>=4\nactions+=/variable,name=epidemic_targets,value=3+talent.improved_death_coil+(talent.frenzied_bloodthirst*variable.san_coil_mult)+(talent.hungering_thirst&talent.harbinger_of_doom&buff.sudden_doom.up)\n## Call Action Lists\nactions+=/call_action_list,name=san_trinkets,strict=1,if=talent.vampiric_strike\nactions+=/call_action_list,name=trinkets,strict=1,if=!talent.vampiric_strike\n## Racials\nactions+=/arcane_torrent,if=runic_power<20&rune<2\nactions+=/blood_fury,if=(buff.blood_fury.duration+3>=pet.gargoyle.remains&pet.gargoyle.active)||(!talent.summon_gargoyle||cooldown.summon_gargoyle.remains>60)&(pet.army_ghoul.active&pet.army_ghoul.remains<=buff.blood_fury.duration+3||pet.apoc_ghoul.active&pet.apoc_ghoul.remains<=buff.blood_fury.duration+3||active_enemies>=2&death_and_decay.ticking)||boss&fight_remains<=buff.blood_fury.duration+3\nactions+=/berserking,if=(buff.berserking.duration+3>=pet.gargoyle.remains&pet.gargoyle.active)||(!talent.summon_gargoyle||cooldown.summon_gargoyle.remains>60)&(pet.army_ghoul.active&pet.army_ghoul.remains<=buff.berserking.duration+3||pet.apoc_ghoul.active&pet.apoc_ghoul.remains<=buff.berserking.duration+3||active_enemies>=2&death_and_decay.ticking)||boss&fight_remains<=buff.berserking.duration+3\nactions+=/lights_judgment,if=buff.unholy_strength.up&(!talent.festermight||buff.festermight.remains<target.time_to_die||buff.unholy_strength.remains<target.time_to_die)\nactions+=/ancestral_call,if=(18>=pet.gargoyle.remains&pet.gargoyle.active)||(!talent.summon_gargoyle||cooldown.summon_gargoyle.remains>60)&(pet.army_ghoul.active&pet.army_ghoul.remains<=18||pet.apoc_ghoul.active&pet.apoc_ghoul.remains<=18||active_enemies>=2&death_and_decay.ticking)||boss&fight_remains<=18\nactions+=/arcane_pulse,if=active_enemies>=2||(rune.deficit>=5&runic_power.deficit>=60)\nactions+=/fireblood,if=(buff.fireblood.duration+3>=pet.gargoyle.remains&pet.gargoyle.active)||(!talent.summon_gargoyle||cooldown.summon_gargoyle.remains>60)&(pet.army_ghoul.active&pet.army_ghoul.remains<=buff.fireblood.duration+3||pet.apoc_ghoul.active&pet.apoc_ghoul.remains<=buff.fireblood.duration+3||active_enemies>=2&death_and_decay.ticking)||boss&fight_remains<=buff.fireblood.duration+3\nactions+=/bag_of_tricks,if=active_enemies=1&(buff.unholy_strength.up||boss&fight_remains<5)\n# Shared Cooldowns\nactions+=/potion,if=active_enemies>=1&(!talent.summon_gargoyle||cooldown.summon_gargoyle.remains>60)&(buff.dark_transformation.up&30>=buff.dark_transformation.remains||pet.army_ghoul.active&pet.army_ghoul.remains<=30||pet.apoc_ghoul.active&pet.apoc_ghoul.remains<=30||pet.abomination.active&pet.abomination.remains<=30)||boss&fight_remains<=30\n## Use <a href='https://www.wowhead.com/spell=10060/power-infusion'>Power Infusion</a> while <a href='https://www.wowhead.com/spell=49206/summon-gargoyle'>Gargoyle</a> is up, as well as <a href='https://www.wowhead.com/spell=275699/apocalypse'>Apocalypse</a> or with <a href='https://www.wowhead.com/spell=63560/dark-transformation'>Dark Transformation</a> if <a href='https://www.wowhead.com/spell=275699/apocalypse'>Apocalypse</a> or <a href='https://www.wowhead.com/spell=49206/summon-gargoyle'>Gargoyle</a> are not talented\n## actions+=/invoke_external_buff,name=power_infusion,if=active_enemies>=1&(pet.gargoyle.active&pet.gargoyle.remains<=22||!talent.summon_gargoyle&talent.army_of_the_dead&(talent.raise_abomination&pet.abomination.active&pet.abomination.remains<18||!talent.raise_abomination&pet.army_ghoul.active&pet.army_ghoul.remains<=18)||!talent.summon_gargoyle&!talent.army_of_the_dead&buff.dark_transformation.up||!talent.summon_gargoyle&buff.dark_transformation.up||!pet.gargoyle.active&cooldown.summon_gargoyle.remains+10>cooldown.invoke_external_buff_power_infusion.duration||active_enemies>=3&(buff.dark_transformation.up||death_and_decay.ticking))\n## [Syrif] (variable.st_planning||variable.adds_remain) removed from 3 lines here, too redundant\nactions+=/army_of_the_dead,if=(talent.commander_of_the_dead&cooldown.dark_transformation.remains<5||!talent.commander_of_the_dead&active_enemies>=1)||boss&fight_remains<35\nactions+=/raise_abomination,if=(variable.st_planning||variable.adds_remain)&(!talent.vampiric_strike||(pet.apoc_ghoul.active||!talent.apocalypse))||boss&fight_remains<30\nactions+=/summon_gargoyle,use_off_gcd=1,if=(variable.st_planning||variable.adds_remain)&(buff.commander_of_the_dead.up||!talent.commander_of_the_dead&active_enemies>=1)||boss&fight_remains<25\nactions+=/antimagic_shell,if=death_knight.ams_absorb_percent>0&runic_power<30&rune<2\nactions+=/call_action_list,name=cds_shared\nactions+=/call_action_list,name=cds_aoe_san,strict=1,if=talent.vampiric_strike&active_enemies>=3\nactions+=/call_action_list,name=cds_aoe,strict=1,if=!talent.vampiric_strike&active_enemies>=2\nactions+=/call_action_list,name=cds_cleave_san,strict=1,if=talent.vampiric_strike&active_enemies=2\nactions+=/call_action_list,name=cds_san,strict=1,if=talent.vampiric_strike&active_enemies=1\nactions+=/call_action_list,name=cds,strict=1,if=!talent.vampiric_strike&active_enemies=1\nactions+=/call_action_list,name=cleave,strict=1,if=active_enemies=2\nactions+=/call_action_list,name=aoe_setup,strict_if=active_enemies>=3,if=active_enemies>=3&cooldown.any_dnd.remains<10&!death_and_decay.ticking\nactions+=/call_action_list,name=aoe_burst,strict_if=active_enemies>=3,if=active_enemies>=3&(death_and_decay.ticking||buff.death_and_decay.up&(death_knight.fwounded_targets>=(cycle_enemies*0.5)||talent.vampiric_strike&active_enemies<16))\nactions+=/call_action_list,name=aoe,strict_if=active_enemies>=3,if=active_enemies>=3&!buff.death_and_decay.up\nactions+=/run_action_list,name=san_fishing,strict_if=active_enemies=1&talent.gift_of_the_sanlayn,if=active_enemies=1&talent.gift_of_the_sanlayn&!cooldown.dark_transformation.ready&!buff.gift_of_the_sanlayn.up&buff.essence_of_the_blood_queen.remains<cooldown.dark_transformation.remains+3\nactions+=/call_action_list,name=san_st,strict=1,if=active_enemies=1&talent.vampiric_strike\nactions+=/call_action_list,name=st,strict=1,if=active_enemies=1&!talent.vampiric_strike\n\n## AOE\nactions.aoe+=/festering_strike,if=buff.festering_scythe.up\nactions.aoe+=/death_coil,cycle_targets=1,if=rune<4&active_enemies<variable.epidemic_targets&buff.gift_of_the_sanlayn.up&gcd<=1.0&fight_remains>buff.dark_transformation.remains*2\nactions.aoe+=/epidemic,if=rune<4&active_enemies>variable.epidemic_targets&buff.gift_of_the_sanlayn.up&gcd<=1.0&fight_remains>buff.dark_transformation.remains*2\nactions.aoe+=/wound_spender,cycle_targets=1,if=debuff.festering_wound.up&buff.death_and_decay.up&talent.bursting_sores&cooldown.apocalypse.remains>variable.apoc_timing\nactions.aoe+=/death_coil,cycle_targets=1,if=!variable.pooling_runic_power&active_enemies<variable.epidemic_targets\nactions.aoe+=/epidemic,if=!variable.pooling_runic_power\nactions.aoe+=/wound_spender,cycle_targets=1,if=debuff.chains_of_ice_trollbane_slow.up\nactions.aoe+=/festering_strike,cycle_targets=1,if=cooldown.apocalypse.remains<variable.apoc_timing||buff.festering_scythe.up\nactions.aoe+=/festering_strike,cycle_targets=1,if=debuff.festering_wound.stack<2\nactions.aoe+=/wound_spender,cycle_targets=1,if=debuff.festering_wound.up&cooldown.apocalypse.remains>gcd||buff.vampiric_strike.up&dot.virulent_plague.ticking\n\n## AoE Burst\nactions.aoe_burst+=/festering_strike,if=buff.festering_scythe.up\nactions.aoe_burst+=/death_and_decay,if=death_knight.fwounded_targets=active_enemies&talent.desecrate&(talent.festering_scythe&death_knight.fwounded_targets=0&buff.festering_scythe_stacks.stack<10&!buff.festering_scythe.up||!talent.festering_scythe)&(raid_event.adds.exists&raid_event.adds.remains>6&(raid_event.adds.remains<10||!buff.death_and_decay.up)||!raid_event.adds.exists||fight_remains>6&fight_remains<10)\nactions.aoe_burst+=/death_coil,cycle_targets=1,if=!buff.vampiric_strike.up&active_enemies<variable.epidemic_targets&(!talent.bursting_sores||talent.bursting_sores&death_knight.fwounded_targets<active_enemies&death_knight.fwounded_targets<active_enemies*0.4&buff.sudden_doom.up||buff.sudden_doom.up&(talent.doomed_bidding&talent.menacing_magus||talent.rotten_touch||debuff.death_rot.remains<gcd)||rune<2)||(rune<4||active_enemies<4||boss)&active_enemies<variable.epidemic_targets&buff.gift_of_the_sanlayn.up&gcd<=1.0&(fight_remains>buff.dark_transformation.remains*2)\nactions.aoe_burst+=/epidemic,if=!buff.vampiric_strike.up&(!talent.bursting_sores||talent.bursting_sores&death_knight.fwounded_targets<active_enemies&death_knight.fwounded_targets<active_enemies*0.4&buff.sudden_doom.up||buff.sudden_doom.up&(buff.a_feast_of_souls.up||debuff.death_rot.remains<gcd||debuff.death_rot.stack<10)||rune<2)||(rune<4||boss)&active_enemies>variable.epidemic_targets&buff.gift_of_the_sanlayn.up&gcd<=1.0&fight_remains>buff.dark_transformation.remains*2\nactions.aoe_burst+=/wound_spender,cycle_targets=1,if=debuff.chains_of_ice_trollbane_slow.up\nactions.aoe_burst+=/wound_spender,cycle_targets=1,if=debuff.festering_wound.up||buff.vampiric_strike.up||buff.death_and_decay.up\nactions.aoe_burst+=/death_coil,cycle_targets=1,if=active_enemies<variable.epidemic_targets\nactions.aoe_burst+=/epidemic,if=variable.epidemic_targets<active_enemies\nactions.aoe_burst+=/festering_strike,cycle_targets=1,if=debuff.festering_wound.stack<=2\nactions.aoe_burst+=/wound_spender,cycle_targets=1\n\n## AoE Setup\nactions.aoe_setup+=/festering_strike,if=buff.festering_scythe.up\n## [Syrif] Added fallback use based on time to max charges; this is in case you have target swaps enabled but...aren't swapping targets to apply Festering Wounds.\nactions.aoe_setup+=/any_dnd,if=!death_and_decay.ticking&(full_recharge_time<2*gcd.max||death_knight.fwounded_targets>=cycle_enemies&(rune>3||runic_power<30)||talent.desecrate&(talent.festering_scythe&death_knight.fwounded_targets=0&buff.festering_scythe_stacks.stack<10&!buff.festering_scythe.up||!talent.festering_scythe))\nactions.aoe_setup+=/festering_strike,cycle_targets=1,if=death_knight.fwounded_targets=0&cooldown.apocalypse.remains<gcd&(cooldown.dark_transformation.remains&cooldown.unholy_assault.remains||cooldown.unholy_assault.remains||!talent.unholy_assault)\nactions.aoe_setup+=/wound_spender,if=debuff.chains_of_ice_trollbane_slow.up\nactions.aoe_setup+=/death_coil,cycle_targets=1,if=!variable.pooling_runic_power&active_enemies<variable.epidemic_targets&rune<4\nactions.aoe_setup+=/epidemic,if=!variable.pooling_runic_power&variable.epidemic_targets<=active_enemies&rune<4\nactions.aoe_setup+=/any_dnd,if=!buff.death_and_decay.up&(!talent.bursting_sores||death_knight.fwounded_targets=active_enemies||death_knight.fwounded_targets>=8||raid_event.adds.exists&raid_event.adds.remains<=11&raid_event.adds.remains>5||!buff.death_and_decay.up&talent.defile)\nactions.aoe_setup+=/death_coil,cycle_targets=1,if=!variable.pooling_runic_power&active_enemies<variable.epidemic_targets&(buff.sudden_doom.up||death_knight.fwounded_targets=active_enemies||death_knight.fwounded_targets>=8)\nactions.aoe_setup+=/epidemic,if=!variable.pooling_runic_power&variable.epidemic_targets<=active_enemies&(buff.sudden_doom.up||death_knight.fwounded_targets=active_enemies||death_knight.fwounded_targets>=8)\nactions.aoe_setup+=/death_coil,cycle_targets=1,if=!variable.pooling_runic_power&active_enemies<variable.epidemic_targets\nactions.aoe_setup+=/epidemic,if=!variable.pooling_runic_power\nactions.aoe_setup+=/festering_strike,cycle_targets=1,if=death_knight.fwounded_targets<8&!death_knight.fwounded_targets=active_enemies\nactions.aoe_setup+=/wound_spender,cycle_targets=1,if=buff.vampiric_strike.up\n\n# Non-Sanlayn CDs\nactions.cds+=/dark_transformation,if=variable.st_planning||boss&fight_remains<20\nactions.cds+=/unholy_assault,if=variable.st_planning&(cooldown.apocalypse.remains<gcd*1.5||!talent.apocalypse||active_enemies>=2&buff.dark_transformation.up)||boss&fight_remains<20\nactions.cds+=/apocalypse,if=variable.st_planning||boss&fight_remains<20\nactions.cds+=/outbreak,if=(dot.virulent_plague.refreshable||talent.superstrain&(dot.frost_fever.refreshable||dot.blood_plague.refreshable))&(!talent.unholy_blight||talent.plaguebringer)&(!talent.raise_abomination||!pet.abomination.active&talent.raise_abomination&cooldown.raise_abomination.remains>dot.virulent_plague.ticks_remain*3)\n\n# Non-Sanlayn CDs AoE\nactions.cds_aoe+=/unholy_assault,cycle_targets=1,if=variable.adds_remain\nactions.cds_aoe+=/dark_transformation,if=variable.adds_remain&(death_and_decay.ticking||cooldown.death_and_decay.remains<3)\nactions.cds_aoe+=/apocalypse,cycle_targets=1,if=variable.adds_remain&(death_and_decay.ticking||cooldown.death_and_decay.remains<3||rune<3||set_bonus.tww3_rider_of_the_apocalypse_2pc)\n## [Syrif] - Internal expression to handle SimC only checking 1 spell for CD\nactions.cds_aoe+=/outbreak,if=dot.virulent_plague.ticks_remain<5&dot.virulent_plague.refreshable&(!talent.unholy_blight||talent.unholy_blight&dark_transformation_cooldown)&(!talent.raise_abomination||talent.raise_abomination&cooldown.raise_abomination.remains)\n\n# Sanlayn CDs AoE\nactions.cds_aoe_san+=/dark_transformation,if=variable.adds_remain&(buff.death_and_decay.up||active_enemies<=3)\nactions.cds_aoe_san+=/unholy_assault,cycle_targets=1,if=variable.adds_remain&buff.dark_transformation.up&buff.dark_transformation.remains<12\nactions.cds_aoe_san+=/apocalypse,cycle_targets=1,if=variable.adds_remain&(buff.death_and_decay.up||active_enemies<=3||rune<3)\nactions.cds_aoe_san+=/outbreak,if=(dot.virulent_plague.ticks_remain<5||set_bonus.tww2_4pc&talent.superstrain&dot.frost_fever.ticks_remain<5&!pet.abomination.active)&(talent.unholy_blight&!cooldown.dark_transformation.ready||!talent.unholy_blight)&(dot.virulent_plague.refreshable||talent.morbidity&!buff.gift_of_the_sanlayn.up&talent.superstrain&dot.frost_fever.refreshable&dot.blood_plague.refreshable)&(!dot.virulent_plague.ticking&variable.epidemic_targets<active_enemies||(!talent.unholy_blight||talent.unholy_blight&cooldown.dark_transformation.remains>5)&(!talent.raise_abomination||talent.raise_abomination&cooldown.raise_abomination.remains>5))||buff.visceral_strength_unholy.up\n\n# Sanlayn CDs Cleave\nactions.cds_cleave_san+=/dark_transformation\nactions.cds_cleave_san+=/apocalypse,cycle_targets=1\nactions.cds_cleave_san+=/unholy_assault,cycle_targets=1,if=buff.dark_transformation.up&buff.dark_transformation.remains<12||boss&fight_remains<20||raid_event.adds.exists&raid_event.adds.remains<20\nactions.cds_cleave_san+=/outbreak,cycle_targets=1,if=(dot.virulent_plague.refreshable||talent.morbidity&buff.infliction_of_sorrow.up&talent.superstrain&dot.frost_fever.refreshable&dot.blood_plague.refreshable)&(!talent.unholy_blight||talent.unholy_blight&cooldown.dark_transformation.remains>6)&(!talent.raise_abomination||talent.raise_abomination&cooldown.raise_abomination.remains>6)||buff.visceral_strength_unholy.up\n\n# Sanlayn CDs ST\nactions.cds_san+=/dark_transformation,if=variable.st_planning||fight_remains<20\nactions.cds_san+=/apocalypse,if=variable.st_planning||fight_remains<20\nactions.cds_san+=/unholy_assault,if=variable.st_planning&(buff.dark_transformation.up&buff.dark_transformation.remains<12)||fight_remains<20\nactions.cds_san+=/outbreak,cycle_targets=1,if=(dot.virulent_plague.refreshable||talent.morbidity&buff.infliction_of_sorrow.up&talent.superstrain&dot.frost_fever.refreshable&dot.blood_plague.refreshable)&(!talent.unholy_blight||talent.unholy_blight&cooldown.dark_transformation.remains>6)&(!talent.raise_abomination||talent.raise_abomination&cooldown.raise_abomination.remains>6)||buff.visceral_strength_unholy.up\nactions.cds_san+=/outbreak,cycle_targets=1,if=talent.superstrain&set_bonus.tww2_4pc&dot.frost_fever.refreshable&(!talent.unholy_blight||talent.unholy_blight&cooldown.dark_transformation.remains>6)&(!talent.raise_abomination||talent.raise_abomination&cooldown.raise_abomination.remains>6)\n\n# Shared CDs\nactions.cds_shared+=/potion,if=(variable.st_planning||variable.adds_remain)&(!talent.summon_gargoyle||cooldown.summon_gargoyle.remains>60)&(buff.dark_transformation.up&30>=buff.dark_transformation.remains||!talent.vampiric_strike&pet.army_ghoul.active&pet.army_ghoul.remains<=30||!talent.vampiric_strike&pet.apoc_ghoul.active&pet.apoc_ghoul.remains<=30||!talent.vampiric_strike&pet.abomination.active&pet.abomination.remains<=30)||fight_remains<=30\n## actions.cds_shared+=/invoke_external_buff,name=power_infusion,if=active_enemies>=1&(variable.st_planning||variable.adds_remain)&(pet.gargoyle.active&pet.gargoyle.remains<=22||!talent.summon_gargoyle&talent.army_of_the_dead&(talent.raise_abomination&pet.abomination.active&pet.abomination.remains<18||!talent.raise_abomination&pet.army_ghoul.active&pet.army_ghoul.remains<=18)||!talent.summon_gargoyle&!talent.army_of_the_dead&buff.dark_transformation.up||!talent.summon_gargoyle&buff.dark_transformation.up||!pet.gargoyle.active&cooldown.summon_gargoyle.remains+10>cooldown.invoke_external_buff_power_infusion.duration||active_enemies>=3&(buff.dark_transformation.up||death_and_decay.ticking))\nactions.cds_shared+=/army_of_the_dead,if=(variable.st_planning||variable.adds_remain)&(talent.commander_of_the_dead&cooldown.dark_transformation.remains<5||!talent.commander_of_the_dead&active_enemies>=1)||fight_remains<35\nactions.cds_shared+=/raise_abomination,if=(variable.st_planning||variable.adds_remain)&(!talent.vampiric_strike||(pet.apoc_ghoul.active||!talent.apocalypse))||fight_remains<30\nactions.cds_shared+=/legion_of_souls,if=(variable.st_planning||variable.adds_remain)&(death_knight.fwounded_targets<active_enemies||(cooldown.apocalypse.remains<3||cooldown.dark_transformation.remains<3))\nactions.cds_shared+=/summon_gargoyle,use_off_gcd=1,if=(variable.st_planning||variable.adds_remain)&(buff.commander_of_the_dead.up||!talent.commander_of_the_dead&active_enemies>=1)||fight_remains<25\nactions.cds_shared+=/antimagic_shell,if=death_knight.ams_absorb_percent>0&runic_power<30&rune<2\nactions.cds_shared+=/desecrate,if=active_enemies>=2&((!raid_event.adds.exists&fight_remains<6||raid_event.adds.exists&raid_event.adds.remains<6)||(!talent.festering_scythe||buff.festering_scythe_stacks.stack<active_enemies&!buff.festering_scythe.up)&(active_enemies>1&death_knight.fwounded_targets<active_enemies||death_knight.fwounded_targets=active_enemies||death_knight.fwounded_targets=0&talent.festering_scythe&!buff.festering_scythe.up&buff.festering_scythe_stacks.stack<10))\n\n# Cleave\nactions.cleave+=/any_dnd,if=!death_and_decay.ticking&variable.adds_remain||talent.gift_of_the_sanlayn\nactions.cleave+=/death_coil,if=!variable.pooling_runic_power&talent.improved_death_coil\nactions.cleave+=/wound_spender,if=buff.vampiric_strike.up\nactions.cleave+=/death_coil,if=!variable.pooling_runic_power&!talent.improved_death_coil\n## [Hekili] Revised to allow Festering Strike with more wounds active; change is neutral/positive in sim and reduces wait time.\n## actions.cleave+=/festering_strike,cycle_targets=1,if=buff.vampiric_strike.down&!variable.pop_wounds&debuff.festering_wound.stack<2||buff.festering_scythe.up\nactions.cleave+=/festering_strike,cycle_targets=1,if=buff.vampiric_strike.down&!variable.pop_wounds&debuff.festering_wound.stack<4||buff.festering_scythe.up\n## [Hekili] Revised to allow Festering Strike with more wounds active; entry is typically not reached in SimC.\nactions.cleave+=/festering_strike,cycle_targets=1,if=buff.vampiric_strike.down&cooldown.apocalypse.remains<variable.apoc_timing&debuff.festering_wound.stack<4\nactions.cleave+=/wound_spender,if=variable.pop_wounds\n\n## San'layn Fishing\nactions.san_fishing+=/antimagic_shell,if=death_knight.ams_absorb_percent>0&runic_power<40\nactions.san_fishing+=/wound_spender,if=buff.infliction_of_sorrow.up\nactions.san_fishing+=/any_dnd,if=!buff.death_and_decay.up&!buff.vampiric_strike.up\nactions.san_fishing+=/death_coil,if=buff.sudden_doom.up&talent.doomed_bidding||set_bonus.tww2_4pc&buff.essence_of_the_blood_queen.at_max_stacks&talent.frenzied_bloodthirst&!buff.vampiric_strike.up\nactions.san_fishing+=/soul_reaper,if=target.health.pct<=35&fight_remains>5\nactions.san_fishing+=/death_coil,if=!buff.vampiric_strike.up\nactions.san_fishing+=/wound_spender,if=(debuff.festering_wound.stack>=3-pet.abomination.active&cooldown.apocalypse.remains>variable.apoc_timing)||buff.vampiric_strike.up\nactions.san_fishing+=/festering_strike,if=debuff.festering_wound.stack<3-pet.abomination.active\n\n# San'layn Single Target\nactions.san_st+=/wound_spender,if=buff.infliction_of_sorrow.up\nactions.san_st+=/festering_strike,if=buff.festering_scythe.up&(!raid_event.adds.exists||!raid_event.adds.in||raid_event.adds.in>11||raid_event.pull.has_boss&raid_event.adds.in>11)\nactions.san_st+=/death_coil,if=buff.sudden_doom.up&buff.gift_of_the_sanlayn.remains&(talent.doomed_bidding||talent.rotten_touch)||rune<3&!buff.runic_corruption.up||set_bonus.tww2_4pc&runic_power>80||buff.gift_of_the_sanlayn.up&buff.essence_of_the_blood_queen.at_max_stacks&talent.frenzied_bloodthirst&set_bonus.tww2_4pc&buff.winning_streak_unholy.at_max_stacks&rune<=3&buff.essence_of_the_blood_queen.remains>3\nactions.san_st+=/wound_spender,if=buff.vampiric_strike.up&debuff.festering_wound.stack>=1||buff.gift_of_the_sanlayn.up||talent.gift_of_the_sanlayn&buff.dark_transformation.up&buff.dark_transformation.remains<gcd\nactions.san_st+=/soul_reaper,if=target.health.pct<=35&!buff.gift_of_the_sanlayn.up&fight_remains>5\nactions.san_st+=/festering_strike,if=(debuff.festering_wound.stack=0&cooldown.apocalypse.remains<variable.apoc_timing)||!buff.dark_transformation.up&cooldown.dark_transformation.remains<10&debuff.festering_wound.stack<=3&(rune>4||runic_power<80)||(talent.gift_of_the_sanlayn&!buff.gift_of_the_sanlayn.up||!talent.gift_of_the_sanlayn)&debuff.festering_wound.stack<=1\nactions.san_st+=/wound_spender,if=(!talent.apocalypse||cooldown.apocalypse.remains>variable.apoc_timing)&(cooldown.dark_transformation.remains>5&debuff.festering_wound.stack>=3-pet.abomination.active||buff.vampiric_strike.up)\nactions.san_st+=/death_coil,if=!variable.pooling_runic_power&debuff.death_rot.remains<gcd||(buff.sudden_doom.up&debuff.festering_wound.stack>=1||rune<2)\nactions.san_st+=/wound_spender,if=debuff.festering_wound.stack>4\nactions.san_st+=/death_coil,if=!variable.pooling_runic_power\nactions.san_st+=/wound_spender,if=(!talent.apocalypse||cooldown.apocalypse.remains>variable.apoc_timing)&rune>=4\n\n# San'layn Trinkets\n## actions.san_trinkets=do_treacherous_transmitter_task,use_off_gcd=1,if=buff.errant_manaforge_emission.up&buff.dark_transformation.up&buff.errant_manaforge_emission.remains<2||buff.cryptic_instructions.up&buff.dark_transformation.up&buff.cryptic_instructions.remains<2||buff.realigning_nexus_convergence_divergence.up&buff.dark_transformation.up&buff.realigning_nexus_convergence_divergence.remains<2\nactions.san_trinkets+=/use_item,name=treacherous_transmitter,if=(variable.adds_remain||variable.st_planning)&cooldown.dark_transformation.remains<10\nactions.san_trinkets+=/use_item,name=cursed_stone_idol,if=pet.apoc_ghoul.active||!talent.apocalypse&buff.dark_transformation.up||cooldown.apocalypse.ready\nactions.san_trinkets+=/use_item,slot=trinket1,if=(buff.latent_energy.stack>=8||!trinket.1.is.unyielding_netherprism)&variable.trinket_1_buffs&(buff.dark_transformation.up&buff.dark_transformation.remains<variable.trinket_1_duration*0.73&(variable.trinket_priority=1||trinket.2.cooldown.remains||!trinket.2.has_cooldown))||variable.trinket_1_duration>=fight_remains\nactions.san_trinkets+=/use_item,slot=trinket2,if=(buff.latent_energy.stack>=8||!trinket.2.is.unyielding_netherprism)&variable.trinket_2_buffs&(buff.dark_transformation.up&buff.dark_transformation.remains<variable.trinket_2_duration*0.73&(variable.trinket_priority=2||trinket.1.cooldown.remains||!trinket.1.has_cooldown))||variable.trinket_2_duration>=fight_remains\nactions.san_trinkets+=/use_item,slot=trinket1,if=!variable.trinket_1_buffs&(trinket.1.cast_time>0&!buff.gift_of_the_sanlayn.up||!trinket.1.cast_time>0)&(variable.damage_trinket_priority=1||trinket.2.cooldown.remains||!trinket.2.has_cooldown||!talent.summon_gargoyle&!talent.army_of_the_dead&!talent.raise_abomination||!talent.summon_gargoyle&talent.army_of_the_dead&(!talent.raise_abomination&cooldown.army_of_the_dead.remains>20||talent.raise_abomination&cooldown.raise_abomination.remains>20)||!talent.summon_gargoyle&!talent.army_of_the_dead&!talent.raise_abomination&cooldown.dark_transformation.remains>20||talent.summon_gargoyle&cooldown.summon_gargoyle.remains>20&!pet.gargoyle.active)||fight_remains<15\nactions.san_trinkets+=/use_item,slot=trinket2,if=!variable.trinket_2_buffs&(trinket.2.cast_time>0&!buff.gift_of_the_sanlayn.up||!trinket.2.cast_time>0)&(variable.damage_trinket_priority=2||trinket.1.cooldown.remains||!trinket.1.has_cooldown||!talent.summon_gargoyle&!talent.army_of_the_dead&!talent.raise_abomination||!talent.summon_gargoyle&talent.army_of_the_dead&(!talent.raise_abomination&cooldown.army_of_the_dead.remains>20||talent.raise_abomination&cooldown.raise_abomination.remains>20)||!talent.summon_gargoyle&!talent.army_of_the_dead&!talent.raise_abomination&cooldown.dark_transformation.remains>20||talent.summon_gargoyle&cooldown.summon_gargoyle.remains>20&!pet.gargoyle.active)||fight_remains<15\nactions.san_trinkets+=/use_item,slot=main_hand,if=(!variable.trinket_1_buffs&!variable.trinket_2_buffs||trinket.1.cooldown.remains>20&!variable.trinket_2_buffs||trinket.2.cooldown.remains>20&!variable.trinket_1_buffs||trinket.1.cooldown.remains>20&trinket.2.cooldown.remains>20)&(buff.dark_transformation.up&buff.dark_transformation.remains>10)&(!talent.raise_abomination&!talent.army_of_the_dead||!talent.raise_abomination&talent.army_of_the_dead&pet.army_ghoul.active||talent.raise_abomination&pet.abomination.active||(variable.trinket_1_buffs||variable.trinket_2_buffs||fight_remains<15))\n\n## Single Target Non-San'layn\nactions.st+=/soul_reaper,if=target.health.pct<=35&target.time_to_die>5\nactions.st+=/wound_spender,if=debuff.chains_of_ice_trollbane_slow.up\nactions.st+=/any_dnd,if=talent.unholy_ground&!buff.death_and_decay.up&(pet.apoc_ghoul.active||pet.abomination.active||pet.gargoyle.active)\nactions.st+=/death_coil,if=!variable.pooling_runic_power&variable.spend_rp||fight_remains<10\nactions.st+=/festering_strike,if=debuff.festering_wound.stack<4&(!variable.pop_wounds||buff.festering_scythe.up)\nactions.st+=/wound_spender,if=variable.pop_wounds\nactions.st+=/death_coil,if=!variable.pooling_runic_power\nactions.st+=/wound_spender,if=!variable.pop_wounds&debuff.festering_wound.stack>=4\n\n# Non-San'layn Trinkets\n## actions.trinkets=do_treacherous_transmitter_task,use_off_gcd=1,if=buff.errant_manaforge_emission.up&(pet.apoc_ghoul.active||!talent.apocalypse&buff.dark_transformation.up)||buff.cryptic_instructions.up&(pet.apoc_ghoul.active||!talent.apocalypse&buff.dark_transformation.up)||buff.realigning_nexus_convergence_divergence.up&(pet.apoc_ghoul.active||!talent.apocalypse&buff.dark_transformation.up)\nactions.trinkets+=/use_item,name=treacherous_transmitter,if=(variable.adds_remain||variable.st_planning)&cooldown.dark_transformation.remains<10\nactions.trinkets+=/use_item,slot=trinket1,if=(buff.latent_energy.stack>=8||!trinket.1.is.unyielding_netherprism)&variable.trinket_1_buffs&(variable.trinket_priority=1||!trinket.2.has_cooldown||trinket.2.cooldown.remains>20)&(!talent.apocalypse&buff.dark_transformation.up||pet.apoc_ghoul.active&pet.apoc_ghoul.remains<=variable.trinket_1_duration&pet.apoc_ghoul.remains>5)&(talent.army_of_the_dead&!talent.raise_abomination&pet.army_ghoul.active&pet.army_ghoul.remains>10||talent.raise_abomination&pet.abomination.active&pet.abomination.remains>10||talent.legion_of_souls||!talent.raise_abomination&!talent.apocalypse&buff.dark_transformation.up||variable.trinket_2_buffs&trinket.2.cooldown.remains)||fight_remains<=variable.trinket_1_duration\nactions.trinkets+=/use_item,slot=trinket2,if=(buff.latent_energy.stack>=8||!trinket.2.is.unyielding_netherprism)&variable.trinket_2_buffs&(variable.trinket_priority=2||!trinket.1.has_cooldown||trinket.1.cooldown.remains>20)&(!talent.apocalypse&buff.dark_transformation.up||pet.apoc_ghoul.active&pet.apoc_ghoul.remains<=variable.trinket_2_duration&pet.apoc_ghoul.remains>5)&(talent.army_of_the_dead&!talent.raise_abomination&pet.army_ghoul.active&pet.army_ghoul.remains>10||talent.raise_abomination&pet.abomination.active&pet.abomination.remains>10||talent.legion_of_souls||!talent.raise_abomination&!talent.apocalypse&buff.dark_transformation.up||variable.trinket_1_buffs&trinket.1.cooldown.remains)||fight_remains<=variable.trinket_2_duration\nactions.trinkets+=/use_item,slot=trinket1,if=!variable.trinket_1_buffs&(variable.damage_trinket_priority=1||trinket.2.cooldown.remains||!trinket.2.has_cooldown||!talent.summon_gargoyle&!talent.army_of_the_dead&!talent.raise_abomination||!talent.summon_gargoyle&talent.army_of_the_dead&(!talent.raise_abomination&cooldown.army_of_the_dead.remains>20||talent.raise_abomination&cooldown.raise_abomination.remains>20)||!talent.summon_gargoyle&!talent.army_of_the_dead&!talent.raise_abomination&cooldown.dark_transformation.remains>20||talent.summon_gargoyle&cooldown.summon_gargoyle.remains>20&!pet.gargoyle.active)||fight_remains<15\nactions.trinkets+=/use_item,slot=trinket2,if=!variable.trinket_2_buffs&(variable.damage_trinket_priority=2||trinket.1.cooldown.remains||!trinket.1.has_cooldown||!talent.summon_gargoyle&!talent.army_of_the_dead&!talent.raise_abomination||!talent.summon_gargoyle&talent.army_of_the_dead&(!talent.raise_abomination&cooldown.army_of_the_dead.remains>20||talent.raise_abomination&cooldown.raise_abomination.remains>20)||!talent.summon_gargoyle&!talent.army_of_the_dead&!talent.raise_abomination&cooldown.dark_transformation.remains>20||talent.summon_gargoyle&cooldown.summon_gargoyle.remains>20&!pet.gargoyle.active)||fight_remains<15\nactions.trinkets+=/use_item,slot=main_hand,if=(!variable.trinket_1_buffs&!variable.trinket_2_buffs||trinket.1.cooldown.remains&!variable.trinket_2_buffs||trinket.2.cooldown.remains&!variable.trinket_1_buffs||trinket.1.cooldown.remains&trinket.2.cooldown.remains)&(pet.apoc_ghoul.active&pet.apoc_ghoul.remains<=18||!talent.apocalypse&buff.dark_transformation.up)&((trinket.1.cooldown.duration=90||trinket.2.cooldown.duration=90)||!talent.raise_abomination&!talent.army_of_the_dead||!talent.raise_abomination&talent.army_of_the_dead&pet.army_ghoul.active||talent.raise_abomination&pet.abomination.active)",
},
["Frost DK"] = {
["source"] = "https://github.com/simulationcraft/simc/blob/thewarwithin/ActionPriorityLists/default/deathknight_frost.simc",
["builtIn"] = true,
["date"] = 20250826,
["author"] = "SimC",
["desc"] = "-- The War Within Season 3\n2025-08-26: APL Sync - 8aa4db9\n2025-08-17: Re-revise target swaps\n2025-08-12: APL Sync - 22b0c5d\n2025-08-06: Initial APL",
["lists"] = {
["single_target"] = {
{
["enabled"] = true,
["action"] = "obliterate",
["description"] = "Single Target Rotation",
["criteria"] = "buff.killing_machine.stack = 2 || ( buff.killing_machine.up & rune >= 3 )",
},
{
["enabled"] = true,
["criteria"] = "buff.rime.up & talent.frostbound_will.enabled",
["action"] = "howling_blast",
},
{
["enabled"] = true,
["criteria"] = "debuff.razorice.stack = 5 & talent.shattering_blade.enabled & ! variable.rp_pooling",
["action"] = "frost_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "buff.rime.up",
["action"] = "howling_blast",
},
{
["enabled"] = true,
["criteria"] = "! talent.shattering_blade.enabled & ! variable.rp_pooling & runic_power.deficit < 30",
["action"] = "frost_strike",
},
{
["enabled"] = true,
["criteria"] = "buff.killing_machine.up & ! variable.rune_pooling",
["action"] = "obliterate",
},
{
["enabled"] = true,
["criteria"] = "! variable.rp_pooling",
["action"] = "frost_strike",
},
{
["enabled"] = true,
["criteria"] = "! variable.rune_pooling & ! ( talent.obliteration.enabled & buff.pillar_of_frost.up )",
["action"] = "obliterate",
},
{
["enabled"] = true,
["criteria"] = "! buff.killing_machine.up & ( talent.obliteration.enabled & buff.pillar_of_frost.up )",
["action"] = "howling_blast",
},
},
["aoe"] = {
{
["enabled"] = true,
["action"] = "frostscythe",
["description"] = "Aoe Rotation",
["criteria"] = "( buff.killing_machine.stack = 2 || ( buff.killing_machine.up & rune >= 3 ) ) & active_enemies >= variable.frostscythe_prio",
},
{
["enabled"] = true,
["criteria"] = "buff.killing_machine.stack = 2 || ( buff.killing_machine.up & rune >= 3 )",
["action"] = "obliterate",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "buff.rime.up & talent.frostbound_will.enabled || ! dot.frost_fever.ticking",
["action"] = "howling_blast",
},
{
["enabled"] = true,
["criteria"] = "debuff.razorice.stack = 5 & buff.frostbane.up",
["action"] = "frost_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "debuff.razorice.stack = 5 & talent.shattering_blade.enabled & active_enemies < 5 & ! variable.rp_pooling & ! talent.frostbane.enabled",
["action"] = "frost_strike",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "buff.killing_machine.up & ! variable.rune_pooling & active_enemies >= variable.frostscythe_prio",
["action"] = "frostscythe",
},
{
["enabled"] = true,
["criteria"] = "buff.killing_machine.up & ! variable.rune_pooling",
["action"] = "obliterate",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "buff.rime.up",
["action"] = "howling_blast",
},
{
["enabled"] = true,
["criteria"] = "! variable.rp_pooling",
["action"] = "glacial_advance",
},
{
["enabled"] = true,
["criteria"] = "! variable.rune_pooling & ! ( talent.obliteration.enabled & buff.pillar_of_frost.up ) & active_enemies >= variable.frostscythe_prio",
["action"] = "frostscythe",
},
{
["enabled"] = true,
["criteria"] = "! variable.rune_pooling & ! ( talent.obliteration.enabled & buff.pillar_of_frost.up )",
["action"] = "obliterate",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "! buff.killing_machine.up & ( talent.obliteration.enabled & buff.pillar_of_frost.up )",
["action"] = "howling_blast",
},
},
["default"] = {
{
["action"] = "mind_freeze",
["enabled"] = true,
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( talent.pillar_of_frost.enabled & buff.pillar_of_frost.up ) || ! talent.pillar_of_frost.enabled || fight_remains < 20",
["var_name"] = "cooldown_check",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "( buff.pillar_of_frost.remains < gcd.max || ( buff.unholy_strength.up & buff.unholy_strength.remains < gcd.max ) || ( talent.bonegrinder.rank = 2 & buff.bonegrinder_frost.up & buff.bonegrinder_frost.remains < gcd.max ) ) & ( active_enemies > 1 || debuff.razorice.stack = 5 || talent.shattering_blade.enabled )",
["var_name"] = "fwf_buffs",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "hero_tree.deathbringer & cooldown.reapers_mark.remains < 6 & rune < 3",
["var_name"] = "rune_pooling",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "talent.breath_of_sindragosa.enabled & cooldown.breath_of_sindragosa.remains < 4 * gcd.max & runic_power < 60 + ( 35 + 5 * buff.icy_onslaught.up ) - ( 10 * rune )",
["var_name"] = "rp_pooling",
},
{
["enabled"] = true,
["op"] = "set",
["description"] = "Frostscythe is equal at 3 targets, except with Rider 4pc which brings Obliterate higher at 3, unless cleaving strikes is up",
["var_name"] = "frostscythe_prio",
["value"] = "4",
["action"] = "variable",
["value_else"] = "3",
["criteria"] = "set_bonus.tww3_rider_of_the_apocalypse_4pc > 0 & ! ( talent.cleaving_strikes.enabled & buff.remorseless_winter.up )",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "talent.breath_of_sindragosa.enabled & ( cooldown.breath_of_sindragosa.remains > 20 || ( cooldown.breath_of_sindragosa.up & runic_power >= ( 60 - 20 * hero_tree.deathbringer ) ) )",
["var_name"] = "breath_of_sindragosa_check",
},
{
["enabled"] = true,
["action"] = "unyielding_netherprism",
["criteria"] = "buff.latent_energy.stack > 8 & buff.pillar_of_frost.remains & ( ! talent.breath_of_sindragosa.enabled || buff.breath_of_sindragosa.remains )",
["name"] = "unyielding_netherprism",
},
{
["enabled"] = true,
["criteria"] = "! trinket.t1.cast_time > 0 & variable.trinket_1_buffs & ! variable.trinket_1_manual & buff.pillar_of_frost.remains & ( ! trinket.t2.has_cooldown || trinket.t2.cooldown.remains || variable.trinket_priority = 1 )",
["action"] = "trinket1",
["slot"] = "trinket1",
},
{
["enabled"] = true,
["criteria"] = "! trinket.t2.cast_time > 0 & variable.trinket_2_buffs & ! variable.trinket_2_manual & buff.pillar_of_frost.remains & ( ! trinket.t1.has_cooldown || trinket.t1.cooldown.remains || variable.trinket_priority = 2 )",
["action"] = "trinket2",
["slot"] = "trinket2",
},
{
["enabled"] = true,
["action"] = "trinket1",
["slot"] = "trinket1",
["description"] = "Channeled buff trinkets will be used before cooldowns",
["criteria"] = "trinket.t1.cast_time > 0 & ( ! trinket.t2.is.unyielding_netherprism || buff.latent_energy.stack < 8 ) & ( ! hero_tree.rider_of_the_apocalypse || cooldown.frostwyrms_fury.remains ) & variable.trinket_1_buffs & ! variable.trinket_1_manual & cooldown.pillar_of_frost.remains < trinket.t1.cast_time & ( ! talent.breath_of_sindragosa.enabled || variable.breath_of_sindragosa_check ) & ( ! trinket.t2.has_cooldown || trinket.t2.cooldown.remains || variable.trinket_priority = 1 ) || variable.trinket_1_duration >= fight_remains",
},
{
["enabled"] = true,
["criteria"] = "trinket.t2.cast_time > 0 & ( ! trinket.t1.is.unyielding_netherprism || buff.latent_energy.stack < 8 ) & ( ! hero_tree.rider_of_the_apocalypse || cooldown.frostwyrms_fury.remains ) & variable.trinket_2_buffs & ! variable.trinket_2_manual & cooldown.pillar_of_frost.remains < trinket.t2.cast_time & ( ! talent.breath_of_sindragosa.enabled || variable.breath_of_sindragosa_check ) & ( ! trinket.t1.has_cooldown || trinket.t1.cooldown.remains || variable.trinket_priority = 2 ) || variable.trinket_2_duration >= fight_remains",
["action"] = "trinket2",
["slot"] = "trinket2",
},
{
["enabled"] = true,
["action"] = "trinket1",
["slot"] = "trinket1",
["description"] = "If only one on use trinket provides a buff, use the other on cooldown. Or if neither trinket provides a buff, use both on cooldown.",
["criteria"] = "! variable.trinket_1_buffs & ! variable.trinket_1_manual & ( variable.damage_trinket_priority = 1 || ( ! trinket.t2.has_cooldown || trinket.t2.cooldown.remains ) ) & ( ( trinket.t1.cast_time > 0 & ( ! talent.breath_of_sindragosa.enabled || ! buff.breath_of_sindragosa.up ) & ! buff.pillar_of_frost.up || ! trinket.t1.cast_time > 0 ) & ( ! variable.trinket_2_buffs || cooldown.pillar_of_frost.remains > 20 ) || ! talent.pillar_of_frost.enabled ) || fight_remains < 15",
},
{
["enabled"] = true,
["criteria"] = "! variable.trinket_2_buffs & ! variable.trinket_2_manual & ( variable.damage_trinket_priority = 2 || ( ! trinket.t1.has_cooldown || trinket.t1.cooldown.remains ) ) & ( ( trinket.t2.cast_time > 0 & ( ! talent.breath_of_sindragosa.enabled || ! buff.breath_of_sindragosa.up ) & ! buff.pillar_of_frost.up || ! trinket.t2.cast_time > 0 ) & ( ! variable.trinket_1_buffs || cooldown.pillar_of_frost.remains > 20 ) || ! talent.pillar_of_frost.enabled ) || fight_remains < 15",
["action"] = "trinket2",
["slot"] = "trinket2",
},
{
["enabled"] = true,
["criteria"] = "buff.pillar_of_frost.up || ( buff.breath_of_sindragosa.up & cooldown.pillar_of_frost.remains ) || ( variable.trinket_1_buffs & variable.trinket_2_buffs & ( trinket.t1.cooldown.remains < cooldown.pillar_of_frost.remains || trinket.t2.cooldown.remains < cooldown.pillar_of_frost.remains ) & cooldown.pillar_of_frost.remains > 20 ) || fight_remains < 15",
["action"] = "main_hand",
["slot"] = "main_hand",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "potion",
["criteria"] = "variable.cooldown_check || fight_remains < 25",
},
{
["enabled"] = true,
["criteria"] = "( active_enemies > 1 || talent.gathering_storm.enabled ) || ( buff.gathering_storm.stack = 10 & buff.remorseless_winter.remains < gcd.max ) & fight_remains > 10",
["action"] = "remorseless_winter",
},
{
["enabled"] = true,
["criteria"] = "hero_tree.rider_of_the_apocalypse & talent.apocalypse_now.enabled & ( cooldown.pillar_of_frost.remains < gcd.max || fight_remains < 20 ) & ! talent.breath_of_sindragosa.enabled",
["action"] = "frostwyrms_fury",
},
{
["enabled"] = true,
["criteria"] = "hero_tree.rider_of_the_apocalypse & talent.apocalypse_now.enabled & ( cooldown.pillar_of_frost.remains < gcd.max || fight_remains < 20 ) & talent.breath_of_sindragosa.enabled & runic_power >= 60",
["action"] = "frostwyrms_fury",
},
{
["enabled"] = true,
["criteria"] = "! talent.breath_of_sindragosa.enabled & ( ! hero_tree.deathbringer || rune >= 2 ) || fight_remains < 20",
["action"] = "pillar_of_frost",
},
{
["enabled"] = true,
["criteria"] = "talent.breath_of_sindragosa.enabled & variable.breath_of_sindragosa_check & ( ! hero_tree.deathbringer || rune >= 2 )",
["action"] = "pillar_of_frost",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "breath_of_sindragosa",
["criteria"] = "! buff.breath_of_sindragosa.up & ( buff.pillar_of_frost.up || fight_remains < 20 )",
},
{
["enabled"] = true,
["criteria"] = "buff.pillar_of_frost.up || cooldown.pillar_of_frost.remains > 5 || fight_remains < 20",
["action"] = "reapers_mark",
["cycle_targets"] = 1,
},
{
["enabled"] = true,
["criteria"] = "! talent.apocalypse_now.enabled & active_enemies = 1 & ( talent.pillar_of_frost.enabled & buff.pillar_of_frost.up & ! talent.obliteration.enabled || ! talent.pillar_of_frost.enabled ) & ( ! raid_event.adds.exists || raid_event.adds.in > cooldown.frostwyrms_fury.duration + raid_event.adds.duration ) & variable.fwf_buffs || fight_remains < 3",
["action"] = "frostwyrms_fury",
},
{
["enabled"] = true,
["criteria"] = "! talent.apocalypse_now.enabled & active_enemies >= 2 & ( talent.pillar_of_frost.enabled & buff.pillar_of_frost.up || raid_event.adds.exists & raid_event.adds.up & raid_event.adds.in < cooldown.pillar_of_frost.remains - raid_event.adds.in - raid_event.adds.duration ) & variable.fwf_buffs",
["action"] = "frostwyrms_fury",
},
{
["enabled"] = true,
["criteria"] = "! talent.apocalypse_now.enabled & talent.obliteration.enabled & ( talent.pillar_of_frost.enabled & buff.pillar_of_frost.up & ! main_hand.2h || ! buff.pillar_of_frost.up & main_hand.2h & cooldown.pillar_of_frost.remains || ! talent.pillar_of_frost.enabled ) & variable.fwf_buffs & ( ! raid_event.adds.exists || raid_event.adds.in > cooldown.frostwyrms_fury.duration + raid_event.adds.duration )",
["action"] = "frostwyrms_fury",
},
{
["use_off_gcd"] = 1,
["action"] = "raise_dead",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "talent.reaper_of_souls.enabled & buff.reaper_of_souls.up & buff.killing_machine.stack < 2",
["action"] = "soul_reaper",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "empower_rune_weapon",
["criteria"] = "( rune < 2 || ! buff.killing_machine.up ) & runic_power < 35 + ( talent.icy_onslaught.enabled * buff.icy_onslaught.stack * 5 ) & gcd.remains < 0.5",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "empower_rune_weapon",
["criteria"] = "cooldown.empower_rune_weapon.full_recharge_time <= 6 & buff.killing_machine.stack < 1 + ( 1 * talent.killing_streak.enabled ) & gcd.remains < 0.5",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "blood_fury",
["criteria"] = "variable.cooldown_check",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "berserking",
["criteria"] = "variable.cooldown_check",
},
{
["enabled"] = true,
["criteria"] = "variable.cooldown_check",
["action"] = "arcane_pulse",
},
{
["enabled"] = true,
["criteria"] = "variable.cooldown_check",
["action"] = "lights_judgment",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "ancestral_call",
["criteria"] = "variable.cooldown_check",
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["action"] = "fireblood",
["criteria"] = "variable.cooldown_check",
},
{
["enabled"] = true,
["criteria"] = "talent.obliteration.enabled & ! buff.pillar_of_frost.up & buff.unholy_strength.up",
["action"] = "bag_of_tricks",
},
{
["enabled"] = true,
["criteria"] = "! talent.obliteration.enabled & buff.pillar_of_frost.up & ( buff.unholy_strength.up & buff.unholy_strength.remains < gcd.max * 3 || buff.pillar_of_frost.remains < gcd.max * 3 )",
["action"] = "bag_of_tricks",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["strict"] = 1,
["criteria"] = "active_enemies >= 3",
["list_name"] = "aoe",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["list_name"] = "single_target",
},
},
["precombat"] = {
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_1_sync",
["value"] = "1",
["value_else"] = "0.5",
["criteria"] = "trinket.t1.has_use_buff & ( talent.pillar_of_frost.enabled & ! talent.breath_of_sindragosa.enabled & ( trinket.t1.cooldown.duration % cooldown.pillar_of_frost.duration = 0 ) || talent.breath_of_sindragosa.enabled & ( cooldown.breath_of_sindragosa.duration % trinket.t1.cooldown.duration = 0 ) )",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_2_sync",
["value"] = "1",
["value_else"] = "0.5",
["criteria"] = "trinket.t2.has_use_buff & ( talent.pillar_of_frost.enabled & ! talent.breath_of_sindragosa.enabled & ( trinket.t2.cooldown.duration % cooldown.pillar_of_frost.duration = 0 ) || talent.breath_of_sindragosa.enabled & ( cooldown.breath_of_sindragosa.duration % trinket.t2.cooldown.duration = 0 ) )",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "trinket.t1.has_cooldown & ! trinket.t1.is.improvised_seaforium_pacemaker & ( trinket.t1.has_use_buff || trinket.t1.has_use_buff || trinket.t1.has_use_buff || trinket.t1.has_use_buff || trinket.t1.has_use_buff || trinket.t1.has_use_buff )",
["var_name"] = "trinket_1_buffs",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "trinket.t2.has_cooldown & ! trinket.t2.is.improvised_seaforium_pacemaker & ( trinket.t2.has_use_buff || trinket.t2.has_use_buff || trinket.t2.has_use_buff || trinket.t2.has_use_buff || trinket.t2.has_use_buff || trinket.t2.has_use_buff )",
["var_name"] = "trinket_2_buffs",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "trinket.t1.buff_duration",
["var_name"] = "trinket_1_duration",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "trinket.t2.buff_duration",
["var_name"] = "trinket_2_duration",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "trinket_priority",
["value"] = "2",
["value_else"] = "1",
["criteria"] = "! variable.trinket_1_buffs & variable.trinket_2_buffs & ( trinket.t2.has_cooldown || ! trinket.t1.has_cooldown ) || variable.trinket_2_buffs & ( ( trinket.t2.cooldown.duration / variable.trinket_2_duration ) * ( 1.5 + trinket.t2.has_use_buff ) * ( variable.trinket_2_sync ) * ( 1 + ( ( trinket.t2.ilvl - trinket.t1.ilvl ) / 100 ) ) ) > ( ( trinket.t1.cooldown.duration / variable.trinket_1_duration ) * ( 1.5 + trinket.t1.has_use_buff ) * ( variable.trinket_1_sync ) * ( 1 + ( ( trinket.t1.ilvl - trinket.t2.ilvl ) / 100 ) ) )",
},
{
["enabled"] = true,
["op"] = "setif",
["action"] = "variable",
["var_name"] = "damage_trinket_priority",
["value"] = "2",
["value_else"] = "1",
["criteria"] = "! variable.trinket_1_buffs & ! variable.trinket_2_buffs & trinket.t2.ilvl >= trinket.t1.ilvl",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "trinket.t1.is.unyielding_netherprism",
["var_name"] = "trinket_1_manual",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "trinket.t2.is.unyielding_netherprism",
["var_name"] = "trinket_2_manual",
},
},
},
["version"] = 20250826,
["warnings"] = "The import for 'default' required some automated changes.\nLine 9: Converted 'trinket.1.cast_time' to 'trinket.t1.cast_time' (1x).\nLine 9: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 9: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 9: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 10: Converted 'trinket.2.cast_time' to 'trinket.t2.cast_time' (1x).\nLine 10: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 10: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 10: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 11: Converted 'trinket.1.cast_time' to 'trinket.t1.cast_time' (1x).\nLine 11: Converted 'trinket.2.is.unyielding_netherprism' to 'trinket.t2.is.unyielding_netherprism' (1x).\nLine 11: Converted 'trinket.1.cast_time' to 'trinket.t1.cast_time' (1x).\nLine 11: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 11: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 11: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 12: Converted 'trinket.2.cast_time' to 'trinket.t2.cast_time' (1x).\nLine 12: Converted 'trinket.1.is.unyielding_netherprism' to 'trinket.t1.is.unyielding_netherprism' (1x).\nLine 12: Converted 'trinket.2.cast_time' to 'trinket.t2.cast_time' (1x).\nLine 12: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 12: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 12: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 13: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 13: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 13: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\nLine 13: Converted 'trinket.1.cast_time' to 'trinket.t1.cast_time' (1x).\nLine 13: Converted 'trinket.1.cast_time' to 'trinket.t1.cast_time' (1x).\nLine 14: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 14: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 14: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 14: Converted 'trinket.2.cast_time' to 'trinket.t2.cast_time' (1x).\nLine 14: Converted 'trinket.2.cast_time' to 'trinket.t2.cast_time' (1x).\nLine 15: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains' (1x).\nLine 15: Converted 'trinket.1.cooldown.remains' to 'trinket.t1.cooldown.remains'.\nLine 15: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains' (1x).\nLine 15: Converted 'trinket.2.cooldown.remains' to 'trinket.t2.cooldown.remains'.\n\nThe import for 'precombat' required some automated changes.\nLine 1: Converted 'trinket.1.has_use_buff' to 'trinket.t1.has_use_buff' (1x).\nLine 1: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration' (1x).\nLine 1: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration'.\nLine 1: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration' (1x).\nLine 1: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration'.\nLine 1: Converted operations in 'trinket.t1.has_use_buff&(talent.pillar_of_frost.enabled&!talent.breath_of_sindragosa.enabled&(trinket.t1.cooldown.duration%%cooldown.pillar_of_frost.duration=0)||talent.breath_of_sindragosa.enabled&(cooldown.breath_of_sindragosa.duration%%trinket.t1.cooldown.duration=0))' to 'trinket.t1.has_use_buff&(talent.pillar_of_frost.enabled&!talent.breath_of_sindragosa.enabled&(trinket.t1.cooldown.duration%cooldown.pillar_of_frost.duration=0)||talent.breath_of_sindragosa.enabled&(cooldown.breath_of_sindragosa.duration%trinket.t1.cooldown.duration=0))'.\nLine 2: Converted 'trinket.2.has_use_buff' to 'trinket.t2.has_use_buff' (1x).\nLine 2: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration' (1x).\nLine 2: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration'.\nLine 2: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration' (1x).\nLine 2: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration'.\nLine 2: Converted operations in 'trinket.t2.has_use_buff&(talent.pillar_of_frost.enabled&!talent.breath_of_sindragosa.enabled&(trinket.t2.cooldown.duration%%cooldown.pillar_of_frost.duration=0)||talent.breath_of_sindragosa.enabled&(cooldown.breath_of_sindragosa.duration%%trinket.t2.cooldown.duration=0))' to 'trinket.t2.has_use_buff&(talent.pillar_of_frost.enabled&!talent.breath_of_sindragosa.enabled&(trinket.t2.cooldown.duration%cooldown.pillar_of_frost.duration=0)||talent.breath_of_sindragosa.enabled&(cooldown.breath_of_sindragosa.duration%trinket.t2.cooldown.duration=0))'.\nLine 3: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 3: Converted 'trinket.1.is.improvised_seaforium_pacemaker' to 'trinket.t1.is.improvised_seaforium_pacemaker' (1x).\nLine 3: Converted 'trinket.1.has_use_buff' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.has_buff.strength' to 'trinket.t1.has_buff.strength' (1x).\nLine 3: Converted 'trinket.1.has_buff.strength' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.has_buff.mastery' to 'trinket.t1.has_buff.mastery' (1x).\nLine 3: Converted 'trinket.1.has_buff.mastery' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.has_buff.versatility' to 'trinket.t1.has_buff.versatility' (1x).\nLine 3: Converted 'trinket.1.has_buff.versatility' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.has_buff.haste' to 'trinket.t1.has_buff.haste' (1x).\nLine 3: Converted 'trinket.1.has_buff.haste' to 'trinket.t1.has_use_buff' (1x).\nLine 3: Converted 'trinket.1.has_buff.crit' to 'trinket.t1.has_buff.crit' (1x).\nLine 3: Converted 'trinket.1.has_buff.crit' to 'trinket.t1.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 4: Converted 'trinket.2.is.improvised_seaforium_pacemaker' to 'trinket.t2.is.improvised_seaforium_pacemaker' (1x).\nLine 4: Converted 'trinket.2.has_use_buff' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_buff.strength' to 'trinket.t2.has_buff.strength' (1x).\nLine 4: Converted 'trinket.2.has_buff.strength' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_buff.mastery' to 'trinket.t2.has_buff.mastery' (1x).\nLine 4: Converted 'trinket.2.has_buff.mastery' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_buff.versatility' to 'trinket.t2.has_buff.versatility' (1x).\nLine 4: Converted 'trinket.2.has_buff.versatility' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_buff.haste' to 'trinket.t2.has_buff.haste' (1x).\nLine 4: Converted 'trinket.2.has_buff.haste' to 'trinket.t2.has_use_buff' (1x).\nLine 4: Converted 'trinket.2.has_buff.crit' to 'trinket.t2.has_buff.crit' (1x).\nLine 4: Converted 'trinket.2.has_buff.crit' to 'trinket.t2.has_use_buff' (1x).\nLine 5: Converted 'trinket.1.proc.any_dps.duration' to 'trinket.t1.proc.any_dps.duration' (1x).\nLine 5: Converted 'trinket.1.proc.any_dps.duration' to 'trinket.t1.buff_duration' (1x).\nLine 6: Converted 'trinket.2.proc.any_dps.duration' to 'trinket.t2.proc.any_dps.duration' (1x).\nLine 6: Converted 'trinket.2.proc.any_dps.duration' to 'trinket.t2.buff_duration' (1x).\nLine 7: Converted 'trinket.2.has_cooldown' to 'trinket.t2.has_cooldown' (1x).\nLine 7: Converted 'trinket.1.has_cooldown' to 'trinket.t1.has_cooldown' (1x).\nLine 7: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration' (1x).\nLine 7: Converted 'trinket.2.cooldown.duration' to 'trinket.t2.cooldown.duration'.\nLine 7: Converted 'trinket.2.has_buff.strength' to 'trinket.t2.has_buff.strength' (1x).\nLine 7: Converted 'trinket.2.has_buff.strength' to 'trinket.t2.has_use_buff' (1x).\nLine 7: Converted 'trinket.2.ilvl' to 'trinket.t2.ilvl' (1x).\nLine 7: Converted 'trinket.1.ilvl' to 'trinket.t1.ilvl' (1x).\nLine 7: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration' (1x).\nLine 7: Converted 'trinket.1.cooldown.duration' to 'trinket.t1.cooldown.duration'.\nLine 7: Converted 'trinket.1.has_buff.strength' to 'trinket.t1.has_buff.strength' (1x).\nLine 7: Converted 'trinket.1.has_buff.strength' to 'trinket.t1.has_use_buff' (1x).\nLine 7: Converted 'trinket.1.ilvl' to 'trinket.t1.ilvl' (1x).\nLine 7: Converted 'trinket.2.ilvl' to 'trinket.t2.ilvl' (1x).\nLine 7: Converted operations in '!variable.trinket_1_buffs&variable.trinket_2_buffs&(trinket.t2.has_cooldown||!trinket.t1.has_cooldown)||variable.trinket_2_buffs&((trinket.t2.cooldown.duration%variable.trinket_2_duration)*(1.5+trinket.t2.has_use_buff)*(variable.trinket_2_sync)*(1+((trinket.t2.ilvl-trinket.t1.ilvl)%100)))>((trinket.t1.cooldown.duration%variable.trinket_1_duration)*(1.5+trinket.t1.has_use_buff)*(variable.trinket_1_sync)*(1+((trinket.t1.ilvl-trinket.t2.ilvl)%100)))' to '!variable.trinket_1_buffs&variable.trinket_2_buffs&(trinket.t2.has_cooldown||!trinket.t1.has_cooldown)||variable.trinket_2_buffs&((trinket.t2.cooldown.duration/variable.trinket_2_duration)*(1.5+trinket.t2.has_use_buff)*(variable.trinket_2_sync)*(1+((trinket.t2.ilvl-trinket.t1.ilvl)/100)))>((trinket.t1.cooldown.duration/variable.trinket_1_duration)*(1.5+trinket.t1.has_use_buff)*(variable.trinket_1_sync)*(1+((trinket.t1.ilvl-trinket.t2.ilvl)/100)))'.\nLine 8: Converted 'trinket.2.ilvl' to 'trinket.t2.ilvl' (1x).\nLine 8: Converted 'trinket.1.ilvl' to 'trinket.t1.ilvl' (1x).\nLine 9: Converted 'trinket.1.is.unyielding_netherprism' to 'trinket.t1.is.unyielding_netherprism' (1x).\nLine 10: Converted 'trinket.2.is.unyielding_netherprism' to 'trinket.t2.is.unyielding_netherprism' (1x).\nThe following auras were used in the action list but were not found in the addon database:\n - crit\n\nImported 4 action lists.\n",
["spec"] = 251,
["profile"] = "## https://github.com/simulationcraft/simc/blob/thewarwithin/ActionPriorityLists/default/deathknight_frost.simc\n## SimulationCraft Commit Sync: 8aa4db9\n## Date: 2025-08-26\n\n## Executed before combat begins. Accepts non-harmful actions only.\n## Evaluates a trinkets cooldown, divided by pillar of frost, empower rune weapon, or breath of sindragosa's cooldown. If it's value has no remainder return 1, else return 0.5.\nactions.precombat+=/variable,name=trinket_1_sync,op=setif,value=1,value_else=0.5,condition=trinket.1.has_use_buff&(talent.pillar_of_frost&!talent.breath_of_sindragosa&(trinket.1.cooldown.duration%%cooldown.pillar_of_frost.duration=0)||talent.breath_of_sindragosa&(cooldown.breath_of_sindragosa.duration%%trinket.1.cooldown.duration=0))\nactions.precombat+=/variable,name=trinket_2_sync,op=setif,value=1,value_else=0.5,condition=trinket.2.has_use_buff&(talent.pillar_of_frost&!talent.breath_of_sindragosa&(trinket.2.cooldown.duration%%cooldown.pillar_of_frost.duration=0)||talent.breath_of_sindragosa&(cooldown.breath_of_sindragosa.duration%%trinket.2.cooldown.duration=0))\nactions.precombat+=/variable,name=trinket_1_buffs,value=trinket.1.has_cooldown&!trinket.1.is.improvised_seaforium_pacemaker&(trinket.1.has_use_buff||trinket.1.has_buff.strength||trinket.1.has_buff.mastery||trinket.1.has_buff.versatility||trinket.1.has_buff.haste||trinket.1.has_buff.crit)\nactions.precombat+=/variable,name=trinket_2_buffs,value=trinket.2.has_cooldown&!trinket.2.is.improvised_seaforium_pacemaker&(trinket.2.has_use_buff||trinket.2.has_buff.strength||trinket.2.has_buff.mastery||trinket.2.has_buff.versatility||trinket.2.has_buff.haste||trinket.2.has_buff.crit)\nactions.precombat+=/variable,name=trinket_1_duration,value=trinket.1.proc.any_dps.duration\nactions.precombat+=/variable,name=trinket_2_duration,value=trinket.2.proc.any_dps.duration,\nactions.precombat+=/variable,name=trinket_priority,op=setif,value=2,value_else=1,condition=!variable.trinket_1_buffs&variable.trinket_2_buffs&(trinket.2.has_cooldown||!trinket.1.has_cooldown)||variable.trinket_2_buffs&((trinket.2.cooldown.duration%variable.trinket_2_duration)*(1.5+trinket.2.has_buff.strength)*(variable.trinket_2_sync)*(1+((trinket.2.ilvl-trinket.1.ilvl)%100)))>((trinket.1.cooldown.duration%variable.trinket_1_duration)*(1.5+trinket.1.has_buff.strength)*(variable.trinket_1_sync)*(1+((trinket.1.ilvl-trinket.2.ilvl)%100)))\nactions.precombat+=/variable,name=damage_trinket_priority,op=setif,value=2,value_else=1,condition=!variable.trinket_1_buffs&!variable.trinket_2_buffs&trinket.2.ilvl>=trinket.1.ilvl\nactions.precombat+=/variable,name=trinket_1_manual,value=trinket.1.is.unyielding_netherprism\nactions.precombat+=/variable,name=trinket_2_manual,value=trinket.2.is.unyielding_netherprism\n\n## Executed every time the actor is available.\nactions=mind_freeze\n## Choose Action list to run\n## [Hekili] Remove unnecessary conditionless branches to save CPU time.\n## actions+=/call_action_list,name=variables\n## [Hekili] This is always 'true' because the addon doesn't predict raid events.\n## actions=variable,name=st_planning,op=setif,value=1,value_else=0,condition=active_enemies=1&(!raid_event.adds.exists||!raid_event.adds.in||raid_event.adds.in>15)\n## [Hekili] This is also always true because the addon doesn't predict raid events.\n## actions+=/variable,name=adds_remain,value=active_enemies>=2&(!raid_event.adds.exists||!raid_event.pull.exists&raid_event.adds.remains>5||raid_event.pull.exists&raid_event.adds.in>20)\n## [Hekili] This is also always true because the addon doesn't predict raid events.\n## actions+=/variable,name=sending_cds,value=(variable.st_planning||variable.adds_remain)\nactions+=/variable,name=cooldown_check,value=(talent.pillar_of_frost&buff.pillar_of_frost.up)||!talent.pillar_of_frost||fight_remains<20\nactions+=/variable,name=fwf_buffs,value=(buff.pillar_of_frost.remains<gcd.max||(buff.unholy_strength.up&buff.unholy_strength.remains<gcd.max)||(talent.bonegrinder.rank=2&buff.bonegrinder_frost.up&buff.bonegrinder_frost.remains<gcd.max))&(active_enemies>1||debuff.razorice.stack=5||talent.shattering_blade)\n## actions+=/variable,name=rune_pooling,value=hero_tree.deathbringer&cooldown.reapers_mark.remains<6&rune<3&variable.sending_cds\nactions+=/variable,name=rune_pooling,value=hero_tree.deathbringer&cooldown.reapers_mark.remains<6&rune<3\n## actions+=/variable,name=rp_pooling,value=talent.breath_of_sindragosa&cooldown.breath_of_sindragosa.remains<4*gcd.max&runic_power<60+(35+5*buff.icy_onslaught.up)-(10*rune)&variable.sending_cds\nactions+=/variable,name=rp_pooling,value=talent.breath_of_sindragosa&cooldown.breath_of_sindragosa.remains<4*gcd.max&runic_power<60+(35+5*buff.icy_onslaught.up)-(10*rune)\n# Frostscythe is equal at 3 targets, except with Rider 4pc which brings Obliterate higher at 3, unless cleaving strikes is up\n## [Hekili] Revised to fix target count based on 4pc.\n## actions+=/variable,name=frostscythe_prio,value=3+(1*(set_bonus.tww3_rider_of_the_apocalypse_4pc&!(talent.cleaving_strikes&buff.remorseless_winter.up)))\nactions+=/variable,name=frostscythe_prio,value=4,value_else=3,condition=set_bonus.tww3_rider_of_the_apocalypse_4pc>0&!(talent.cleaving_strikes&buff.remorseless_winter.up)\nactions+=/variable,name=breath_of_sindragosa_check,value=talent.breath_of_sindragosa&(cooldown.breath_of_sindragosa.remains>20||(cooldown.breath_of_sindragosa.up&runic_power>=(60-20*hero_tree.deathbringer)))\n\n## actions+=/call_action_list,name=trinkets\nactions=use_item,name=unyielding_netherprism,if=buff.latent_energy.stack>8&buff.pillar_of_frost.remains&(!talent.breath_of_sindragosa||buff.breath_of_sindragosa.remains)\nactions+=/use_item,slot=trinket1,if=!trinket.1.cast_time>0&variable.trinket_1_buffs&!variable.trinket_1_manual&buff.pillar_of_frost.remains&(!trinket.2.has_cooldown||trinket.2.cooldown.remains||variable.trinket_priority=1)\nactions+=/use_item,slot=trinket2,if=!trinket.2.cast_time>0&variable.trinket_2_buffs&!variable.trinket_2_manual&buff.pillar_of_frost.remains&(!trinket.1.has_cooldown||trinket.1.cooldown.remains||variable.trinket_priority=2)\n# Channeled buff trinkets will be used before cooldowns\n## actions+=/use_item,slot=trinket1,use_off_gcd=1,if=trinket.1.cast_time>0&(!hero_tree.rider_of_the_apocalypse||cooldown.frostwyrms_fury.remains)&variable.trinket_1_buffs&!variable.trinket_1_manual&cooldown.pillar_of_frost.remains<trinket.1.cast_time&(!talent.breath_of_sindragosa||variable.breath_of_sindragosa_check)&variable.sending_cds&(!trinket.2.has_cooldown||trinket.2.cooldown.remains||variable.trinket_priority=1)||variable.trinket_1_duration>=fight_remains\nactions+=/use_item,slot=trinket1,if=trinket.1.cast_time>0&(!trinket.2.is.unyielding_netherprism||buff.latent_energy.stack<8)&(!hero_tree.rider_of_the_apocalypse||cooldown.frostwyrms_fury.remains)&variable.trinket_1_buffs&!variable.trinket_1_manual&cooldown.pillar_of_frost.remains<trinket.1.cast_time&(!talent.breath_of_sindragosa||variable.breath_of_sindragosa_check)&(!trinket.2.has_cooldown||trinket.2.cooldown.remains||variable.trinket_priority=1)||variable.trinket_1_duration>=fight_remains\n## actions+=/use_item,slot=trinket2,use_off_gcd=1,if=trinket.2.cast_time>0&(!hero_tree.rider_of_the_apocalypse||cooldown.frostwyrms_fury.remains)&variable.trinket_2_buffs&!variable.trinket_2_manual&cooldown.pillar_of_frost.remains<trinket.2.cast_time&(!talent.breath_of_sindragosa||variable.breath_of_sindragosa_check)&variable.sending_cds&(!trinket.1.has_cooldown||trinket.1.cooldown.remains||variable.trinket_priority=2)||variable.trinket_2_duration>=fight_remains\nactions+=/use_item,slot=trinket2,if=trinket.2.cast_time>0&(!trinket.1.is.unyielding_netherprism||buff.latent_energy.stack<8)&(!hero_tree.rider_of_the_apocalypse||cooldown.frostwyrms_fury.remains)&variable.trinket_2_buffs&!variable.trinket_2_manual&cooldown.pillar_of_frost.remains<trinket.2.cast_time&(!talent.breath_of_sindragosa||variable.breath_of_sindragosa_check)&(!trinket.1.has_cooldown||trinket.1.cooldown.remains||variable.trinket_priority=2)||variable.trinket_2_duration>=fight_remains\n# If only one on use trinket provides a buff, use the other on cooldown. Or if neither trinket provides a buff, use both on cooldown.\nactions+=/use_item,slot=trinket1,if=!variable.trinket_1_buffs&!variable.trinket_1_manual&(variable.damage_trinket_priority=1||(!trinket.2.has_cooldown||trinket.2.cooldown.remains))&((trinket.1.cast_time>0&(!talent.breath_of_sindragosa||!buff.breath_of_sindragosa.up)&!buff.pillar_of_frost.up||!trinket.1.cast_time>0)&(!variable.trinket_2_buffs||cooldown.pillar_of_frost.remains>20)||!talent.pillar_of_frost)||fight_remains<15\nactions+=/use_item,slot=trinket2,if=!variable.trinket_2_buffs&!variable.trinket_2_manual&(variable.damage_trinket_priority=2||(!trinket.1.has_cooldown||trinket.1.cooldown.remains))&((trinket.2.cast_time>0&(!talent.breath_of_sindragosa||!buff.breath_of_sindragosa.up)&!buff.pillar_of_frost.up||!trinket.2.cast_time>0)&(!variable.trinket_1_buffs||cooldown.pillar_of_frost.remains>20)||!talent.pillar_of_frost)||fight_remains<15\nactions+=/use_item,slot=main_hand,if=buff.pillar_of_frost.up||(buff.breath_of_sindragosa.up&cooldown.pillar_of_frost.remains)||(variable.trinket_1_buffs&variable.trinket_2_buffs&(trinket.1.cooldown.remains<cooldown.pillar_of_frost.remains||trinket.2.cooldown.remains<cooldown.pillar_of_frost.remains)&cooldown.pillar_of_frost.remains>20)||fight_remains<15\n\n## actions+=/call_action_list,name=high_prio_actions\n## actions=mind_freeze,if=target.debuff.casting.up\n## Use <a href='https://www.wowhead.com/spell=10060/power-infusion'>Power Infusion</a> while <a href='https://www.wowhead.com/spell=51271/pillar-of-frost'>Pillar of Frost</a> is up\n## actions+=/invoke_external_buff,name=power_infusion,if=variable.cooldown_check\n## [Hekili] Recheck AMS logic.\n## actions+=/antimagic_shell,if=runic_power.deficit>40&death_knight.first_ams_cast<time\n\n## actions+=/call_action_list,name=cooldowns\nactions=potion,use_off_gcd=1,if=variable.cooldown_check||fight_remains<25\n## actions+=/remorseless_winter,if=variable.sending_cds&(active_enemies>1||talent.gathering_storm)||(buff.gathering_storm.stack=10&buff.remorseless_winter.remains<gcd.max)&fight_remains>10\nactions+=/remorseless_winter,if=(active_enemies>1||talent.gathering_storm)||(buff.gathering_storm.stack=10&buff.remorseless_winter.remains<gcd.max)&fight_remains>10\n## actions+=/frostwyrms_fury,if=hero_tree.rider_of_the_apocalypse&talent.apocalypse_now&variable.sending_cds&(cooldown.pillar_of_frost.remains<gcd.max||fight_remains<20)&!talent.breath_of_sindragosa\nactions+=/frostwyrms_fury,if=hero_tree.rider_of_the_apocalypse&talent.apocalypse_now&(cooldown.pillar_of_frost.remains<gcd.max||fight_remains<20)&!talent.breath_of_sindragosa\n## actions+=/frostwyrms_fury,if=hero_tree.rider_of_the_apocalypse&talent.apocalypse_now&variable.sending_cds&(cooldown.pillar_of_frost.remains<gcd.max||fight_remains<20)&talent.breath_of_sindragosa&runic_power>=60\nactions+=/frostwyrms_fury,if=hero_tree.rider_of_the_apocalypse&talent.apocalypse_now&(cooldown.pillar_of_frost.remains<gcd.max||fight_remains<20)&talent.breath_of_sindragosa&runic_power>=60\n## actions+=/pillar_of_frost,if=!talent.breath_of_sindragosa&variable.sending_cds&(!hero_tree.deathbringer||rune>=2)||fight_remains<20\nactions+=/pillar_of_frost,if=!talent.breath_of_sindragosa&(!hero_tree.deathbringer||rune>=2)||fight_remains<20\n## actions+=/pillar_of_frost,if=talent.breath_of_sindragosa&variable.sending_cds&variable.breath_of_sindragosa_check&(!hero_tree.deathbringer||rune>=2)\nactions+=/pillar_of_frost,if=talent.breath_of_sindragosa&variable.breath_of_sindragosa_check&(!hero_tree.deathbringer||rune>=2)\nactions+=/breath_of_sindragosa,use_off_gcd=1,if=!buff.breath_of_sindragosa.up&(buff.pillar_of_frost.up||fight_remains<20)\nactions+=/reapers_mark,cycle_targets=1,if=buff.pillar_of_frost.up||cooldown.pillar_of_frost.remains>5||fight_remains<20\nactions+=/frostwyrms_fury,if=!talent.apocalypse_now&active_enemies=1&(talent.pillar_of_frost&buff.pillar_of_frost.up&!talent.obliteration||!talent.pillar_of_frost)&(!raid_event.adds.exists||raid_event.adds.in>cooldown.frostwyrms_fury.duration+raid_event.adds.duration)&variable.fwf_buffs||fight_remains<3\nactions+=/frostwyrms_fury,if=!talent.apocalypse_now&active_enemies>=2&(talent.pillar_of_frost&buff.pillar_of_frost.up||raid_event.adds.exists&raid_event.adds.up&raid_event.adds.in<cooldown.pillar_of_frost.remains-raid_event.adds.in-raid_event.adds.duration)&variable.fwf_buffs\nactions+=/frostwyrms_fury,if=!talent.apocalypse_now&talent.obliteration&(talent.pillar_of_frost&buff.pillar_of_frost.up&!main_hand.2h||!buff.pillar_of_frost.up&main_hand.2h&cooldown.pillar_of_frost.remains||!talent.pillar_of_frost)&variable.fwf_buffs&(!raid_event.adds.exists||raid_event.adds.in>cooldown.frostwyrms_fury.duration+raid_event.adds.duration)\nactions+=/raise_dead,use_off_gcd=1\nactions+=/soul_reaper,if=talent.reaper_of_souls&buff.reaper_of_souls.up&buff.killing_machine.stack<2\nactions+=/empower_rune_weapon,use_off_gcd=1,if=(rune<2||!buff.killing_machine.up)&runic_power<35+(talent.icy_onslaught*buff.icy_onslaught.stack*5)&gcd.remains<0.5\nactions+=/empower_rune_weapon,use_off_gcd=1,if=cooldown.empower_rune_weapon.full_recharge_time<=6&buff.killing_machine.stack<1+(1*talent.killing_streak)&gcd.remains<0.5\n\n## actions+=/call_action_list,name=racials\nactions=blood_fury,use_off_gcd=1,if=variable.cooldown_check\nactions+=/berserking,use_off_gcd=1,if=variable.cooldown_check\nactions+=/arcane_pulse,if=variable.cooldown_check\nactions+=/lights_judgment,if=variable.cooldown_check\nactions+=/ancestral_call,use_off_gcd=1,if=variable.cooldown_check\nactions+=/fireblood,use_off_gcd=1,if=variable.cooldown_check\nactions+=/bag_of_tricks,if=talent.obliteration&!buff.pillar_of_frost.up&buff.unholy_strength.up\nactions+=/bag_of_tricks,if=!talent.obliteration&buff.pillar_of_frost.up&(buff.unholy_strength.up&buff.unholy_strength.remains<gcd*3||buff.pillar_of_frost.remains<gcd*3)\n\nactions+=/run_action_list,name=aoe,strict=1,if=active_enemies>=3\nactions+=/run_action_list,name=single_target\n\n# Aoe Rotation\nactions.aoe=frostscythe,if=(buff.killing_machine.stack=2||(buff.killing_machine.up&rune>=3))&active_enemies>=variable.frostscythe_prio\n## actions.aoe+=/obliterate,target_if=max:(hero_tree.rider_of_the_apocalypse&debuff.chains_of_ice_trollbane_slow.up),if=buff.killing_machine.stack=2||(buff.killing_machine.up&rune>=3)\nactions.aoe+=/obliterate,cycle_targets=1,if=buff.killing_machine.stack=2||(buff.killing_machine.up&rune>=3)\nactions.aoe+=/howling_blast,if=buff.rime.up&talent.frostbound_will||!dot.frost_fever.ticking\n## actions.aoe+=/frost_strike,target_if=max:(talent.shattering_blade&debuff.razorice.stack=5),if=debuff.razorice.stack=5&buff.frostbane.up\nactions.aoe+=/frost_strike,cycle_targets=1,if=debuff.razorice.stack=5&buff.frostbane.up\nactions.aoe+=/frost_strike,cycle_targets=1,if=debuff.razorice.stack=5&talent.shattering_blade&active_enemies<5&!variable.rp_pooling&!talent.frostbane\nactions.aoe+=/frostscythe,if=buff.killing_machine.up&!variable.rune_pooling&active_enemies>=variable.frostscythe_prio\n## actions.aoe+=/obliterate,target_if=max:(hero_tree.rider_of_the_apocalypse&debuff.chains_of_ice_trollbane_slow.up),if=buff.killing_machine.up&!variable.rune_pooling\nactions.aoe+=/obliterate,cycle_targets=1,if=buff.killing_machine.up&!variable.rune_pooling\nactions.aoe+=/howling_blast,if=buff.rime.up\nactions.aoe+=/glacial_advance,if=!variable.rp_pooling\nactions.aoe+=/frostscythe,if=!variable.rune_pooling&!(talent.obliteration&buff.pillar_of_frost.up)&active_enemies>=variable.frostscythe_prio\n## actions.aoe+=/obliterate,target_if=max:(hero_tree.rider_of_the_apocalypse&debuff.chains_of_ice_trollbane_slow.up),if=!variable.rune_pooling&!(talent.obliteration&buff.pillar_of_frost.up)\nactions.aoe+=/obliterate,cycle_targets=1,if=!variable.rune_pooling&!(talent.obliteration&buff.pillar_of_frost.up)\nactions.aoe+=/howling_blast,if=!buff.killing_machine.up&(talent.obliteration&buff.pillar_of_frost.up)\n\n# Single Target Rotation\nactions.single_target=obliterate,if=buff.killing_machine.stack=2||(buff.killing_machine.up&rune>=3)\nactions.single_target+=/howling_blast,if=buff.rime.up&talent.frostbound_will\nactions.single_target+=/frost_strike,cycle_targets=1,if=debuff.razorice.stack=5&talent.shattering_blade&!variable.rp_pooling\nactions.single_target+=/howling_blast,if=buff.rime.up\nactions.single_target+=/frost_strike,if=!talent.shattering_blade&!variable.rp_pooling&runic_power.deficit<30\nactions.single_target+=/obliterate,if=buff.killing_machine.up&!variable.rune_pooling\nactions.single_target+=/frost_strike,if=!variable.rp_pooling\nactions.single_target+=/obliterate,if=!variable.rune_pooling&!(talent.obliteration&buff.pillar_of_frost.up)\nactions.single_target+=/howling_blast,if=!buff.killing_machine.up&(talent.obliteration&buff.pillar_of_frost.up)",
},
["Holy Priest"] = {
["builtIn"] = true,
["date"] = 20240828,
["spec"] = 257,
["desc"] = "Healer priorities are DPS-focused only\n\n2024-08-28: Use cooldowns action list\n\n2024-07-30: The War Within",
["profile"] = "actions.precombat+=/power_word_fortitude\n\nactions+=/call_action_list,name=cooldowns\n# Always use HF if we have empyreal blaze (dot extension) or harmonious apparatus (cd reduction) or if it's not currently ticking. Otherwise, only use when refreshable to be sure we get the longest duration possible. It's worth it to cast even when the target will die soon based on just the initial hit damage. We also don't want to cast immediately once empyreal blaze is up when we are prepping divine word\nactions+=/holy_fire,cycle_targets=1,if=(talent.empyreal_blaze||talent.harmonious_apparatus||!ticking||refreshable)&!(buff.empyreal_blaze.up&(cooldown.divine_word.up||buff.divine_word.up)&cooldown.holy_word_chastise.up)\n# Don't cast SW:P during apotheosis or divine favor: chastise. We also don't cycle targets because it isn't worth the GCDs, since Smite deals slightly more damage than a full SW:P.\nactions+=/shadow_word_pain,if=(refreshable||!ticking)&(target.time_to_die>=dot.shadow_word_pain.duration)&!buff.divine_favor_chastise.up&!buff.apotheosis.up\n# Prepare to enter divine favor: chastise\nactions+=/call_action_list,name=divine_favor_chastise_prep,if=talent.divine_word&talent.holy_word_chastise&buff.divine_favor_chastise.down\n# Enter Divine Favor rotation with divine favor: chastise buff up\nactions+=/run_action_list,name=divine_favor_chastise_active,strict=1,if=buff.divine_favor_chastise.up\n# Run divine favor fillers rotation with buff down\nactions+=/run_action_list,name=divine_favor_filler,if=talent.divine_word&talent.holy_word_chastise&buff.divine_favor_chastise.down\n# Run divine image rotation with divine image talented\nactions+=/run_action_list,name=divine_image,strict=1,if=talent.divine_image\n# Otherwise generic rotation\nactions+=/run_action_list,name=generic\n\nactions.divine_favor_chastise_prep+=/variable,name=empyreal_exec_time,op=set,value=0\n# apotheosis_exec_time: Store how long Apotheosis will take to execute\nactions.divine_favor_chastise_prep+=/variable,name=apotheosis_exec_time,op=setif,condition=talent.apotheosis,value=action.apotheosis.execute_time,value_else=0\n# Use apotheosis to get Chastise back if its on cooldown and Divine Word will be up soon. We can use Apotheosis (2min CD) to reset Chastise for every other Divine Word (1min CD).\nactions.divine_favor_chastise_prep+=/apotheosis,if=(cooldown.holy_word_chastise.remains>cooldown.divine_word.remains)&(cooldown.divine_word.remains<=(variable.empyreal_exec_time+variable.apotheosis_exec_time))\n# Divine Word only if we can sync with Chastise and (if talented) Empyreal Blaze\nactions.divine_favor_chastise_prep+=/divine_word,if=cooldown.holy_word_chastise.up&(!talent.empyreal_blaze||buff.empyreal_blaze.up)\n# Holy word chastise to trigger divine favor: chastise\nactions.divine_favor_chastise_prep+=/holy_word_chastise,if=!talent.empyreal_blaze&buff.divine_word.up||talent.empyreal_blaze&buff.empyreal_blaze.down\n\nactions.divine_favor_chastise_active+=/halo,if=spell_targets.halo>=2\nactions.divine_favor_chastise_active+=/divine_star,if=spell_targets.divine_star>=2\n# There are particular breakpoints combinations of rhapsody and spell targets beyond which holy nova beats everything else we can do\nactions.divine_favor_chastise_active+=/holy_nova,if=(spell_targets.holy_nova>=2&buff.rhapsody.stack>=18)||(spell_targets.holy_nova>=3&buff.rhapsody.stack>=9)||(spell_targets.holy_nova>=4&buff.rhapsody.stack>=4)||spell_targets.holy_nova>=5\nactions.divine_favor_chastise_active+=/mindgames\nactions.divine_favor_chastise_active+=/shadow_word_death,if=target.health.pct<20\nactions.divine_favor_chastise_active+=/holy_word_chastise\n# We want to cycle smite to different targets to spread holy fire dots in AOE situations, this will buff holy nova's damage\nactions.divine_favor_chastise_active+=/smite,cycle_targets=1,if=spell_targets.holy_nova>=2\nactions.divine_favor_chastise_active+=/smite\n\nactions.divine_favor_filler+=/halo,if=spell_targets.halo>=2\nactions.divine_favor_filler+=/divine_star,if=spell_targets.divine_star>=2\n# There are particular breakpoints combinations of rhapsody and spell targets beyond which holy nova beats everything else we can do\nactions.divine_favor_filler+=/holy_nova,if=(spell_targets.holy_nova>=2&buff.rhapsody.stack>=18)||(spell_targets.holy_nova>=3&buff.rhapsody.stack>=9)||(spell_targets.holy_nova>=4&buff.rhapsody.stack>=4)||spell_targets.holy_nova>=5\nactions.divine_favor_filler+=/mindgames\nactions.divine_favor_filler+=/shadow_word_death,if=target.health.pct<20\n# We can use chastise for damage as long as we will have apotheosis available before the next divine word, otherwise only use it when it will be back up at the same time as divine word\nactions.divine_favor_filler+=/holy_word_chastise,if=(cooldown.apotheosis.remains<cooldown.divine_word.remains)||(cooldown.holy_word_chastise.duration_expected<=cooldown.divine_word.remains)\nactions.divine_favor_filler+=/smite\n\nactions.divine_image+=/apotheosis,if=buff.answered_prayers.down&!(cooldown.holy_word_sanctify.up||cooldown.holy_word_serenity.up||cooldown.holy_word_chastise.up)\n# line_cd prevents re-casting sanctify and serenity right away, wasting GCDs that could be used to proc divine image damage. In testing, the sweet spot balance between adding more divine images, triggering apotheosis, and casting damage CDs was to let the image from each healing holy word expire before re-casting\nactions.divine_image+=/holy_word_sanctify,line_cd=9\nactions.divine_image+=/holy_word_serenity,line_cd=9\nactions.divine_image+=/holy_word_chastise\nactions.divine_image+=/halo,if=spell_targets.halo>=2\nactions.divine_image+=/divine_star,if=spell_targets.divine_star>=2\n# There are particular breakpoints combinations of rhapsody and spell targets beyond which holy nova beats everything else we can do\nactions.divine_image+=/holy_nova,if=(spell_targets.holy_nova>=2&buff.rhapsody.stack>=18)||(spell_targets.holy_nova>=3&buff.rhapsody.stack>=9)||(spell_targets.holy_nova>=4&buff.rhapsody.stack>=4)||spell_targets.holy_nova>=5\nactions.divine_image+=/mindgames\nactions.divine_image+=/shadow_word_death,if=target.health.pct<20\nactions.divine_image+=/smite\n\nactions.generic+=/holy_word_chastise\n# Hold Apotheosis if chastise will be up soon\nactions.generic+=/apotheosis,if=cooldown.holy_word_chastise.remains>(gcd.max*3)\nactions.generic+=/halo,if=spell_targets.halo>=2\nactions.generic+=/divine_star,if=spell_targets.divine_star>=2\n# There are particular breakpoints combinations of rhapsody and spell targets beyond which holy nova beats everything else we can do\nactions.generic+=/holy_nova,if=(spell_targets.holy_nova>=2&buff.rhapsody.stack>=18)||(spell_targets.holy_nova>=3&buff.rhapsody.stack>=9)||(spell_targets.holy_nova>=4&buff.rhapsody.stack>=4)||spell_targets.holy_nova>=5\nactions.generic+=/mindgames\nactions.generic+=/shadow_word_death,if=target.health.pct<20\nactions.generic+=/smite\n\nactions.cooldowns+=/shadowfiend\n# Sync PI with divine favor: chastise if we took divine word\nactions.cooldowns+=/power_infusion,if=(!talent.divine_word||(cooldown.divine_word.up&cooldown.holy_word_chastise.up))\n# Only potion in sync with power infusion\nactions.cooldowns+=/potion,if=buff.power_infusion.up\n# hold trinkets to use with PI\nactions.cooldowns+=/use_items,if=buff.power_infusion.up",
["version"] = 20240828,
["warnings"] = "The import for 'cooldowns' required some automated changes.\nLine 2: Converted 'talent.divine_word' to 'talent.divine_word.enabled' (1x).\n\nThe import for 'default' required some automated changes.\nLine 2: Converted 'talent.empyreal_blaze' to 'talent.empyreal_blaze.enabled' (1x).\nLine 2: Converted 'talent.harmonious_apparatus' to 'talent.harmonious_apparatus.enabled' (1x).\nLine 4: Converted 'talent.divine_word' to 'talent.divine_word.enabled' (1x).\nLine 4: Converted 'talent.holy_word_chastise' to 'talent.holy_word_chastise.enabled' (1x).\nLine 6: Converted 'talent.divine_word' to 'talent.divine_word.enabled' (1x).\nLine 6: Converted 'talent.holy_word_chastise' to 'talent.holy_word_chastise.enabled' (1x).\nLine 7: Converted 'talent.divine_image' to 'talent.divine_image.enabled' (1x).\n\nThe import for 'divine_favor_chastise_prep' required some automated changes.\nLine 2: Converted 'talent.apotheosis' to 'talent.apotheosis.enabled' (1x).\nLine 4: Converted 'talent.empyreal_blaze' to 'talent.empyreal_blaze.enabled' (1x).\nLine 5: Converted 'talent.empyreal_blaze' to 'talent.empyreal_blaze.enabled' (1x).\nLine 5: Converted 'talent.empyreal_blaze' to 'talent.empyreal_blaze.enabled' (1x).\n\nImported 8 action lists.\n",
["author"] = "Kapulani",
["lists"] = {
["divine_favor_chastise_active"] = {
{
["enabled"] = true,
["criteria"] = "spell_targets.halo >= 2",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "spell_targets.divine_star >= 2",
["action"] = "divine_star",
},
{
["enabled"] = true,
["criteria"] = "( spell_targets.holy_nova >= 2 & buff.rhapsody.stack >= 18 ) || ( spell_targets.holy_nova >= 3 & buff.rhapsody.stack >= 9 ) || ( spell_targets.holy_nova >= 4 & buff.rhapsody.stack >= 4 ) || spell_targets.holy_nova >= 5",
["action"] = "holy_nova",
["description"] = "There are particular breakpoints combinations of rhapsody and spell targets beyond which holy nova beats everything else we can do",
},
{
["action"] = "mindgames",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "target.health.pct < 20",
["action"] = "shadow_word_death",
},
{
["action"] = "holy_word_chastise",
["enabled"] = true,
},
{
["enabled"] = true,
["action"] = "smite",
["cycle_targets"] = 1,
["description"] = "We want to cycle smite to different targets to spread holy fire dots in AOE situations, this will buff holy nova's damage",
["criteria"] = "spell_targets.holy_nova >= 2",
},
{
["action"] = "smite",
["enabled"] = true,
},
},
["divine_image"] = {
{
["enabled"] = true,
["criteria"] = "buff.answered_prayers.down & ! ( cooldown.holy_word_sanctify.up || cooldown.holy_word_serenity.up || cooldown.holy_word_chastise.up )",
["action"] = "apotheosis",
},
{
["enabled"] = true,
["description"] = "line_cd prevents re-casting sanctify and serenity right away, wasting GCDs that could be used to proc divine image damage. In testing, the sweet spot balance between adding more divine images, triggering apotheosis, and casting damage CDs was to let the image from each healing holy word expire before re-casting",
["action"] = "holy_word_sanctify",
["line_cd"] = "9",
},
{
["enabled"] = true,
["action"] = "holy_word_serenity",
["line_cd"] = "9",
},
{
["action"] = "holy_word_chastise",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "spell_targets.halo >= 2",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "spell_targets.divine_star >= 2",
["action"] = "divine_star",
},
{
["enabled"] = true,
["criteria"] = "( spell_targets.holy_nova >= 2 & buff.rhapsody.stack >= 18 ) || ( spell_targets.holy_nova >= 3 & buff.rhapsody.stack >= 9 ) || ( spell_targets.holy_nova >= 4 & buff.rhapsody.stack >= 4 ) || spell_targets.holy_nova >= 5",
["action"] = "holy_nova",
["description"] = "There are particular breakpoints combinations of rhapsody and spell targets beyond which holy nova beats everything else we can do",
},
{
["action"] = "mindgames",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "target.health.pct < 20",
["action"] = "shadow_word_death",
},
{
["action"] = "smite",
["enabled"] = true,
},
},
["divine_favor_filler"] = {
{
["enabled"] = true,
["criteria"] = "spell_targets.halo >= 2",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "spell_targets.divine_star >= 2",
["action"] = "divine_star",
},
{
["enabled"] = true,
["criteria"] = "( spell_targets.holy_nova >= 2 & buff.rhapsody.stack >= 18 ) || ( spell_targets.holy_nova >= 3 & buff.rhapsody.stack >= 9 ) || ( spell_targets.holy_nova >= 4 & buff.rhapsody.stack >= 4 ) || spell_targets.holy_nova >= 5",
["action"] = "holy_nova",
["description"] = "There are particular breakpoints combinations of rhapsody and spell targets beyond which holy nova beats everything else we can do",
},
{
["action"] = "mindgames",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "target.health.pct < 20",
["action"] = "shadow_word_death",
},
{
["enabled"] = true,
["criteria"] = "( cooldown.apotheosis.remains < cooldown.divine_word.remains ) || ( cooldown.holy_word_chastise.duration_expected <= cooldown.divine_word.remains )",
["action"] = "holy_word_chastise",
["description"] = "We can use chastise for damage as long as we will have apotheosis available before the next divine word, otherwise only use it when it will be back up at the same time as divine word",
},
{
["action"] = "smite",
["enabled"] = true,
},
},
["precombat"] = {
{
["action"] = "power_word_fortitude",
["enabled"] = true,
},
},
["divine_favor_chastise_prep"] = {
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "0",
["var_name"] = "empyreal_exec_time",
},
{
["enabled"] = true,
["op"] = "setif",
["description"] = "apotheosis_exec_time: Store how long Apotheosis will take to execute",
["value"] = "action.apotheosis.execute_time",
["var_name"] = "apotheosis_exec_time",
["action"] = "variable",
["value_else"] = "0",
["criteria"] = "talent.apotheosis.enabled",
},
{
["enabled"] = true,
["criteria"] = "( cooldown.holy_word_chastise.remains > cooldown.divine_word.remains ) & ( cooldown.divine_word.remains <= ( variable.empyreal_exec_time + variable.apotheosis_exec_time ) )",
["action"] = "apotheosis",
["description"] = "Use apotheosis to get Chastise back if its on cooldown and Divine Word will be up soon. We can use Apotheosis (2min CD) to reset Chastise for every other Divine Word (1min CD).",
},
{
["enabled"] = true,
["criteria"] = "cooldown.holy_word_chastise.up & ( ! talent.empyreal_blaze.enabled || buff.empyreal_blaze.up )",
["action"] = "divine_word",
["description"] = "Divine Word only if we can sync with Chastise and (if talented) Empyreal Blaze",
},
{
["enabled"] = true,
["criteria"] = "! talent.empyreal_blaze.enabled & buff.divine_word.up || talent.empyreal_blaze.enabled & buff.empyreal_blaze.down",
["action"] = "holy_word_chastise",
["description"] = "Holy word chastise to trigger divine favor: chastise",
},
},
["cooldowns"] = {
{
["action"] = "mindbender",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "( ! talent.divine_word.enabled || ( cooldown.divine_word.up & cooldown.holy_word_chastise.up ) )",
["action"] = "power_infusion",
["description"] = "Sync PI with divine favor: chastise if we took divine word",
},
{
["enabled"] = true,
["criteria"] = "buff.power_infusion.up",
["action"] = "potion",
["description"] = "Only potion in sync with power infusion",
},
{
["enabled"] = true,
["criteria"] = "buff.power_infusion.up",
["action"] = "use_items",
["description"] = "hold trinkets to use with PI",
},
},
["generic"] = {
{
["action"] = "holy_word_chastise",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "cooldown.holy_word_chastise.remains > ( gcd.max * 3 )",
["action"] = "apotheosis",
["description"] = "Hold Apotheosis if chastise will be up soon",
},
{
["enabled"] = true,
["criteria"] = "spell_targets.halo >= 2",
["action"] = "halo",
},
{
["enabled"] = true,
["criteria"] = "spell_targets.divine_star >= 2",
["action"] = "divine_star",
},
{
["enabled"] = true,
["criteria"] = "( spell_targets.holy_nova >= 2 & buff.rhapsody.stack >= 18 ) || ( spell_targets.holy_nova >= 3 & buff.rhapsody.stack >= 9 ) || ( spell_targets.holy_nova >= 4 & buff.rhapsody.stack >= 4 ) || spell_targets.holy_nova >= 5",
["action"] = "holy_nova",
["description"] = "There are particular breakpoints combinations of rhapsody and spell targets beyond which holy nova beats everything else we can do",
},
{
["action"] = "mindgames",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "target.health.pct < 20",
["action"] = "shadow_word_death",
},
{
["action"] = "smite",
["enabled"] = true,
},
},
["default"] = {
{
["enabled"] = true,
["action"] = "call_action_list",
["list_name"] = "cooldowns",
},
{
["enabled"] = true,
["action"] = "holy_fire",
["cycle_targets"] = 1,
["description"] = "Always use HF if we have empyreal blaze (dot extension) or harmonious apparatus (cd reduction) or if it's not currently ticking. Otherwise, only use when refreshable to be sure we get the longest duration possible. It's worth it to cast even when the target will die soon based on just the initial hit damage. We also don't want to cast immediately once empyreal blaze is up when we are prepping divine word",
["criteria"] = "( talent.empyreal_blaze.enabled || talent.harmonious_apparatus.enabled || ! ticking || refreshable ) & ! ( buff.empyreal_blaze.up & ( cooldown.divine_word.up || buff.divine_word.up ) & cooldown.holy_word_chastise.up )",
},
{
["enabled"] = true,
["criteria"] = "( refreshable || ! ticking ) & ( target.time_to_die >= dot.shadow_word_pain.duration ) & ! buff.divine_favor_chastise.up & ! buff.apotheosis.up",
["action"] = "shadow_word_pain",
["description"] = "Don't cast SW:P during apotheosis or divine favor: chastise. We also don't cycle targets because it isn't worth the GCDs, since Smite deals slightly more damage than a full SW:P.",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["description"] = "Prepare to enter divine favor: chastise",
["criteria"] = "talent.divine_word.enabled & talent.holy_word_chastise.enabled & buff.divine_favor_chastise.down",
["list_name"] = "divine_favor_chastise_prep",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["description"] = "Enter Divine Favor rotation with divine favor: chastise buff up",
["strict"] = 1,
["criteria"] = "buff.divine_favor_chastise.up",
["list_name"] = "divine_favor_chastise_active",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["description"] = "Run divine favor fillers rotation with buff down",
["criteria"] = "talent.divine_word.enabled & talent.holy_word_chastise.enabled & buff.divine_favor_chastise.down",
["list_name"] = "divine_favor_filler",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["description"] = "Run divine image rotation with divine image talented",
["strict"] = 1,
["criteria"] = "talent.divine_image.enabled",
["list_name"] = "divine_image",
},
{
["enabled"] = true,
["action"] = "run_action_list",
["description"] = "Otherwise generic rotation",
["list_name"] = "generic",
},
},
},
},
["Blood"] = {
["source"] = "https://github.com/simulationcraft/simc/blob/thewarwithin/ActionPriorityLists/default/deathknight_blood.simc",
["builtIn"] = true,
["date"] = 20250826,
["spec"] = 250,
["desc"] = "-- The War Within Season 3\n2025-08-26: APL Sync - 7877e91\n2025-08-06: Initial APL\n\n-- The War Within Season 2\n2025-04-29: Resync with SimC",
["lists"] = {
["sanlayn"] = {
{
["enabled"] = true,
["criteria"] = "( ! buff.bone_shield.up || buff.bone_shield.remains < 1.5 || buff.bone_shield.stack <= 1 ) & active_enemies >= 2",
["action"] = "blood_boil",
},
{
["enabled"] = true,
["criteria"] = "! buff.bone_shield.up || buff.bone_shield.remains < 1.5 || buff.bone_shield.stack <= 1",
["action"] = "deaths_caress",
},
{
["enabled"] = true,
["criteria"] = "dot.blood_plague.remains < 3",
["action"] = "blood_boil",
},
{
["enabled"] = true,
["criteria"] = "( buff.essence_of_the_blood_queen.remains < 1.5 & buff.essence_of_the_blood_queen.remains & buff.vampiric_strike.remains )",
["action"] = "heart_strike",
},
{
["enabled"] = true,
["criteria"] = "buff.bone_shield.stack >= 5 & ( buff.death_and_decay.remains || active_enemies <= 3 )",
["action"] = "bonestorm",
},
{
["enabled"] = true,
["criteria"] = "runic_power.deficit < 20",
["action"] = "death_strike",
},
{
["enabled"] = true,
["criteria"] = "buff.bone_shield.stack < 6 & ! dot.bonestorm.ticking",
["action"] = "marrowrend",
},
{
["enabled"] = true,
["criteria"] = "buff.infliction_of_sorrow.up & buff.death_and_decay.up",
["action"] = "consumption",
},
{
["enabled"] = true,
["criteria"] = "( buff.infliction_of_sorrow.up || buff.vampiric_strike.up ) & buff.death_and_decay.up",
["action"] = "heart_strike",
},
{
["enabled"] = true,
["criteria"] = "active_enemies <= 2 & target.time_to_pct_35 < 5 & target.time_to_die > ( dot.soul_reaper.remains + 5 )",
["action"] = "soul_reaper",
},
{
["enabled"] = true,
["criteria"] = "buff.bone_shield.stack < 6 & ! dot.bonestorm.ticking & active_enemies >= 2",
["action"] = "blood_boil",
},
{
["enabled"] = true,
["criteria"] = "buff.bone_shield.stack < 6 & ! dot.bonestorm.ticking",
["action"] = "deaths_caress",
},
{
["enabled"] = true,
["criteria"] = "buff.bone_shield.stack >= 6 & ( buff.death_and_decay.remains || active_enemies <= 3 ) & cooldown.dancing_rune_weapon.remains >= 25",
["action"] = "tombstone",
},
{
["enabled"] = true,
["criteria"] = "( active_enemies <= 3 & buff.crimson_scourge.remains ) || ( active_enemies > 3 & ! buff.death_and_decay.remains )",
["action"] = "any_dnd",
},
{
["enabled"] = true,
["criteria"] = "active_enemies <= 2 & buff.coagulopathy.remains > 3",
["action"] = "blooddrinker",
},
{
["enabled"] = true,
["criteria"] = "buff.vampiric_strike.up",
["action"] = "heart_strike",
},
{
["action"] = "death_strike",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "rune >= 2",
["action"] = "heart_strike",
},
{
["action"] = "consumption",
["enabled"] = true,
},
{
["action"] = "blood_boil",
["enabled"] = true,
},
{
["action"] = "heart_strike",
["enabled"] = true,
},
},
["default"] = {
{
["action"] = "mind_freeze",
["enabled"] = true,
},
{
["enabled"] = true,
["action"] = "tome_of_lights_devotion",
["use_off_gcd"] = 1,
["criteria"] = "buff.inner_resilience.up",
["name"] = "tome_of_lights_devotion",
},
{
["enabled"] = true,
["action"] = "unyielding_netherprism",
["use_off_gcd"] = 1,
["criteria"] = "cooldown.dancing_rune_weapon.remains < 1 || boss & fight_remains <= 20",
["name"] = "unyielding_netherprism",
},
{
["action"] = "use_items",
["enabled"] = true,
},
{
["enabled"] = true,
["use_off_gcd"] = 1,
["name"] = "bestinslots",
["action"] = "bestinslots",
},
{
["enabled"] = true,
["criteria"] = "buff.dancing_rune_weapon.up",
["action"] = "blood_fury",
},
{
["enabled"] = true,
["criteria"] = "buff.dancing_rune_weapon.up",
["action"] = "berserking",
},
{
["enabled"] = true,
["criteria"] = "buff.dancing_rune_weapon.up",
["action"] = "ancestral_call",
},
{
["enabled"] = true,
["criteria"] = "buff.dancing_rune_weapon.up",
["action"] = "fireblood",
},
{
["enabled"] = true,
["criteria"] = "buff.dancing_rune_weapon.up",
["action"] = "potion",
},
{
["enabled"] = true,
["criteria"] = "tanking & incoming_damage_5s >= vb_damage & ! ( buff.dancing_rune_weapon.up || buff.icebound_fortitude.up )",
["action"] = "vampiric_blood",
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "15 + ( 10 * talent.relish_in_blood.enabled ) + ( 3 * talent.runic_attenuation.enabled ) + ( spell_targets.heart_strike * talent.heartbreaker.enabled * 2 )",
["var_name"] = "rp_deficit_threshold",
},
{
["use_off_gcd"] = 1,
["action"] = "raise_dead",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "( rune <= 2 & rune.time_to_3 > gcd.max & charges_fractional >= 1.8 )",
["action"] = "blood_tap",
},
{
["enabled"] = true,
["criteria"] = "( rune <= 1 & rune.time_to_3 > gcd.max )",
["action"] = "blood_tap",
},
{
["enabled"] = true,
["criteria"] = "buff.bone_shield.remains < gcd.max * 2",
["action"] = "deaths_caress",
},
{
["enabled"] = true,
["criteria"] = "buff.coagulopathy.up & buff.coagulopathy.remains <= gcd.max",
["action"] = "death_strike",
},
{
["enabled"] = true,
["criteria"] = "! buff.death_and_decay.up",
["action"] = "any_dnd",
},
{
["enabled"] = true,
["criteria"] = "dot.blood_plague.remains < gcd.max * 2",
["action"] = "blood_boil",
},
{
["action"] = "dancing_rune_weapon",
["enabled"] = true,
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "hero_tree.deathbringer",
["list_name"] = "deathbringer",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "hero_tree.sanlayn & buff.dancing_rune_weapon.up",
["list_name"] = "san_drw",
},
{
["enabled"] = true,
["action"] = "call_action_list",
["strict"] = 1,
["criteria"] = "hero_tree.sanlayn",
["list_name"] = "sanlayn",
},
},
["precombat"] = {
{
["action"] = "deaths_caress",
["enabled"] = true,
},
{
["enabled"] = true,
["op"] = "set",
["action"] = "variable",
["value"] = "7",
["var_name"] = "bone_shield_refresh_value",
},
},
["deathbringer"] = {
{
["enabled"] = true,
["criteria"] = "rune > 4",
["action"] = "rune_tap",
},
{
["enabled"] = true,
["criteria"] = "buff.bone_shield.stack >= 5 & buff.death_and_decay.remains",
["action"] = "bonestorm",
},
{
["enabled"] = true,
["criteria"] = "runic_power.deficit < variable.rp_deficit_threshold || ( buff.dancing_rune_weapon.up & runic_power.deficit < ( variable.rp_deficit_threshold + 6 ) )",
["action"] = "death_strike",
},
{
["enabled"] = true,
["criteria"] = "active_enemies <= 2 & buff.reaper_of_souls.up & target.time_to_die > ( dot.soul_reaper.remains + 5 )",
["action"] = "soul_reaper",
},
{
["enabled"] = true,
["criteria"] = "active_enemies <= 2 & target.time_to_pct_35 < 5 & target.time_to_die > ( dot.soul_reaper.remains + 5 )",
["action"] = "soul_reaper",
},
{
["action"] = "reapers_mark",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "buff.dancing_rune_weapon.up & ! drw.bp_ticking",
["action"] = "blood_boil",
},
{
["enabled"] = true,
["criteria"] = "! buff.death_and_decay.up",
["action"] = "death_and_decay",
},
{
["enabled"] = true,
["criteria"] = "buff.exterminate.up || ( buff.bone_shield.stack < 5 & ! dot.bonestorm.ticking )",
["action"] = "marrowrend",
},
{
["action"] = "death_strike",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "buff.bone_shield.stack >= 8 & buff.death_and_decay.remains & cooldown.dancing_rune_weapon.remains >= 25",
["action"] = "tombstone",
},
{
["enabled"] = true,
["criteria"] = "! buff.dancing_rune_weapon.up & active_enemies <= 2 & buff.coagulopathy.remains > 3",
["action"] = "blooddrinker",
},
{
["action"] = "consumption",
["enabled"] = true,
},
{
["action"] = "blood_boil",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "buff.coagulopathy.stack < 5",
["action"] = "heart_strike",
},
{
["action"] = "heart_strike",
["enabled"] = true,
},
{
["enabled"] = true,
["criteria"] = "buff.reaper_of_souls.up",
["action"] = "soul_reaper",
},
{
["enabled"] = true,
["criteria"] = "runic_power.deficit > 20",
["action"] = "arcane_torrent",
},
},
["san_drw"] = {
{
["enabled"] = true,
["criteria"] = "buff.essence_of_the_blood_queen.remains < 1.5 & buff.essence_of_the_blood_queen.remains",
["action"] = "heart_strike",
},
{
["enabled"] = true,
["criteria"] = "buff.bone_shield.stack >= 5",
["action"] = "bonestorm",
},
{
["enabled"] = true,
["criteria"] = "runic_power.deficit < 36",
["action"] = "death_strike",
},
{
["enabled"] = true,
["criteria"] = "! drw.bp_ticking",
["action"] = "blood_boil",
},
{
["enabled"] = true,
["criteria"] = "( active_enemies <= 3 & buff.crimson_scourge.remains ) || ( active_enemies > 3 & ! buff.death_and_decay.remains )",
["action"] = "any_dnd",
},
{
["action"] = "heart_strike",
["enabled"] = true,
},
{
["action"] = "death_strike",
["enabled"] = true,
},
{
["action"] = "consumption",
["enabled"] = true,
},
{
["action"] = "blood_boil",
["enabled"] = true,
},
},
},
["version"] = 20250826,
["warnings"] = "Imported 5 action lists.\n",
["profile"] = "## https://github.com/simulationcraft/simc/blob/thewarwithin/ActionPriorityLists/default/deathknight_blood.simc\n## SimulationCraft Commit Sync: 7877e91\n## Date: 2025-08-26\n\n\nactions.precombat+=/deaths_caress\nactions.precombat+=/variable,name=bone_shield_refresh_value,value=7\n\nactions+=/mind_freeze\nactions+=/use_item,name=tome_of_lights_devotion,if=buff.inner_resilience.up,use_off_gcd=1\nactions+=/use_item,name=unyielding_netherprism,if=cooldown.dancing_rune_weapon.remains<1||boss&fight_remains<=20,use_off_gcd=1\nactions+=/use_items\nactions+=/use_item,name=bestinslots,use_off_gcd=1\nactions+=/blood_fury,if=buff.dancing_rune_weapon.up\nactions+=/berserking,if=buff.dancing_rune_weapon.up\nactions+=/ancestral_call,if=buff.dancing_rune_weapon.up\nactions+=/fireblood,if=buff.dancing_rune_weapon.up\nactions+=/potion,if=buff.dancing_rune_weapon.up\nactions+=/vampiric_blood,if=tanking&incoming_damage_5s>=vb_damage&!(buff.dancing_rune_weapon.up||buff.icebound_fortitude.up)\nactions+=/variable,name=rp_deficit_threshold,value=15+(10*talent.relish_in_blood.enabled)+(3*talent.runic_attenuation.enabled)+(spell_targets.heart_strike*talent.heartbreaker.enabled*2)\nactions+=/raise_dead,use_off_gcd=1\nactions+=/blood_tap,if=(rune<=2&rune.time_to_3>gcd&charges_fractional>=1.8)\nactions+=/blood_tap,if=(rune<=1&rune.time_to_3>gcd)\nactions+=/deaths_caress,if=buff.bone_shield.remains<gcd.max*2\nactions+=/death_strike,if=buff.coagulopathy.up&buff.coagulopathy.remains<=gcd\nactions+=/any_dnd,if=!buff.death_and_decay.up\nactions+=/blood_boil,if=dot.blood_plague.remains<gcd.max*2\nactions+=/dancing_rune_weapon\nactions+=/call_action_list,name=deathbringer,strict=1,if=hero_tree.deathbringer\nactions+=/call_action_list,name=san_drw,strict=1,if=hero_tree.sanlayn&buff.dancing_rune_weapon.up\nactions+=/call_action_list,name=sanlayn,strict=1,if=hero_tree.sanlayn\n\nactions.deathbringer+=/rune_tap,if=rune>4\nactions.deathbringer+=/bonestorm,if=buff.bone_shield.stack>=5&buff.death_and_decay.remains\nactions.deathbringer+=/death_strike,if=runic_power.deficit<variable.rp_deficit_threshold||(buff.dancing_rune_weapon.up&runic_power.deficit<(variable.rp_deficit_threshold+6))\nactions.deathbringer+=/soul_reaper,if=active_enemies<=2&buff.reaper_of_souls.up&target.time_to_die>(dot.soul_reaper.remains+5)\nactions.deathbringer+=/soul_reaper,if=active_enemies<=2&target.time_to_pct_35<5&target.time_to_die>(dot.soul_reaper.remains+5)\nactions.deathbringer+=/reapers_mark\nactions.deathbringer+=/blood_boil,if=buff.dancing_rune_weapon.up&!drw.bp_ticking\nactions.deathbringer+=/death_and_decay,if=!buff.death_and_decay.up\nactions.deathbringer+=/marrowrend,if=buff.exterminate.up||(buff.bone_shield.stack<5&!dot.bonestorm.ticking)\nactions.deathbringer+=/death_strike\nactions.deathbringer+=/tombstone,if=buff.bone_shield.stack>=8&buff.death_and_decay.remains&cooldown.dancing_rune_weapon.remains>=25\nactions.deathbringer+=/blooddrinker,if=!buff.dancing_rune_weapon.up&active_enemies<=2&buff.coagulopathy.remains>3\nactions.deathbringer+=/consumption\nactions.deathbringer+=/blood_boil\nactions.deathbringer+=/heart_strike,if=buff.coagulopathy.stack<5\nactions.deathbringer+=/heart_strike\nactions.deathbringer+=/soul_reaper,if=buff.reaper_of_souls.up\nactions.deathbringer+=/arcane_torrent,if=runic_power.deficit>20\n\nactions.san_drw+=/heart_strike,if=buff.essence_of_the_blood_queen.remains<1.5&buff.essence_of_the_blood_queen.remains\nactions.san_drw+=/bonestorm,if=buff.bone_shield.stack>=5\nactions.san_drw+=/death_strike,if=runic_power.deficit<36\nactions.san_drw+=/blood_boil,if=!drw.bp_ticking\nactions.san_drw+=/any_dnd,if=(active_enemies<=3&buff.crimson_scourge.remains)||(active_enemies>3&!buff.death_and_decay.remains)\nactions.san_drw+=/heart_strike\nactions.san_drw+=/death_strike\nactions.san_drw+=/consumption\nactions.san_drw+=/blood_boil\n\nactions.sanlayn+=/blood_boil,if=(!buff.bone_shield.up||buff.bone_shield.remains<1.5||buff.bone_shield.stack<=1)&active_enemies>=2\nactions.sanlayn+=/deaths_caress,if=!buff.bone_shield.up||buff.bone_shield.remains<1.5||buff.bone_shield.stack<=1\nactions.sanlayn+=/blood_boil,if=dot.blood_plague.remains<3\nactions.sanlayn+=/heart_strike,if=(buff.essence_of_the_blood_queen.remains<1.5&buff.essence_of_the_blood_queen.remains&buff.vampiric_strike.remains)\nactions.sanlayn+=/bonestorm,if=buff.bone_shield.stack>=5&(buff.death_and_decay.remains||active_enemies<=3)\nactions.sanlayn+=/death_strike,if=runic_power.deficit<20\nactions.sanlayn+=/marrowrend,if=buff.bone_shield.stack<6&!dot.bonestorm.ticking\nactions.sanlayn+=/consumption,if=buff.infliction_of_sorrow.up&buff.death_and_decay.up\nactions.sanlayn+=/heart_strike,if=(buff.infliction_of_sorrow.up||buff.vampiric_strike.up)&buff.death_and_decay.up\nactions.sanlayn+=/soul_reaper,if=active_enemies<=2&target.time_to_pct_35<5&target.time_to_die>(dot.soul_reaper.remains+5)\nactions.sanlayn+=/blood_boil,if=buff.bone_shield.stack<6&!dot.bonestorm.ticking&active_enemies>=2\nactions.sanlayn+=/deaths_caress,if=buff.bone_shield.stack<6&!dot.bonestorm.ticking\nactions.sanlayn+=/tombstone,if=buff.bone_shield.stack>=6&(buff.death_and_decay.remains||active_enemies<=3)&cooldown.dancing_rune_weapon.remains>=25\nactions.sanlayn+=/any_dnd,if=(active_enemies<=3&buff.crimson_scourge.remains)||(active_enemies>3&!buff.death_and_decay.remains)\nactions.sanlayn+=/blooddrinker,if=active_enemies<=2&buff.coagulopathy.remains>3\nactions.sanlayn+=/heart_strike,if=buff.vampiric_strike.up\nactions.sanlayn+=/death_strike\nactions.sanlayn+=/heart_strike,if=rune>=2\nactions.sanlayn+=/consumption\nactions.sanlayn+=/blood_boil\nactions.sanlayn+=/heart_strike",
["author"] = "SimC",
},
},
["iconStore"] = {
["minimapPos"] = 291.2867819600575,
},
},
},
}
